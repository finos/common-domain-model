namespace "org.isda.cdm"
version "${project.version}"

class Confirmation <"A class to specify a trade confirmation.">
{
    identifier Identifier (1..*) <"The identifier(s) associated with the trade and resulting confirmation.">;
    party Party (1..*) <"The parties associated with the trade.">;
    partyRole PartyRole (1..*) <"The role(s) that party(ies) may have in relation to the trade">;
    lineage Lineage (0..1) <"The lineage attribute provides a linkage to previous lifecycle events and associated data.">;
    status ConfirmationStatusEnum (1..1);
}

enum ConfirmationStatusEnum <"Enumeration for the different types of confirmation status.">
{
    Confirmed,
    Unconfirmed
}
 
data rule Confirmation_partyRole_buyerSeller <"For an security confirmation, both buyer and seller party roles must exist.">
    when Confirmation -> lineage -> executionReference -> product -> security exists
    then Confirmation -> partyRole -> role contains PartyRoleEnum.Buyer or Confirmation -> partyRole -> role contains PartyRoleEnum.Seller
 
class Affirmation <"A class to specify a trade affirmation.">
{
    identifier Identifier (1..*) <"The identifier(s) associated with the trade and resulting confirmation.">;
    party Party (1..*) <"The parties associated with the trade.">;
    partyRole PartyRole (1..*) <"The role(s) that party(ies) may have in relation to the trade">;
    lineage Lineage (0..1) <"The lineage attribute provides a linkage to previous lifecycle events and associated data.">;
    status AffirmationStatusEnum (1..1);
}

enum AffirmationStatusEnum <"Enumeration for the different types of affirmation status.">
{
    Affirmed,
    Unaffirmed
}

data rule Affirmation_partyRole_buyerSeller <"For an security affirmation, both buyer and seller party roles must exist.">
    when Affirmation -> lineage -> executionReference -> product -> security exists
    then Affirmation -> partyRole -> role contains PartyRoleEnum.Buyer or Affirmation -> partyRole -> role contains PartyRoleEnum.Seller
 