namespace "org.isda.cdm"

class CalculationAgentModel <"This class corresponds to the FpML CalculationAgent.model.">
{
	calculationAgent CalculationAgent (0..1) <"The ISDA calculation agent responsible for performing duties as defined in the applicable product definitions.">;
		[synonym FpML value calculationAgent pathExpression "trade"]
		[synonym Rosetta_Workbench value calculationAgent]
		[synonym FpML value calculationAgent pathExpression "trade.swaption"]
		[synonym FpML value calculationAgent pathExpression "swaption"]
	calculationAgentBusinessCenter BusinessCenterEnum (0..1) <"The city in which the office through which ISDA Calculation Agent is acting for purposes of the transaction is located. The short-form confirm for a trade that is executed under a Sovereign or Asia-Pacific Master Confirmation Agreement (MCA), does not need to specify the Calculation Agent. However, the confirm does need to specify the Calculation Agent city. This is due to the fact that the MCA sets the value for Calculation Agent but does not set the value for Calculation Agent city.">;
		[synonym FpML value calculationAgentBusinessCenter pathExpression "trade"]
		[synonym Rosetta_Workbench value calculationAgentBusinessCenter]
}

class ContractIdentifier extends Identifier <"A class defining a trade identifier issued by the indicated party. The CDM doesn't extends the base class PartyAndAccountReference because of the choice logic with the issuer element.">
	[synonym FpML value TradeIdentifier]
{
	id string (0..1);
		[synonym FpML value id]
	partyReference string (0..1) reference <"Reference to a party.">;
		[synonym FpML value partyReference]
	accountReference string (0..1) reference <"Reference to an account.">;
		[synonym FpML value accountReference]
}

choice rule ContractIdentifier_choice <"Choice rule to represent an FpML choice construct.">
	for ContractIdentifier required choice between
	issuer and partyReference

data rule TradeIdentifier_account <"FpML specifies a choice between issuer and [partyReference, accountReference].  The account element should be populated only alongside the party element.">
	when ContractIdentifier -> partyReference is absent
	then ContractIdentifier -> accountReference is absent

class ContractIdentifierExtended extends ContractIdentifier <"A class defining a trade identifier with a reference to the party that this trade is associated with.">
	[synonym FpML value TradeIdentifierExtended]
{
	associatedParty Party (1..1) reference;
		[synonym FpML value associatedParty]
}

class Identifier
{
	issuer string (0..1) reference scheme "issuerIdScheme" <"The reference to the party that assigns the trade identifier.">;
		[synonym Rosetta_Workbench value issuer]
	identifierValue IdentifierValue (1..1); 
	version int (0..1);
		[synonym FpML value version]
		[synonym Rosetta_Workbench value version]
		[synonym FpML value version pathExpression "versionedTradeId"]
		[synonym Rosetta_Workbench value version pathExpression "versionedTradeId"]
}

class IdentifierValue <"A class to associate an id to an identifier value, to support constructs such as the FpML tradeIdentifier.">
{
	id string (0..1) anchor;
		[synonym FpML value id]
	identifier string (1..1) scheme "tradeIdScheme";
		[synonym FpML value tradeId]
		[synonym FpML value tradeId pathExpression "versionedTradeId"]
		[synonym Rosetta_Workbench value identifier pathExpression "versionedTradeId"]
		[synonym Rosetta_Workbench value identifier]
}

class LinkId <"The class to represent link identifiers.">
	[synonym FpML value LinkId]
{
	id string (0..1);
		[synonym FpML value id]
	linkId string (1..1) scheme "linkIdScheme";
		[synonym FpML value linkId]
}

class PackageInformation <"A class defining additional information that may be recorded alongside a transaction package.">
	[synonym FpML value PackageInformation]
{
	relatedParty RelatedParty (0..*) <"This may be used to identify one or more parties that perform a role as part of the transaction.">;
		[synonym FpML value relatedParty]
	category CategoryEnum (0..*);
		[synonym FpML value category]
	/*
	 * Why should the below be specifically associated with package transactions?
	 * It seems to also be relevant in the context of single trades
	 */
	intentToAllocate boolean (0..1) <"specifies whether the transaction package is anticipated to be allocated.">;
		[synonym FpML value intentToAllocate]
/*
 * Only some of the attributes have been incorporated at this point, as some seem questionable (e.g. executionDateTime, which should be associated to the relevant execution event).
 */
}

class PartyContractIdentifier extends ContractIdentifier <"A class defining one or more identifiers allocated to the trade by a party. A link identifier allows the trade to be associated with other related trades, e.g. trades forming part of a larger structured transaction. It is expected that for external communication of trade there will be only one tradeId sent in the document per party.">
	[synonym FpML value PartyTradeIdentifier]
{
	linkId LinkId (0..*) <"A link identifier allowing the trade to be associated with other related trades, e.g. the linkId may contain a tradeId for an associated trade or several related trades may be given the same linkId. FpML does not define the domain values associated with this element. Note that the domain values for this element are not strictly an enumerated list.">;
	allocationTradeId ContractIdentifier (0..*) <"The trade id of the allocated trade. This is used by the block trade to reference the allocated trade.">;
		[synonym FpML value allocationTradeId]
	resultingTradeId ContractIdentifierExtended (0..*) <"The trade id of a resulting trade (beta or gamma trade) that resulted from this trade during a clearing or similar operation (e.g. prime brokerage).">;
		[synonym FpML value resultingTradeId]
	blockTradeId ContractIdentifier (0..1) <"The trade id of the block trade. This is used by each one of the allocated trades to reference the block trade. This element can also represent the trade id of the parent trade for N-level allocations. In the case, this element is only used to model N-level allocations in which the trade acts as block and allocated trade at the same time. This basically means the ability to allocate a block trade to multiple allocation trades, and then allocate these in turn to other allocation trades (and so on if desired).">;
		[synonym FpML value blockTradeId]
	originatingTradeId ContractIdentifier (0..*) <"The trade id of the trade(s) upon which this was based, for example the ID of the trade that was submitted for clearing if this is a cleared trade, or of the original trade if this was novated or cancelled and rebooked, or the list of trades that were netted or compressed together in the case of a compression event. The originatingEvent will explain why the trade was created; the existence and number of originatingTradeId elements should correspond to the originatingEvent, and they should be interpreted using that field. If the trade is inside a business event structure (such as a novation or a compression event) this element should not be populated; instead the event should be used to represent the other trades.">;
		[synonym FpML value originatingTradeId]
}

choice rule PartyContractIdentifier_choice <"Choice rule to represent an FpML choice construct.">
	for PartyContractIdentifier optional choice between
	allocationTradeId and resultingTradeId

data rule VersionedTradeId_version <"FpML specifies the version as a non-negative integer.">
	when Identifier -> version exists
	then Identifier -> version >= 0

class PartyContractInformation <"A class defining party-specific additional information that may be recorded with respect to a contract.">
	[synonym FpML value PartyTradeInformation]
{
	partyReference string (1..1) reference <"The reference to the party that owns this party contract information or, in the case of shared trades information, the reference that originated such information.">;
		[synonym FpML value partyReference]
	naturalPersonRole NaturalPersonRole (0..*) <"The role(s) that natural person(s) may have in relation to the contract.">;
		[synonym FpML value relatedPerson]
}

class PercentageRule <"A class defining a content model for a calculation rule defined as percentage of the notional amount.">
	[synonym FpML value PercentageRule]
{
	paymentPercent number (1..1) <"A percentage of the notional amount.">;
		[synonym FpML value paymentPercent]
	notionalAmountReference string (1..1) reference <"A reference to the notional amount.">;
		[synonym FpML value notionalAmountReference]
}
	