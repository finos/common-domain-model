namespace cdm.synonyms.ore
version "${project.version}"

import cdm.base.math.*
import cdm.base.datetime.*
import cdm.base.staticdata.party.*
import cdm.base.staticdata.asset.rates.*
import cdm.base.staticdata.identifier.*

import cdm.observable.asset.*

import cdm.product.asset.*
import cdm.product.template.*
import cdm.product.common.schedule.*
import cdm.product.common.settlement.*

import cdm.legalagreement.contract.*
import org.isda.cdm.*

synonym source ORE

synonym source ORE_1_0_39 extends ORE
{
    Contract:
        + contractIdentifier
            [value "Trade"]
        + party
            [value "ignore"]
        + tradableProduct
            [value "Trade" mapper "ORECounterparty"]

    TradableProduct:
        + quantityNotation
            [value "LegData" path "SwapData"]
        + priceNotation
            [value "LegData" path "SwapData"]

    Counterparty:
        + partyReference
            [value "Envelope"]
        + counterparty
            [set to CounterpartyEnum->Party2]

    Party:
        + partyId
            [value "CounterParty"]

    PriceNotation:
        + price
            [value "FloatingLegData"]
        + assetIdentifier
            [hint "FloatingLegData"]
            [value "ignore"]

   EconomicTerms:
       + earlyTerminationProvision
           [value "ignore"]
       + optionProvision
           [value "ignore"]
       + effectiveDate
           [value "ignore"]
       + terminationDate
           [value "ignore"]

    FloatingInterestRate:
        + spread
            [value "Spread" path "Spreads"]

    QuantityNotation:
        + quantity
            [value "Notionals"]

    Quantity:
        + amount
            [value "Notional"]

    Product:
        + contractualProduct
            [value "SwapData" set when "TradeType" = "Swap"]

    Payout:
        + interestRatePayout
            [value "LegData"]
        + optionPayout
            [value "ignore"]
        + equityPayout
            [value "ignore"]
        + cashflow
            [value "ignore"]
        + creditDefaultPayout
            [value "ignore"]
        + forwardPayout
            [value "ignore"]
        + securityPayout
            [value "ignore"]

    InterestRatePayout:
        + calculationPeriodDates
            [value "Rules" path "ScheduleData"]
        + crossCurrencyTerms
            [value "ignore"]
        + dayCountFraction
            [value "DayCounter"]
        + paymentDate
            [value "ignore"]
        + stubPeriod
            [value "ignore"]

    ResolvablePayoutQuantity:
        + quantityMultiplier
            [value "ignore"]

    PaymentDates:
        + payRelativeTo
            [set to PayRelativeToEnum -> CalculationPeriodStartDate when "ScheduleData->Rules->Rule"="Forward",
                set to PayRelativeToEnum -> CalculationPeriodEndDate when "ScheduleData->Rules->Rule"="Backward"]
        + paymentFrequency
            [value "Rules" path "ScheduleData"]
        + paymentDaysOffset
			[hint "PaymentLag"]
            [value "ignore"]

    CalculationPeriodDates:
        + firstPeriodStartDate
            [value "ignore"]
        + effectiveDate
            [hint "StartDate"]
            [value "ignore"]
        + terminationDate
            [hint "EndDate"]
            [hint "TermConvention"]
            [value "ignore"]
        + calculationPeriodDatesAdjustments
            [hint "Convention"]
            [hint "Calendar"]
            [value "ignore"]
 
    AdjustableDate:
        + unadjustedDate
            [value "StartDate" maps 2 dateFormat "yyyyMMdd"]
            [value "EndDate" maps 2 dateFormat "yyyyMMdd"]
    
    PeriodicDates:
        + endDate
            [hint "EndDate"]
            [value "ignore"]
        + startDate
            [hint "StartDate"]
            [value "ignore"]

    AdjustedRelativeDateOffset:
        + relativeDateAdjustments
            [value "ignore"]

    FloatingRateOption:
        + floatingRateIndex
            [value "Index" maps 2]
        + indexTenor
            [value "ignore"]

    RateSpecification:
        + fixedRate
            [value "FixedLegData"]
            [hint "Currency"]
        + floatingRate
            [hint "FloatingLegData"]
            [value "ignore"]
        + inflationRate
            [value "ignore"]

    FixedRateSpecification:
        + rateSchedule
            [value "Rates"]

    AssetIdentifier:
        + currency
            [value "Currency" maps 2 set when "LegType" = "Fixed"]
        + rateOption
            [value "FloatingLegData" set when "LegType" = "Floating"]
 
    AssignedIdentifier:
        + identifier
            [value "id"]
 
    BusinessDayAdjustments:
        + businessDayConvention
            [value "PaymentConvention" maps 2] // Payment convention of the leg coupons
            [value "Convention" maps 2] // Determines the adjustment of the schedule dates generated
            [value "TermConvention" maps 2] // Determines the adjustment of the final schedule date generated
            [value "ignore"]

    PaymentDateSchedule:
        + finalPaymentDate
            [value "ignore"]
        + interimPaymentDates
            [value "ignore"]

    PayerReceiver:
        // Party1: Owner of message
        + payer
            [set to CounterpartyEnum -> Party1 when "Payer" = True,
                set to CounterpartyEnum -> Party2 when "Payer" = False]
        + receiver
            [set to CounterpartyEnum -> Party2 when "Payer" = True,
                set to CounterpartyEnum -> Party1 when "Payer" = False]

    Frequency:
        + period
            [value "Tenor" maps 2 pattern "[0-9]*(.*)" "$1"]
        + periodMultiplier
            [value "Tenor" maps 2 pattern "([0-9]*).*" "$1"]

    CalculationPeriodFrequency:
        + rollConvention
            [set to RollConventionEnum -> _1 when "EndOfMonth" <> "Y"]
            // [set to RollConventionEnum -> _1 when "Rule" = "Forward" and "StartDate" = "2016-03-01" and "EndOfMonth" <> "Y",
            //      set to RollConventionEnum -> _1 when "Rule" = "Backward" and "EndDate" = "2036-03-01" and "EndOfMonth" <> "Y"]
            // As discussed:
            //      The above is the desired mapping logic. The problem is that it causes a compilation error. When I reference them as subelements, like so,
            //          [set to RollConventionEnum -> _1 when "Rules->Rule" = "Forward" and "Rules->StartDate" = "2016-03-01" and "Rules->EndOfMonth" <> "Y"]
            //      then it compiles, but the mapping doesn't actually work. I have verified that each individual boolean operation works. It is when we combine them that the issue occurs.
            //
            // There is currently no CDM equivalent to "Rule" in ORE, but the "Forward" and "Backward" schedule date generation rules are equivalent to using the day of the reference date ("StartDate" and "EndDate", respectively) for the regular period.

    ResetDates:
        + resetRelativeTo
            [set to ResetRelativeToEnum -> CalculationPeriodEndDate when "FloatingLegData->IsInArrears" = True,
                set to ResetRelativeToEnum -> CalculationPeriodStartDate when "FloatingLegData->IsInArrears" = False]
        + rateCutOffDaysOffset
            [value "ignore"]
        + initialFixingDate
            [value "ignore"]
        + finalFixingDate
            [value "ignore"]
        + resetDatesAdjustments
            [value "ignore"]
        + fixingDates
			[hint "FloatingLegData"]
			[hint "ScheduleData"]
			[value "ignore"]

    Offset:
        + dayType
            [set to DayTypeEnum -> Business when "FloatingLegData->FixingDays" exists,
				set to DayTypeEnum -> Business when "PaymentLag" exists]
    
    Period:
        + periodMultiplier
            [value "FixingDays" path "FloatingLegData"]
			[value "PaymentLag" maps 2] // Payment offset relative to calculation period dates
        + period
            [set to PeriodEnum -> D when "FloatingLegData->FixingDays" exists,
				set to PeriodEnum -> D when "PaymentLag" exists]

    RelativeDateOffset:
        + businessDayConvention
            [value "Convention" path "ScheduleData->Rules"]

    BusinessCenters:
        + businessCenter
            [value "Calendar", "Calendar" path "ScheduleData->Rules" maps 2]

    Schedule:
        + initialValue
            [value "Rate"]
 
    enums
 
    BusinessCenterEnum:
        // A lot of one to many relationships from ORE to CDM. For example, CA is used for all of Canada in ORE. CDM is more granular.
        + EUTA
            [value "TARGET"]
            [value "TGT"]
            [value "EUR"]
 
    BusinessDayConventionEnum:
        + FOLLOWING
            [value "F"]
            [value "Following"]
            [value "FOLLOWING"]
        + MODFOLLOWING
            [value "MF"]
            [value "ModifiedFollowing"]
            [value "Modified Following"]
            [value "MODIFIEDF"]
        + PRECEDING
            [value "P"]
            [value "Preceding"]
            [value "PRECEDING"]
        + MODPRECEDING
            [value "MP"]
            [value "ModifiedPreceding"]
            [value "Modified Preceding"]
            [value "MODIFIEDP"]
        + NONE
            [value "U"]
            [value "Unadjusted"]
            [value "INDIFF"]
        + NEAREST
            [value "NEAREST"]
 
    DayCountFractionEnum:
        + ACT_360
            [value "A360"]
            [value "Actual/360"]
            [value "ACT/360"]
        + ACT_365_FIXED
            [value "A365"]
            [value "A365F"]
            [value "Actual/365 (fixed)"]
        + ACT_ACT_AFB
            [value "ActActAFB"]
            [value "Actual/Actual (AFB)"]
        + ACT_ACT_ICMA
            [value "ActActICMA"]
            [value "ActualActual (ICMA)"] 
        + ACT_ACT_ISDA
            [value "ActActISDA"]
            [value "ActualActual (ISDA)"]
            [value "ACT/ACT"]
            [value "ACT"]
        + BUS_252
            [value "BUS/252"]
            [value "Business/252"]
        + _30E_360
            [value "30E/360"]
            [value "30E/360 (Eurobond Basis)"]
        + _30_360
            [value "T360"]
            [value "30/360"]
            [value "30/360 (Bond Basis)"]
            [value "ACT/nACT"]

    FloatingRateIndexEnum:
        // ORE allows a string in the format of CCY-INDEX-TENOR
        + EUR_6M_EURIBOR_SWAP_CME_vs_LCH_ICAP
            [value "EUR-EURIBOR-6M"]

    PeriodEnum:
        + D
            [value "D"]
        + W
            [value "W"]
        + M
            [value "M"]
        + Y
            [value "Y"]
            
}