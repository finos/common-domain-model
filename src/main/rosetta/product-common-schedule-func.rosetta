namespace cdm.product.common.schedule : <"Common product schedule concepts: calculation period, reset, fixing and payment dates, stub, notional schedule, roll convention.">
version "${project.version}"

import cdm.base.datetime.*

import cdm.product.template.*

func EffectiveDateContainsPaymentDate:
	inputs:
		economicTerms EconomicTerms (1..1)
	output:
		result boolean (1..1)

	alias paymentDate: PaymentDate(economicTerms)
    alias interestRatePayout: economicTerms -> payout -> interestRatePayout only-element
    alias equityPayout: economicTerms -> payout -> equityPayout only-element

	alias effectiveDates: [
			economicTerms -> effectiveDate -> adjustableDate -> adjustedDate,
			economicTerms -> effectiveDate -> adjustableDate -> unadjustedDate,
			economicTerms -> effectiveDate -> relativeDate -> adjustedDate,
			interestRatePayout -> calculationPeriodDates -> effectiveDate -> adjustableDate -> adjustedDate,
			interestRatePayout -> calculationPeriodDates -> effectiveDate -> adjustableDate -> unadjustedDate,
			interestRatePayout-> calculationPeriodDates -> effectiveDate -> relativeDate -> adjustedDate,
			equityPayout -> calculationPeriodDates -> effectiveDate -> adjustableDate -> adjustedDate,
			equityPayout -> calculationPeriodDates -> effectiveDate -> adjustableDate -> unadjustedDate,
			equityPayout -> calculationPeriodDates -> effectiveDate -> relativeDate -> adjustedDate
	]
	set result:
		effectiveDates exists and effectiveDates contains paymentDate

func PaymentDate: 
	inputs: economicTerms EconomicTerms (1..1)
	output: result date (0..1)
	set result: economicTerms -> payout -> interestRatePayout only-element -> paymentDate -> adjustedDate

func PeriodsInYear:
	inputs: frequency CalculationPeriodFrequency (1..1)
	output: numberOfPeriods int (1..1)

func CalculationPeriod: <"2006 ISDA Definition Section 4.13. 'Calculation Period' means, in respect of a Swap Transaction and a party, each period from, and including, one Period End Date of that party to, but excluding, the next following applicable Period End Date during the Term of the Swap Transaction, except that (a) the initial Calculation Period for the party will commence on, and include, the Effective Date and (b) the final Calculation Period for the party will end on, but exclude, the Termination Date.">
	inputs:
		calculationPeriodDates CalculationPeriodDates (1..1)
		date date (1..1)
	output:
	    result CalculationPeriodData (1..1)

func CalculationPeriods: <"2006 ISDA Definition Section 4.13. 'Calculation Period' means, in respect of a Swap Transaction and a party, each period from, and including, one Period End Date of that party to, but excluding, the next following applicable Period End Date during the Term of the Swap Transaction, except that (a) the initial Calculation Period for the party will commence on, and include, the Effective Date and (b) the final Calculation Period for the party will end on, but exclude, the Termination Date.">
	inputs:
		calculationPeriodDates CalculationPeriodDates (1..1)
	output:
	    result CalculationPeriodData (0..*)


func CalculationPeriodRange:
	inputs:
		startDate date (0..1) // should be AdjustableOrRelativeDate
		endDate date (0..1) // should be AdjustableOrRelativeDate
		dateAdjustments BusinessDayAdjustments (0..1) 
	output:
		result CalculationPeriodData (1..1)
