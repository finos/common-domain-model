namespace org.isda.cdm
version "${project.version}"

import cdm.base.math.*
import cdm.base.datetime.*

// TODO - Providing the ability to embed aliases would provide the ability to ensure consistency between this alias and the effectiveDate one, while also simplify the syntax
// See Trello card https://trello.com/c/89Lv8rAn
func NovatedContractEffectiveDate:
	inputs:
		businessEvent BusinessEvent(1..1)
	output:
		result DateGroup(1..1)

	alias eTerms: businessEvent -> primitives -> contractFormation -> after -> contract -> tradableProduct -> product -> contractualProduct -> economicTerms
	alias effectiveDate: eTerms only-element -> effectiveDate
	alias interestRatePayoutDate: eTerms only-element-> payout -> interestRatePayout -> calculationPeriodDates -> effectiveDate
	alias equityPayoutDate: eTerms only-element-> payout -> equityPayout -> calculationPeriodDates -> effectiveDate

	assign-output result -> dates: [
			effectiveDate -> adjustableDate -> adjustedDate,
			effectiveDate -> adjustableDate -> unadjustedDate,
			effectiveDate -> relativeDate -> adjustedDate,
			interestRatePayoutDate -> adjustableDate -> adjustedDate,
			interestRatePayoutDate -> adjustableDate -> unadjustedDate,
			interestRatePayoutDate -> relativeDate -> adjustedDate,
			equityPayoutDate -> adjustableDate -> adjustedDate,
			equityPayoutDate -> adjustableDate -> unadjustedDate,
			equityPayoutDate -> relativeDate -> adjustedDate
	]

func QuantityChange: <"The alias to represent the quantity or notional amount in terms of number of units (i.e. ignoring the currency or units denomination) before a quantity change primitive.">
	inputs:
		contract Contract(1..*)
	output:
		quantityChange QuantityGroups(1..1)

	// TODO - Support group by structures.
	assign-output quantityChange -> quantityGroups -> amount: [
		( contract -> tradableProduct -> quantityNotation group by assetIdentifier -> currency ) -> quantity -> amount
	]

func QuantityIncreased:
	inputs:
		quantityChangePrimitive QuantityChangePrimitive(1..*)
	output: result boolean(1..1)

	alias beforeQuantity:
		QuantityChange(quantityChangePrimitive -> before -> contract)
	alias afterQuantity:
		QuantityChange(quantityChangePrimitive -> after -> contract)

	assign-output result:
		ListsCompare(CompareOp -> Greater, afterQuantity -> quantityGroups -> amount, beforeQuantity -> quantityGroups -> amount, empty)

	// TODO - Support operators for groupings.
	//	assign-output result:
	//		afterQuantity > beforeQuantity

func QuantityDecreased:
	inputs:
		quantityChangePrimitive QuantityChangePrimitive(1..*)
	output: result boolean(1..1)

	alias beforeQuantity:
		QuantityChange(quantityChangePrimitive -> before -> contract)
	alias afterQuantity:
		QuantityChange(quantityChangePrimitive -> after -> contract)

	assign-output result:
		ListsCompare(CompareOp -> Greater, beforeQuantity -> quantityGroups -> amount, afterQuantity -> quantityGroups -> amount, empty) = True
		and ListsCompare(CompareOp -> Greater, afterQuantity -> quantityGroups -> amount, empty, 0.0) = True

	// TODO - Support operators for groupings.
	//	assign-output result:
	//		afterQuantity < beforeQuantity and afterQuantity > 0

func QuantityDecreasedToZero:
	inputs:
		quantityChangePrimitive QuantityChangePrimitive(1..*)
	output: result boolean(1..1)

	alias beforeQuantity:
		QuantityChange(quantityChangePrimitive -> before -> contract)
	alias afterQuantity:
		QuantityChange(quantityChangePrimitive -> after -> contract)

	assign-output result:
		ListsCompare(CompareOp -> Greater, beforeQuantity -> quantityGroups -> amount, empty, 0.0) = True
		and ListsCompare(CompareOp -> Equal, afterQuantity -> quantityGroups -> amount, empty, 0.0) = True

	// TODO - Support operators for groupings.
	//	assign-output result:
	//		beforeQuantity > 0 and afterQuantity = 0

func NoQuantityChange:
	inputs:
		quantityChangePrimitive QuantityChangePrimitive(1..*)
	output:
		result boolean(1..1)

	alias beforeQuantity:
		QuantityChange(quantityChangePrimitive -> before -> contract)
	alias afterQuantity:
		QuantityChange(quantityChangePrimitive -> after -> contract)

	assign-output result:
		ListsCompare(CompareOp -> Equal, beforeQuantity -> quantityGroups -> amount, beforeQuantity -> quantityGroups -> amount, empty) = True

	// TODO - Support operators for groupings.
	//	assign-output result:
	//		beforeQuantity = afterQuantity

