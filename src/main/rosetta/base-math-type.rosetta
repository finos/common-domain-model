namespace cdm.base.math : <"Basic maths concepts: quantity and unit, rounding, curve / schedule, non-negativity constraint etc.">
version "${project.version}"

import cdm.observable.asset.*

import cdm.synonyms.config.*


type UnitType: <"Defines the unit to be used for price, quantity, or other purposes">
	capacityUnit CapacityUnitEnum (0..1) <"Provides an enumerated value for a capacity unit, generally used in the context of defining quantities for commodities.">
	weatherUnit WeatherUnitEnum (0..1) <"Provides an enumerated values for a weather unit, generally used in the context of defining quantities for commodities.">
	financialUnit FinancialUnitEnum (0..1) <"Provides an enumerated value for financial units, generally used in the context of defining quantities for securities.">
	    [synonym Workflow_Event value "financialUnit" path "unitOfAmount"]
	currency string (0..1) <"Defines the currency to be used as a unit for a price, quantity, or other purpose.">
		[metadata scheme]
		[synonym Workflow_Event value "currency" path "unitOfAmount"]
	frequency cdm.base.datetime.Frequency (0..1) <"Defines the frequency to be used as a unit for a price, quantity, or other purpose.">

	condition:one-of

type MeasureBase: <"Provides an abstract base class shared by Price and Quantity.">

	amount number (1..1) <"Specifies an amount to be qualified and used in a Price or Quantity definition.">
	unitOfAmount UnitType (1..1) <"Qualifies the unit by which the amount is measured.">

type Quantity extends MeasureBase: <"Specifies a quantity to be associated with an event, for example a trade amount.">

	multiplier number (0..1) <"Defines the number to be multiplied by the amount to derive a total quantity.">
	multiplierUnit UnitType (0..1) <"Qualifies the multiplier with the applicable unit.  For example in the case of the Coal (API2) CIF ARA (ARGUS-McCloskey) Futures Contract on the CME, where the unitOfAmount would be contracts, the multiplier would 1,000 and the mulitiplier Unit would be 1,000 MT (Metric Tons).">

	condition Quantity_multiplier: <"Requires that a the multiplier must be positive.">
	    if multiplier exists
		then multiplier >= 0.0

type NonNegativeQuantitySchedule: <"Class to specify a non-negative quantity schedule, which is used to define the quantity of a payout leg. This quantity cannot be negative, while direction is specified through a BuyerSeller or PayerReceiver attribute. The only available schedule implementation is a step schedule, specified as a set of date-value pairs. The non-negativity is enforced by using the non-negative quantity and step schedule classes.">

	initialQuantity Quantity (0..1) <"The initial quantity of a schedule represented as a single, non-negative number. In the case where no schedule is specified, the constant quantity is specified at a higher level. Can be referenced from TradableProduct">
		[metadata address "pointsTo"=PriceQuantity->quantity]
	stepSchedule NonNegativeStepSchedule (0..1) <"The schedule specified as a set of date-value pairs. Attribute is optional, to represent the case where no schedule is specified so quantity is just constant over time.">

	condition NonNegativeQuantity_amount: <"For a non-negative quantity, the amount attribute must be positive.">
	    if initialQuantity exists
		then initialQuantity->amount >= 0.0

type NonNegativeQuantity extends Quantity: <" Class to specify a quantity as a non-negative number, which condition is enforced through a data rule that only applies to the extending class.">

	condition NonNegativeQuantity_amount: <"For a non-negative quantity, the amount attribute must be positive.">
		if NonNegativeQuantity exists then amount >= 0.0

type NonNegativeStepSchedule: <" Class to specify a non-negative schedule as a schedule of steps, typically used to define a payout leg with variable quantity. This quantity cannot be negative, while direction is specified through a BuyerSeller or PayerReceiver attribute. The non-negativity is enforced by making use of the non-negative step class.">

	step NonNegativeStep (1..*) <"The schedule of step date and non-negative value pairs. On each step date the associated step value becomes effective. A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.">

type NonNegativeStep: <"A class defining a step date and non-negative step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortisation or a step-up coupon schedule.">
	[metadata key]

	stepDate date (1..1) <"The date on which the associated stepValue becomes effective. This day may be subject to adjustment in accordance with a business day convention.">
	stepValue number (1..1) <"The non-negative rate or amount which becomes effective on the associated stepDate. A rate of 5% would be represented as 0.05.">

	condition StepValue: <"FpML specified stepValue as a NonNegativeDecimal.">
		if NonNegativeStep exists
		then stepValue >= 0.0

type Rounding: <"Defines rounding rules and precision to be used in the rounding of a number.">
	roundingDirection RoundingDirectionEnum (1..1) <"Specifies the rounding rounding rule as up, down, or nearest.">
	precision int (0..1) <"Specifies the rounding precision in terms of a number of decimal places when the number is evaluated in decimal form (not percentage), e.g. 0.09876543 rounded to the nearest 5 decimal places is  0.0987654.">
	
type RateSchedule: <"A class defining a schedule of rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.">

	initialValue Price (0..1) <"The initial rate. An initial rate of 5% would be represented as 0.05.">
	    [metadata address "pointsTo"=PriceQuantity->price]
	step Step (0..*) <"The schedule of step date and value pairs. On each step date the associated step value becomes effective A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.">

type Schedule: <"A class defining a schedule of rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.">

	initialValue number (1..1) <"The initial rate or amount, as the case may be. An initial rate of 5% would be represented as 0.05.">
	step Step (0..*) <"The schedule of step date and value pairs. On each step date the associated step value becomes effective A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.">

type Step: <"A class defining a step date and step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortisation or a step-up coupon schedule.">
	[metadata key]

	stepDate date (1..1) <"The date on which the associated step value becomes effective.">
	stepValue number (1..1) <"The rate of amount which becomes effective on the associated step date. A rate of 5% would be represented as 0.05.">

type QuantityGroups:
	quantityGroups QuantityGroup(0..*)

type QuantityGroup:
	currency string(0..1)
	amount number(0..*)


type Vector: <"A list of numbers to be processed as a unit.  It can contain 0 or more numbers.   It is passwed into and out of library functions to avoid Rosetta limitations with code generation for built-in types">
    values number(0..*)
