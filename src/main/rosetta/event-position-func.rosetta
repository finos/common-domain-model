namespace cdm.event.position : <"Position concepts: portfolio and portfolio aggregation.">
version "${project.version}"

import cdm.base.math.*
import cdm.observable.common.*
import cdm.observable.asset.*
import cdm.product.template.*
import cdm.legalagreement.contract.*
import cdm.event.common.*

func FxMarkToMarket: <"Representation of sample mark to market calculation provided by a member firm.">
	inputs: trade Trade (1..1)
	output: value number (1..1)
	
	alias forwardPayout: <"Alias to the forward pay out.">
		trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> forwardPayout only-element

    alias currencyPair: <"The quoted currency pair. Only works for single trade lot and price">
        trade -> tradableProduct -> tradeLot -> priceQuantity only-element -> observable -> currencyPair
	
	alias currency1Quantity: <"Quantity amount for currency 1. Only works in the case of a single trade lot.">
		FilterQuantity( trade -> tradableProduct -> tradeLot only-element -> priceQuantity -> quantity, currencyPair -> currency1 ) -> amount
	
	alias currency2Quantity: <"Quantity amount for currency 2. Only works in the case of a single trade lot.">
		FilterQuantity( trade -> tradableProduct -> tradeLot only-element -> priceQuantity -> quantity, currencyPair -> currency2 ) -> amount
	
	 alias quotedQuantity: <"The quoted currency amount.">
		if currencyPair -> quoteBasis = QuoteBasisEnum -> Currency1PerCurrency2
		then currency1Quantity
		else currency2Quantity

	alias baseQuantity: <"The base currency amount.">
		if currencyPair -> quoteBasis = QuoteBasisEnum -> Currency2PerCurrency1
 		then currency1Quantity
		else currency2Quantity
	
	alias interpolatedRate:
		InterpolateForwardRate(forwardPayout)
	
	condition: <"The forwardPayout on the contract must exist.">
		trade -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> forwardPayout exists
	
	assign-output value:
		(quotedQuantity / interpolatedRate - baseQuantity) * interpolatedRate

func InterpolateForwardRate:
	inputs: forward ForwardPayout (1..1)
	output: result number(1..1)

func EvaluatePortfolioState: <"Function specification to evaluate a portfolio's aggregation parameters and return a new portfolio state containing aggregated positions.">
	inputs:
		portfolio Portfolio (1..1) <"Portfolio containing the aggregation parameters to be used to calculate the new portfolio state.">

	output:
		portfolioState PortfolioState (1..1) <"Portfolio state containing the aggregated positions based on the input aggregation parameters.">

	