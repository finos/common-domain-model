namespace org.isda.cdm
version "${project.version}"

import cdm.base.*
import cdm.base.maths.*
import cdm.base.datetime.*
import cdm.base.staticdata.asset.commons.*

type ActualPrice:
	[synonym FpML_5_10 value "ActualPrice"]
	currency string (0..1) <"Specifies the currency associated with the net price. This element is not present if the price is expressed in percentage terms (as specified through the priceExpression element).">
		[metadata scheme]
		[synonym FpML_5_10 value "currency" meta "currencyScheme"]
	amount number (1..1)
		[synonym FpML_5_10 value "amount"]
	priceExpression PriceExpressionEnum (1..1) <"Specifies whether the price is expressed in absolute or relative terms.">
		[synonym FpML_5_10 value "priceExpression"]
	condition Currency: <"The currency attribute associated with the ActualPrice should not be specified when the price is expressed as percentage of notional.">
		if priceExpression = PriceExpressionEnum -> PercentageOfNotional
		then currency is absent

type CommoditySet:
	// TODO Never referenced in CDM
	commodity Commodity (1..1)
	quantity number (1..1)
	unit UnitEnum (1..1) <"The unit of measure, applicable to physical assets.">
		[synonym Workflow_Event value "unit"]
	timeUnit TimeUnitEnum (0..1)

type ConstituentWeight: <"A class describing the weight of each of the underlier constituent within the basket, either in absolute or relative terms.">
	[synonym FpML_5_10 value "ConstituentWeight"]
	openUnits number (0..1) <"The number of units (index or securities) that constitute the underlier of the swap. In the case of a basket swap, this element is used to reference both the number of basket units, and the number of each asset components of the basket when these are expressed in absolute terms.">
		[synonym FpML_5_10, CME_SubmissionIRS_1_0, CME_ClearedConfirm_1_17 value "openUnits"]
	basketPercentage number (0..1) <"The relative weight of each respective basket constituent, expressed in percentage. A basket percentage of 5% would be represented as 0.05.">
		[synonym FpML_5_10, CME_SubmissionIRS_1_0, CME_ClearedConfirm_1_17 value "basketPercentage"]
	condition BasketPercentage: <"FpML specifies basketPercentage as a RestrictedPercentage type, meaning that the value needs to be comprised between 0 and 1.">
		if basketPercentage exists
		then basketPercentage >= 0.0 and basketPercentage <= 1.0

type DividendPayout: <"A class describing the dividend payout ratio associated with an equity underlier. In certain cases the actual ratio is not known on trade inception, and only general conditions are then specified.">
	[synonym FpML_5_10 value "DividendPayout"]
	dividendPayoutRatio number (1..1) <"Specifies the total actual dividend payout ratio associated with the equity underlier. A ratio of 90% should be expressed at 0.90.">
		[synonym FpML_5_10 value "dividendPayoutRatio"]
	dividendPayoutRatioCash number (0..1) <"Specifies the cash actual dividend payout ratio associated with the equity underlier. A ratio of 90% should be expressed at 0.90.">
		[synonym FpML_5_10 value "dividendPayoutRatioCash"]
	dividendPayoutRatioNonCash number (0..1) <"Specifies the non cash actual dividend payout ratio associated with the equity underlier. A ratio of 90% should be expressed at 0.90.">
		[synonym FpML_5_10 value "dividendPayoutRatioNonCash"]
	/*
	 * The FpML dividendPayoutConditions specified as a string has not be incorporated at this time, as such string approach is deemed not
	 * effective.  We should confirm whether it is effectively used and, if yes, how it is used.
	 * The FpML dividendPayment has also not been incorporated, as it seem strange to represent the next dividend payment as part of the contractual
	 * terms.  Here also, let's confirm usage.
	 */
	condition DividendPayoutRatio: <"The dividend payout ratio should be comprised between 0 and 100%, meaning 0 and 1.">
		if dividendPayoutRatio exists
		then dividendPayoutRatio >= 0
			and dividendPayoutRatio <= 1

	condition DividendPayoutRatioCash: <"The cash dividend payout ratio should be comprised between 0 and 100%, meaning 0 and 1.">
		if dividendPayoutRatioCash exists
		then dividendPayoutRatioCash >= 0
			and dividendPayoutRatio <= 1

	condition DividendPayoutRatioNonCash: <"The non cash dividend payout ratio should be comprised between 0 and 100%, meaning 0 and 1.">
		if dividendPayoutRatioNonCash exists
		then dividendPayoutRatioNonCash >= 0
			and dividendPayoutRatio <= 1


type Underlier: <"A class describing the whole set of possible underliers: single underliers or multiple underliers, each of these having either security or index components.">
	[synonym FpML_5_10 value "Underlyer"]

	underlyingProduct Product (1..1) <"Specifies the underlying product. As a difference with FpML, and for the purpose of also supporting swaption and options on CDS through a generic construct, its scope also includes the contract and contractualProduct.">
