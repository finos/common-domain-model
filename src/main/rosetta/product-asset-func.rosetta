namespace cdm.product.asset : <"Product concepts applicable to specific asset classes.">
version "${project.version}"

import cdm.base.math.*
import cdm.base.datetime.*
import cdm.base.staticdata.asset.rates.*

import cdm.observable.asset.*

import cdm.product.template.*
import cdm.product.common.schedule.*

func ForwardFX:
	inputs:
		forwardPayout ForwardPayout(1..1)
	output: result ForeignExchange (1..1)
	assign-output result: forwardPayout -> underlier -> foreignExchange

func FixedAmount: <"2006 ISDA Definition Article 5 Section 5.1. Calculation of a Fixed Amount: The Fixed Amount payable by a party on a Payment Date will be: (a) if an amount is specified for the Swap Transaction as the Fixed Amount payable by that party for that Payment Date or for the related Calculation Period, that amount; or (b) if an amount is not specified for the Swap Transaction as the Fixed Amount payable by that party for that Payment Date or for the related Calculation Period, an amount calculated on a formula basis for that Payment Date or for the related Calculation Period as follows: Fixed Amount = Calculation Amount × Fixed Rate × Day Count Fraction.">
	[calculation]
	inputs:
		interestRatePayout InterestRatePayout (1..1)
		fixedRate number (1..1)
		quantity Quantity (1..1)
		date date (1..1)
		calculationPeriodData CalculationPeriodData (0..1)

	output:
		fixedAmount number (1..1)

	alias calculationAmount:
		quantity -> amount

	alias calculationPeriod:
		if calculationPeriodData exists then calculationPeriodData else CalculationPeriod(interestRatePayout -> calculationPeriodDates, date)

	alias dayCountFraction:
		DayCountFraction(interestRatePayout, interestRatePayout -> dayCountFraction, date, calculationPeriod)

	assign-output fixedAmount:
		calculationAmount * fixedRate * dayCountFraction

func FloatingAmount: <"2006 ISDA Definition Article 6 Section 6.1. Calculation of a Floating Amount: Subject to the provisions of Section 6.4 (Negative Interest Rates), the Floating Amount payable by a party on a Payment Date will be: (a) if Compounding is not specified for the Swap Transaction or that party, an amount calculated on a formula basis for that Payment Date or for the related Calculation Period as follows: Floating Amount = Calculation Amount × Floating Rate + Spread × Floating Rate Day Count Fraction (b) if 'Compounding' is specified to be applicable to the Swap Transaction or that party and 'Flat Compounding' is not specified, an amount equal to the sum of the Compounding Period Amounts for each of the Compounding Periods in the related Calculation Period; or (c) if 'Flat Compounding' is specified to be applicable to the Swap Transaction or that party, an amount equal to the sum of the Basic Compounding Period Amounts for each of the Compounding Periods in the related Calculation Period plus the sum of the Additional Compounding Period Amounts for each such Compounding Period.">
	[calculation]
	inputs:
		interestRatePayout InterestRatePayout (1..1)
		spread number (1..1)
		rate number (1..1)
		quantity Quantity (1..1)
		date date (1..1)
		calculationPeriodData CalculationPeriodData (0..1)

	output:
	    floatingAmount number (1..1)

	alias calculationAmount:
	    quantity -> amount

	alias calculationPeriod:
		if calculationPeriodData exists then calculationPeriodData else CalculationPeriod(interestRatePayout -> calculationPeriodDates, date)

	alias dayCountFraction:
	    DayCountFraction(interestRatePayout, interestRatePayout -> dayCountFraction, date, calculationPeriod)

	assign-output floatingAmount:
	    calculationAmount * (rate + spread) * dayCountFraction

func DayCountFraction: <"A description of inputs and outputs for all day count fraction calculations">
	[calculation]
	inputs:
		interestRatePayout InterestRatePayout (1..1)
		dayCountFractionEnum DayCountFractionEnum (1..1)
		date date (1..1)
		calculationPeriod CalculationPeriodData (1..1)
	output:
		result number (1..1)

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> _1_1): <"2006 ISDA Definition Article 4 section 4.16(a):	if '1/1' is specified, 1;">
	[calculation]
	assign-output result: 1.0

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> ACT_ACT_ISDA): <"'2006 ISDA Definition Article 4 section 4.16(e): if 'Actual/360', 'Act/360' or 'A/360' is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360.">
	[calculation]

	alias daysInLeapYearPeriod: <"The number of days of the period that fall in a leap year.">
		calculationPeriod -> daysInLeapYearPeriod
	alias daysInNonLeapPeriod: <"The difference between the total days in the period and the days in leap year period">
		(calculationPeriod -> daysInPeriod) - (calculationPeriod -> daysInLeapYearPeriod)
	assign-output result:
		(daysInNonLeapPeriod / 365) + (daysInLeapYearPeriod / 366)

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> ACT_ACT_ICMA): <"2006 ISDA Definition Article 4 section 4.16(c):	(c)	if 'Actual/Actual (ICMA)' or 'Act/Act (ICMA)' is specified, a fraction equal to 'number of days accrued/number of days in year', as such terms are used in Rule 251 of the statutes, by-laws, rules and recommendations of the International Capital Market Association (the 'ICMA Rule Book'), calculated in accordance with Rule 251 of the ICMA Rule Book as applied to non US dollar denominated straight and convertible bonds issued after December 31, 1998, as though the interest coupon on a bond were being calculated for a coupon period corresponding to the Calculation Period or Compounding Period in respect of which payment is being made;">
	[calculation]

	alias daysInPeriod: <"Number of calendar in the calculation period">
		calculationPeriod -> daysInPeriod
	alias periodsInYear: <"Number of calculation periods in a year">
		PeriodsInYear(interestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency)
	assign-output result:
		daysInPeriod / (daysInPeriod * periodsInYear)

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> ACT_365_FIXED): <"'2006 ISDA Definition Article 4 section 4.16(d): If 'Actual/365 (Fixed)', 'Act/365 (Fixed)', 'A/365 (Fixed)' or 'A/365F' is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 365. ISDA Definition Article 4 section 4.16(e): if 'Actual/360', 'Act/360' or 'A/360' is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360.">
	[calculation]
	alias daysInPeriod: <"Number of calendar in the calculation period">
		calculationPeriod -> daysInPeriod
	assign-output result:
		daysInPeriod / 365

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> ACT_360): <"'2006 ISDA Definition Article 4 section 4.16(e): if 'Actual/360', 'Act/360' or 'A/360' is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360.">
	[calculation]
	alias daysInPeriod: <"Number of calendar in the calculation period">
		calculationPeriod -> daysInPeriod
	assign-output result:
		daysInPeriod / 360

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> _30_360): <"2006 ISDA Definition Article 4 section 4.16(f): if '30/360', '360/360' or 'Bond Basis' is specified, the number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360, calculated on a formula basis as follows:[[360 x (Y2 - Y1)] + [30 x (M2 - M1)] + (D2 - D1)]/360.">
	[calculation]

	alias startYear: <"The year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
		calculationPeriod -> startDate -> year

	alias endYear: <"The year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
		calculationPeriod -> endDate -> year

	alias startMonth: <"The calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
		calculationPeriod -> startDate -> month

	alias endMonth: <"The calendar month, expressed as number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
		calculationPeriod -> endDate -> month

	alias endDay: <"The calendar day, expressed as a number, immediately following the last day included in the Calculation Period or Compounding Period, unless such number would be 31 and D2, is greater than 29, in which case D2 will be 30">
		if calculationPeriod -> startDate -> day > 29 then Min(calculationPeriod -> endDate -> day, 30) else calculationPeriod -> endDate -> day

	alias startDay: <"The first calendar day, expressed as a number, of the Calculation Period or Compounding Period, unless such number would be 31, in which case, will be 30">
		Min(calculationPeriod -> startDate -> day, 30)
	assign-output result:
		(360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> _30E_360): <"'2006 ISDA Definition Article 4 section 4.16(e): if 'Actual/360', 'Act/360' or 'A/360' is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360.">
	[calculation]

	alias startYear: <"The year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
		calculationPeriod -> startDate -> year

	alias endYear: <"The year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
		calculationPeriod -> endDate -> year

	alias startMonth: <"The calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
		calculationPeriod -> startDate -> month

	alias endMonth: <"The calendar month, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
		calculationPeriod -> endDate -> month

	alias endDay: <"The first calendar day, expressed as a number, of the Calculation Period or Compounding Period, unless such number would be 31, in which case will be 30">
		Min(calculationPeriod -> endDate -> day, 30)

	alias startDay: <"The calendar day, expressed as a number, immediately following the last day included in the Calculation Period or Compounding Period, unless such number would be 31, in which case will be 30">
		Min(calculationPeriod -> startDate -> day, 30)
	assign-output result:
		(360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> _30E_360_ISDA): <"2006 ISDA Definition Article 4 section 4.16(h): if '30E/360 (ISDA)' is specified, the number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360, calculated on a formula basis as follows: [[360 × (Y2 - Y1)]+[30 × (M2 - M1)] +(D2 - D1)]/360 ">
	[calculation]

	alias interestRatePayoutTerminationDate:
		ResolveAdjustableDate (interestRatePayout -> calculationPeriodDates -> terminationDate)

	alias startDateIsInLeapYear:
		IsLeapYear(calculationPeriod -> startDate -> year)

	alias endDateIsInLeapYear:
		IsLeapYear(calculationPeriod -> endDate -> year)

	alias startYear: <"The year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
		calculationPeriod -> startDate -> year

	alias endYear: <"The year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
		calculationPeriod -> endDate -> year

	alias startMonth: <"The calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
		calculationPeriod -> startDate -> month

	alias endMonth: <"The calendar month, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
		calculationPeriod -> endDate -> month

	alias startDay:
		if startDateIsInLeapYear = False and calculationPeriod -> startDate -> month = 2 and calculationPeriod -> startDate -> day = 28
			or startDateIsInLeapYear = True and calculationPeriod -> startDate -> month = 2 and calculationPeriod -> startDate -> day = 29
			or calculationPeriod -> startDate -> day = 31
		then 30 else calculationPeriod -> endDate -> day

	alias endDay:
		if endDateIsInLeapYear = False and calculationPeriod -> endDate -> month = 2 and calculationPeriod -> endDate -> day = 28
			or endDateIsInLeapYear = True and calculationPeriod -> endDate -> month = 2 and calculationPeriod -> endDate -> day = 29
			or calculationPeriod -> endDate -> day = 31
			or calculationPeriod -> endDate = interestRatePayoutTerminationDate
		then 30 else calculationPeriod -> endDate -> day
	assign-output result:
		(360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> ACT_365L): <"The actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 365 (or, if the later Period End Date of the Calculation Period or Compounding Period falls in a leap year, divided by 366). ">
	[calculation]

	alias endDateIsInLeapYear:
		IsLeapYear(calculationPeriod -> endDate -> year)

	alias daysInPeriod: <"The actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made ">
		calculationPeriod -> daysInPeriod

	alias daysInYear: <"365 or, if the later Period End Date of the Calculation Period or Compounding Period falls in a leap year, divided by 366. ">
		if (endDateIsInLeapYear = True) then 366 else 365

	assign-output result:
		daysInPeriod / daysInYear

func ResolveRateIndex: <"The function to specify that the floating rate index enumeration will be expressed as a number once the rate is observed.">
	inputs: index FloatingRateIndexEnum (1..1)
	output: rate number (1..1)

func ResolveEquityPeriodStartPrice: <"Resolves the price from the end of the previous period. If first period, then take the initial price.">
	inputs:
		equityPayout EquityPayout (1..1)
		priceQuantity PriceQuantity (0..*)
		date date (1..1)
	output:
		price Price (1..1)

	alias priceReturnTerms:
		equityPayout -> priceReturnTerms

	alias calculationPeriod:
		CalculationPeriod(equityPayout -> calculationPeriodDates, date)

	assign-output price: <"The initial price is taken from the original contract when Resetting for the first time i.e. when the number of updated contracts is one.">
		if calculationPeriod -> isFirstPeriod
		then ResolveEquityInitialPrice( priceQuantity )
		else priceReturnTerms -> valuationPriceInterim -> price

func ResolveEquityPeriodEndPrice:
	inputs:
		equityPayout EquityPayout (1..1)
		date date (1..1)
	output:
		price number (1..1)

	alias priceReturnTerms:
		equityPayout -> priceReturnTerms

	alias calculationPeriod:
		CalculationPeriod(equityPayout -> calculationPeriodDates, date)

	assign-output price: <"If the last period, take the price from the Valuation Price Final, otherwise from Valuation Price Interim.">
		if calculationPeriod -> isLastPeriod
		then priceReturnTerms -> valuationPriceFinal -> price -> amount
		else priceReturnTerms -> valuationPriceInterim -> price -> amount

func ResolveEquityInitialPrice:
	inputs:
		priceQuantity PriceQuantity (0..*)

	output:
		initialPrice Price (1..1)

func DividendCashSettlementAmount: <"Based on the following legal text: means, in respect of a Dividend Period and the related Dividend Cash Settlement Date, an amount in the Settlement Currency determined by the Calculation Agent for such Dividend Period to which the Dividend Cash Settlement Amount relates, pursuant to the following formula: Dividend Cash Settlement Amount = Record Amount × Number Of Securities.">

	inputs:
		numberOfSecurities number (1..1)
		declaredDividend number (1..1)

	output:
		dividendCashSettlementAmount number (1..1)

	assign-output dividendCashSettlementAmount:
		declaredDividend * numberOfSecurities

func ExtractFixedLeg:
    inputs:
        interestRatePayouts InterestRatePayout (0..*)

    output:
        fixedRatePayout InterestRatePayout (0..1)