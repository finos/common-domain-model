namespace "org.isda.cdm"
version "${project.version}"

func ResolveAdjustableDate:
	inputs: terminationDate AdjustableOrRelativeDate (1..1)
	output: adjustedDate date (1..1)
		
		
func ExtractContractState : <"Extracts a single Contract State, given an Event. This function navigates all the possible paths to product and extracts a single value.">
	inputs: event Event (1..1)
	output: contractState ContractState (1..1)
	alias primitive : event -> primitive 	
	assign-output contractState : 
		if primitive -> contractFormation exists then primitive -> contractFormation -> after
		else if primitive -> reset exists then primitive -> reset -> after

func ExtractQuantity: <"A function that abstracts away the details of how to retrieve quantity from a given product">
	inputs:
		trade Trade (1..1)
	output:
		quantity ContractualQuantity (1..1) 

	 
// TODO: turn these functions into language level operators i.e. '+'
func Plus:
	inputs:
		q1 ContractualQuantity (1..1)
		q2 ContractualQuantity (1..1)
	output:
		result ContractualQuantity (1..1)


// TODO: turn these functions into language level operators i.e. '='
func Equals:
	inputs:
		contractualQuantity ContractualQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)

// TODO: turn these functions into language level operators i.e. '>'
func GreaterThan:
	inputs:
		contractualQuantity ContractualQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)
		
// TODO: turn these functions into language level operators i.e. '>='
func GreaterThanEquals:
	inputs:
		contractualQuantity ContractualQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)

func Sum:
	inputs: quantities Quantity (1..*)
	output: sum Quantity (1..1)

// TODO: turn these functions into language level operators i.e. 'sum', 'abs', '<'
func QuantityEquals:
	inputs:
		q1 Quantity (1..1)
		q2 Quantity (1..1)
		precision number (1..1)
	output:
		result boolean (1..1)
