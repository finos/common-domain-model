namespace "org.isda.cdm"
version "${project.version}"

func ResolveQuantity : <"Function specification to resolve a payout quantity, specified as a resolvable quantity with inputs for the resolution, into a basic quantity with just a number and a unit.">
	inputs:
		resolvableQuantity ResolvablePayoutQuantity (1..1) <"The quantity to resolve.">
		date date (1..1)
	output:
		quantity Quantity (1..1) <"The resolved quantity, containing just a number and (optionally) a unit or currency.">


func ResolvePrice: <"Function specification to return the price on a valuation date based on an EquityValuation method. Implementor of this function should make use of the observation primitive and fetch the price based on an observation key.">
	inputs: 
		equityValuation EquityValuation (1..1)
		date date (1..1)
		
	output:	
		price number  (1..1)
		
		
func ResolveAdjustableDate:
	inputs: terminationDate AdjustableOrRelativeDate (1..1)
	output: adjustedDate date (1..1)
		
		
func ExtractContractState : <"Extracts a single Contract State, given an Event. This function navigates all the possible paths to product and extracts a single value.">
	inputs: event Event (1..1)
	output: contractState ContractState (1..1)
	alias primitive : event -> primitive 	
	assign-output contractState : 
		if primitive -> contractFormation exists then primitive -> contractFormation -> after only-element
		else if primitive -> reset exists then primitive -> reset  only-element -> after

func ExtractQuantity: <"A function that abstracts away the details of how to retrieve quantity from a given product">
	inputs:
		trade Trade (1..1)
	output:
		quantity ContractualQuantity (1..1) 

func ToDateTime:
	inputs: date date (1..1)
	output: datetime zonedDateTime (1..1)
	 
// TODO: turn these functions into language level operators i.e. '+'
func Plus:
	inputs:
		q1 ContractualQuantity (1..1)
		q2 ContractualQuantity (1..1)
	output:
		result ContractualQuantity (1..1)


// TODO: turn these functions into language level operators i.e. '='
func Equals:
	inputs:
		contractualQuantity ContractualQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)

// TODO: turn these functions into language level operators i.e. '>'
func GreaterThan:
	inputs:
		contractualQuantity ContractualQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)
		
// TODO: turn these functions into language level operators i.e. '>='
func GreaterThanEquals:
	inputs:
		contractualQuantity ContractualQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)

func Sum:
	inputs: quantities Quantity (1..*)
	output: sum Quantity (1..1)

// TODO: turn these functions into language level operators i.e. 'sum', 'abs', '<'
func QuantityEquals:
	inputs:
		q1 Quantity (1..1)
		q2 Quantity (1..1)
		precision number (1..1)
	output:
		result boolean (1..1)

func ExtractQuantityByNotation:
	inputs:
		quantities QuantityNotation (1..*)
		notation QuantityNotationEnum (1..1)
	output:
		quantity QuantityNotation (1..1)