namespace "org.isda.cdm"
version "${project.version}"

func ResolveContractualProduct: <"For a given ContractualProduct, the function finds all ResolvablePayoutQuantity instances, then for each instance, resolves the quantity, populates the quantity attribute on ResolvablePayoutQuantity, and finally returns the updated ContractualProduct.">
	inputs:
		contractualProduct ContractualProduct (1..1) <"The ContractualProduct to be resolved.">
		quantityNotations QuantityNotation (1..*) <"All QuantityNotations associated with the given ContractualProduct, that will be resolved based on their AssetIdentifier.">
		
	output:
		resolvedContractualProduct ContractualProduct (1..1) <"The updated ContractualProduct with all ResolvablePayoutQuantity instances resolved and updated with the corresponding quantity.">


func ResolvePayoutQuantity: <"For a given ResolvablePayoutQuantity, the function resolves and returns the corresponding quantity from the QuantityNotations by matching on AssetIdentifier.">
	inputs:
		resolvableQuantity ResolvablePayoutQuantity (1..1) <"The ResolvablePayoutQuantity to resolve.">
		quantityNotations QuantityNotation (1..*) <"All QuantityNotations associated with the given ContractualProduct, that will be resolved based on their AssetIdentifier.">
		contractualProduct ContractualProduct (1..1) <"Provided to allow any references to be resolved.">
	
	output:
		resolvedQuantity NonNegativeQuantity (1..1) <"The resolved NonNegativeQuantity.">


func ResolveQuantity: <"Function specification to resolve a payout quantity, specified as a resolvable quantity with inputs for the resolution, into a basic quantity with just a number and a unit.">
	inputs:
		resolvableQuantity ResolvablePayoutQuantity (1..1) <"The quantity to resolve.">
		date date (1..1)
	output:
		quantity Quantity (1..1) <"The resolved quantity, containing just a number and (optionally) a unit or currency.">


func ResolvePrice: <"Function specification to return the price on a valuation date based on an EquityValuation method. Implementor of this function should make use of the observation primitive and fetch the price based on an observation key.">
	// TODO Never referenced in CDM
	inputs:
		equityValuation EquityValuation (1..1)
		date date (1..1)

	output:
		price number  (1..1)


func ResolveAdjustableDate:
	inputs: terminationDate AdjustableOrRelativeDate (1..1)
	output: adjustedDate date (1..1)

func ExtractContractState: <"Extracts a single Contract State, given an Event. This function navigates all the possible paths to product and extracts a single value.">
	inputs: event WorkflowStep (1..1)
	output: contractState ContractState (1..1)
	alias primitive: event -> businessEvent -> primitives  only-element
	assign-output contractState:
		if primitive -> contractFormation exists then primitive -> contractFormation -> after
		else if primitive -> reset exists then primitive -> reset -> after

func ExtractQuantity: <"A function that abstracts away the details of how to retrieve quantity from a given product">
	inputs:
		trade Trade (1..1)
	output:
		quantity ExecutionQuantity (1..1)

func ToDateTime:
	inputs: date date (1..1)
	output: datetime zonedDateTime (1..1)

// TODO: turn these functions into language level operators i.e. '+'
func Plus:
	inputs:
		q1 ExecutionQuantity (1..1)
		q2 ExecutionQuantity (1..1)
	output:
		result ExecutionQuantity (1..1)


// TODO: turn these functions into language level operators i.e. '='
func Equals:
	// TODO Never referenced in CDM
	inputs:
		contractualQuantity ExecutionQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)

// TODO: turn these functions into language level operators i.e. '>'
func GreaterThan:
	inputs:
		contractualQuantity ExecutionQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)

// TODO: turn these functions into language level operators i.e. '>='
func GreaterThanEquals:
	// TODO Never referenced in CDM
	inputs:
		contractualQuantity ExecutionQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)

func Sum:
	// TODO Never referenced in CDM
	inputs: quantities Quantity (1..*)
	output: sum Quantity (1..1)

// TODO: turn these functions into language level operators i.e. 'sum', 'abs', '<'
func QuantityEquals:
// TODO Never referenced in CDM
	inputs:
		q1 Quantity (1..1)
		q2 Quantity (1..1)
		precision number (1..1)
	output:
		result boolean (1..1)

func ExtractQuantityByAsset:
	inputs:
		quantities QuantityNotation (1..*)
		asset AssetIdentifier (1..1)
	output:
		quantity QuantityNotation (1..1)
		
func ExtractQuantityByCurrency:
	inputs:
		quantities QuantityNotation (1..*)
		currency string (1..1)
	output:
		quantity QuantityNotation (1..1)
		
