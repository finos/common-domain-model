namespace org.isda.cdm
version "${project.version}"

import cdm.base.maths.*
import cdm.base.staticdata.asset.commons.*

func PriceQuantityTriangulation:
	inputs:
		priceNotation PriceNotation (0..*)
		quantityNotation QuantityNotation (0..*)

	output:
		success boolean (1..1)

	assign-output success:
		if priceNotation -> price -> cashPrice exists
		then CashPriceQuantityNoOfUnitsTriangulation( priceNotation, quantityNotation )
		else if priceNotation -> price -> exchangeRate exists
		then ExchangeRateQuantityTriangulation( priceNotation, quantityNotation )
		else True

func CashPriceQuantityNoOfUnitsTriangulation: <"Data rule to check the relationship between cash price, notional and number of units.">
	inputs:
		priceNotation PriceNotation (0..*)
		quantityNotation QuantityNotation (0..*)

	output:
		success boolean (1..1)

	alias notional:
		Notional( quantityNotation, empty )

	alias noOfUnits:
		NoOfUnits( quantityNotation )

	alias cashPrices:
		priceNotation -> price -> cashPrice -> netPrice -> amount
		
	alias cashPrice:
		cashPrices only-element

	assign-output success:
		if ( cashPrice and noOfUnits and notional ) exists
		then cashPrice * noOfUnits = notional


func ExchangeRateQuantityTriangulation:
	inputs:
		priceNotation PriceNotation (0..*)
		quantityNotation QuantityNotation (0..*)

	output:
		success boolean (1..1)

	alias exchangeRates:
		priceNotation -> price -> exchangeRate

	alias exchangeRate:
		exchangeRates only-element

	alias rate:
		if exchangeRate -> rate exists
		then exchangeRate -> rate
		else exchangeRate -> spotRate

	alias quotedCurrency:
		exchangeRate -> quotedCurrencyPair

	alias quantity1:
		Notional( quantityNotation, quotedCurrency -> currency1 )

	alias quantity2:
		Notional( quantityNotation, quotedCurrency -> currency2 )

	assign-output success:
		if ( quantity1 and quantity2 and rate ) exists
		then
			if quotedCurrency -> quoteBasis = QuoteBasisEnum -> Currency1PerCurrency2
			then quantity1 / quantity2 = rate
			else if quotedCurrency -> quoteBasis = QuoteBasisEnum -> Currency2PerCurrency1
			then quantity2 / quantity1 = rate


func NoOfUnits: <"Get quantity associated with product identifier.">
	inputs:
		quantityNotations QuantityNotation (0..*)

	output:
		noOfUnits number (1..1)


func Notional: <"Get quantity associated with currency.">
	inputs:
		quantityNotations QuantityNotation (0..*)
		currency string (0..1)

	output:
		notional number (1..1)


func ResolveContractualProduct: <"For a given ContractualProduct, the function finds all ResolvablePayoutQuantity instances, then for each instance, resolves the quantity, populates the quantity attribute on ResolvablePayoutQuantity, and finally returns the updated ContractualProduct.">
	inputs:
		contractualProduct ContractualProduct (1..1) <"The ContractualProduct to be resolved.">
		quantityNotations QuantityNotation (1..*) <"All QuantityNotations associated with the given ContractualProduct, that will be resolved based on their AssetIdentifier.">
		
	output:
		resolvedContractualProduct ContractualProduct (1..1) <"The updated ContractualProduct with all ResolvablePayoutQuantity instances resolved and updated with the corresponding quantity.">


func ResolvePayoutQuantity: <"For a given ResolvablePayoutQuantity, the function resolves and returns the corresponding quantity from the QuantityNotations by matching on AssetIdentifier.">
	inputs:
		resolvableQuantity ResolvablePayoutQuantity (1..1) <"The ResolvablePayoutQuantity to resolve.">
		quantityNotations QuantityNotation (1..*) <"All QuantityNotations associated with the given ContractualProduct, that will be resolved based on their AssetIdentifier.">
		contractualProduct ContractualProduct (1..1) <"Provided to allow any references to be resolved.">
	
	output:
		resolvedQuantity NonNegativeQuantity (1..1) <"The resolved NonNegativeQuantity.">


func ResolveQuantity: <"Function specification to resolve a payout quantity, specified as a resolvable quantity with inputs for the resolution, into a basic quantity with just a number and a unit.">
	inputs:
		resolvableQuantity ResolvablePayoutQuantity (1..1) <"The quantity to resolve.">
		date date (1..1)
	output:
		quantity Quantity (1..1) <"The resolved quantity, containing just a number and (optionally) a unit or currency.">


func ResolvePrice: <"Function specification to return the price on a valuation date based on an EquityValuation method. Implementor of this function should make use of the observation primitive and fetch the price based on an observation key.">
	// TODO Never referenced in CDM
	inputs:
		equityValuation EquityValuation (1..1)
		date date (1..1)

	output:
		price number  (1..1)

func ExtractContractState: <"Extracts a single Contract State, given an Event. This function navigates all the possible paths to product and extracts a single value.">
	inputs: event BusinessEvent (1..1)
	output: contractState ContractState (1..1)
	alias primitive: event -> primitives  only-element
	assign-output contractState:
		if primitive -> contractFormation exists then primitive -> contractFormation -> after
		else if primitive -> reset exists then primitive -> reset -> after

func ExtractQuantity: <"A function that abstracts away the details of how to retrieve quantity from a given product">
	inputs:
		trade Trade (1..1)
	output:
		quantity QuantityNotation (1..1) // TODO: add support for returning lists

// TODO: turn these functions into language level operators i.e. '+'
func Plus:
	inputs:
		q1 QuantityNotation (1..1)
		q2 QuantityNotation (1..1)
	output:
		result QuantityNotation (1..1)

// TODO: turn these functions into language level operators i.e. '='
func Equals:
	// TODO Never referenced in CDM
	inputs:
		quantity QuantityNotation (1..*)
		scalar number (1..1)
	output:
		result boolean (1..1)

// TODO: turn these functions into language level operators i.e. '>'
func GreaterThan:
	inputs:
		quantity QuantityNotation (1..*)
		scalar number (1..1)
	output:
		result boolean (1..1)

// TODO: turn these functions into language level operators i.e. '>='
func GreaterThanEquals:
	// TODO Never referenced in CDM
	inputs:
		quantity QuantityNotation (1..*)
		scalar number (1..1)
	output:
		result boolean (1..1)



func ExtractQuantityByAsset:
	inputs:
		quantities QuantityNotation (1..*)
		asset AssetIdentifier (1..1)
	output:
		quantity QuantityNotation (1..1)
		
func ExtractQuantityByCurrency:
	inputs:
		quantities QuantityNotation (1..*)
		currency string (1..1)
	output:
		quantity QuantityNotation (1..1)

