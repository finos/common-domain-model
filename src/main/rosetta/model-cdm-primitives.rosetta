namespace "org.isda.cdm"
version "${project.version}"

type PrimitiveEvent: <"A type to specify the one and only one of the elemental/primitives components that are used to specify lifecycle events. Lifecycle events make use of one or several of those elemental components specified as part of this class.">
	execution ExecutionPrimitive (0..1)
		[synonym Rosetta_Workbench, DTCC_11_0, DTCC_9_0, CME_ClearedConfirm_1_17, CME_SubmissionIRS_1_0, FpML_5_10 value "ignore"]
	contractFormation ContractFormationPrimitive (0..1)
		[synonym Rosetta_Workbench, DTCC_11_0, DTCC_9_0, CME_ClearedConfirm_1_17, CME_SubmissionIRS_1_0, FpML_5_10 value "ignore"]
	allocation AllocationPrimitive (0..1)
		[synonym Rosetta_Workbench value "allocation" path "primitive"]
		[synonym DTCC_11_0, DTCC_9_0, CME_ClearedConfirm_1_17, CME_SubmissionIRS_1_0 value "ignore"]
	exercise ExercisePrimitive (0..1)
		[synonym Rosetta_Workbench value "exercise" path "primitive"]
		[synonym DTCC_11_0, DTCC_9_0, CME_ClearedConfirm_1_17, CME_SubmissionIRS_1_0 value "ignore"]
	inception InceptionPrimitive (0..1)
		[synonym Rosetta_Workbench value "inception" path "primitive"]
		[synonym CME_SubmissionIRS_1_0 value "ignore"]
	observation ObservationPrimitive (0..1)
		[synonym Rosetta_Workbench value "observation" path "primitive"]
		[synonym CME_ClearedConfirm_1_17, CME_SubmissionIRS_1_0 value "ignore"]
	quantityChange QuantityChangePrimitive (0..1)
		[synonym Rosetta_Workbench value "quantityChange" path "primitive"]
		[synonym DTCC_11_0, DTCC_9_0, CME_ClearedConfirm_1_17, CME_SubmissionIRS_1_0 value "ignore"]
	reset ResetPrimitive (0..1)
		[synonym Rosetta_Workbench value "reset" path "primitive"]
		[synonym DTCC_11_0, DTCC_9_0, CME_ClearedConfirm_1_17, CME_SubmissionIRS_1_0 value "ignore"]
	termsChange TermsChangePrimitive (0..1)
		[synonym Rosetta_Workbench value "termsChange" path "primitive"]
		[synonym DTCC_11_0, DTCC_9_0, CME_ClearedConfirm_1_17 value "ignore"]
	transfer TransferPrimitive (0..1)
		[synonym Rosetta_Workbench value "transfer" path "primitive"]
		[synonym CME_ClearedConfirm_1_17, CME_SubmissionIRS_1_0 value "ignore"]
		[synonym DTCC_11_0, DTCC_9_0 value "Payment" path "Body->OTC_Matching"]
	condition PrimitiveEvent: one-of

type ExecutionPrimitive: <"Specification of the primitive event for an execution, with 'after' state being an ExecutionState and the 'before' state being Null. It is expected that the 'before' state will be adjusted or deprecated once the CDM scope is extended to the pre-execution space.">
	before ExecutionState (0..0) <"The 0 cardinality reflects the fact that there is no execution in the before state of an execution primitive. As noted in the definition associated with the class, this is expected to change once the CDM scope is extended to the pre-execution space.">
		[synonym Rosetta_Workbench value "before"]
	after ExecutionState (1..1) <"The after state corresponds to the execution between the parties. In the case of an execution on a contractual product, some additional characteristics may need to be specified to get a fully-formed contract, for instance when the executing party acts as an agent, as is the case in an allocation scenario. This is the purpose of the 'ContractFormation' primitive event.">
		[synonym Rosetta_Workbench value "after"]

type ContractFormationPrimitive: <"Specification of the primitive event for the formation of a contract, with 'before' state being an 'ExecutionState' and 'after' state being a 'PostInceptionState'. This primitive combined with the 'ExecutionPrimitive' supersedes the earlier 'Inception' primitive, which had both the the execution and the contract formation bundled together, and as such was only applicable to contractual products. This intends to provide for properly atomic primitives.">
	before ExecutionState (1..1) <"The before state corresponds to the output of an execution between the parties.">
		[synonym Rosetta_Workbench value "before"]
	after PostInceptionState (1..1) <"The after state corresponds to the new contract being formed between the parties, plus some additional trade workflow information.">
		[synonym Rosetta_Workbench value "after"]

type AllocationPrimitive: <"The primitive event to represent a split/allocation of a trade. As part of this primitive event the type of trade, either an execution or a contract, does not get altered. In the case of an execution, the further transformation of each split execution into a contract will be the purpose of the ContractFormation primitive.">
	before Trade (1..1) <"The trade before allocation, which is either an execution if allocation happens before the contract is formed, or an already formed contract.">
		[synonym Rosetta_Workbench value "before"]
	after AllocationOutcome (1..1) <"Outcome of the allocation as a list of Trades, which is either a split execution or a split contract, plus a pointer to the previous execution or contract marked as 'Allocated'.">
		[synonym Rosetta_Workbench value "after"]

	// TODO: move these data rule as a "post-condition" to the Allocation "Function Spec"
	condition AllocationPrimitive_executionType: <"If the trade type pre-allocation is an execution, then the trade type post-allocation must also be an execution.">
		if AllocationPrimitive exists and AllocationPrimitive -> before -> execution exists
		then AllocationPrimitive -> after -> originalTrade -> execution exists
			and AllocationPrimitive -> after -> allocatedTrade -> execution exists
			and AllocationPrimitive -> after -> allocatedTrade -> contract is absent
	condition AllocationPrimitive_contractType: <"If the trade type pre-allocation is a contract, then the trade type post-allocation must also be a contract.">
		if AllocationPrimitive exists and AllocationPrimitive -> before -> contract exists
		then AllocationPrimitive -> after -> originalTrade -> contract exists
			and AllocationPrimitive -> after -> allocatedTrade -> contract exists
			and AllocationPrimitive -> after -> allocatedTrade -> execution is absent

type ExercisePrimitive: <"This primitive leverages the FpML OptionExercise construct, except for the exerciseTiming which is deemed as associated to a request for exercise that is meant to take place, as opposed to the actual exercise event.">
	exerciseDate AdjustableOrAdjustedDate (0..1)
		[synonym Rosetta_Workbench value "exerciseDate"]
	exerciseTime BusinessCenterTime (0..1)
		[synonym Rosetta_Workbench value "exerciseTime"]
	fullExercise boolean (1..1)
		[synonym Rosetta_Workbench value "fullExercise"]
	before ContractState (1..1)
		[synonym Rosetta_Workbench value "before"]
	after ExerciseOutcome (1..1)
		[synonym Rosetta_Workbench value "after"]


// TODO: deprecate that class, now superseded by a combination of 'ExecutionPrimitive' and 'ContractFormation'
type InceptionPrimitive: <"The primitive event for the inception of a new contract between parties. It is expected that this primitive will be adjusted or deprecated once the CDM scope is extended to the pre-execution space.">
	before ContractState (0..0) <"The (0..0) cardinality reflects the fact that there is no contract in the before state of an inception primitive. As noted in the definition associated with the class, this is expected to change once the CDM scope is extended to the pre-execution space.">
		[synonym Rosetta_Workbench value "before"]
	after PostInceptionState (1..1) <"The after state corresponds to the new contract between the parties.">
		[synonym Rosetta_Workbench value "after"]
		[synonym DTCC_11_0 value "OTC_RM" path "Header", "OTC_Matching" path "Body" set when "Header->OTC_RM->Manifest->TradeMsg->TransType" = "Trade"]
		[synonym DTCC_9_0 value "OTC_Matching" path "Body" set when "Header->OTC_RM->Manifest->TradeMsg->TransType" = "Trade"]
		[synonym CME_ClearedConfirm_1_17 value "clearingConfirmed"]

type ObservationPrimitive: <"A class to specify the primitive object to specify market observation events, which is applicable across all asset classes.">
	source ObservationSource (1..1) <"The observation source, such as an interest rate curve or an information provider.">
		[synonym Rosetta_Workbench value "source"]
	observation number (1..1) <"The observed value.">
		[synonym Rosetta_Workbench value "observation"]
	date date (1..1) <"The observation date.">
		[synonym Rosetta_Workbench value "date"]
		[synonym DTCC_11_0, DTCC_9_0 value "observationDate"]
	time TimeZone (0..1) <"The observation time.">
		[synonym Rosetta_Workbench value "time"]
	side QuotationSideEnum (0..1) <"The side (bid/mid/ask) of the observation, when applicable.">
		[synonym Rosetta_Workbench value "side"]

type QuantityChangePrimitive: <"The primitive event to represent a change in quantity or notional.">
	before Trade (1..1) <"The state of the trade (either an execution or a contract, before the event.">
		[synonym Rosetta_Workbench value "before"]
	after Trade (1..1) <"The state of the trade (either an execution or a contract, as a follow-up from the event.">
		[synonym Rosetta_Workbench value "after"]

type ResetPrimitive: <"The primitive event to represent a reset.">
	before ContractState (1..1) <"Contract state before the reset, as per previous events processed on the contract.">
		[synonym Rosetta_Workbench value "ignore"]
	after ContractState (1..1) <"Contract state after the reset, that embeds the reset value as an updated field on the contract state.">
		[synonym Rosetta_Workbench value "ignore"]
	condition ResetPrimitive_contract: <"The original contract in the before/after state of a reset should match.">
		if ResetPrimitive exists
		then ResetPrimitive -> before -> contract = ResetPrimitive -> after -> contract

type TermsChangePrimitive: <"The primitive event to represent change(s) to the contractual terms and the clearing submission and acceptance process.">
	before Trade (1..1)
		[synonym Rosetta_Workbench value "before"]
		[synonym CME_SubmissionIRS_1_0 value "ignore"]
	after Trade (1..1)
		[synonym Rosetta_Workbench value "after"]

type TransferPrimitive: <"A class to specify the transfer of assets between parties, those assets being either cash, securities or physical assets. This class combines components that are cross-assets (settlement date, settlement type, status, ...) and some other which are specialized by asset class (e.g. the payer/receiver amount and cashflow type for a cash transfer, the transferor/transferee, security indication, quantity, and asset transfer type qualification for the case of a security). The associated rosettaKey denotes the ability to associate a hash value to the respective Execution instantiations for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.">
	[metadata key]
	identifier string (0..1) <"The identifier which might be associated with the transfer.">
		[metadata scheme]
		[synonym DTCC_11_0, DTCC_9_0 value "tradeCashflowsId" path "FpML" meta tradeCashflowsIdScheme]
	settlementType TransferSettlementEnum (0..1) <"The qualification as to how the transfer will settle, e.g. a DvP settlement.">
		[synonym Rosetta_Workbench value "transferType"]
		[synonym DTCC_11_0, DTCC_9_0 value "SettlementType" path "PaymentDetails"]
	settlementDate AdjustableOrAdjustedOrRelativeDate (1..1)
		[synonym Rosetta_Workbench value "settlementDate"]
	cashTransfer CashTransferComponent (0..*) <"The cash transfer component of the transfer. In the case where several currencies are involved in the transfer, several components should be used, as the component supports one single currency amount.">
		[synonym Rosetta_Workbench value "cashTransfer"]
		[synonym DTCC_11_0, DTCC_9_0 value "payment" path "FpML"]
	securityTransfer SecurityTransferComponent (0..*) <"The security transfer component of the transfer. In the case where several securities are involved in the transfer, several components should be used, as the component supports one single security.">
		[synonym Rosetta_Workbench value "securityTransfer"]
	commodityTransfer CommodityTransferComponent (0..*)
	status TransferStatusEnum (0..1) <"The transfer status, e.g. Instructed, Settled, ...">
		[synonym Rosetta_Workbench value "status"]
	settlementReference string (0..1) <"The settlement reference, when applicable.">
		[synonym Rosetta_Workbench value "settlementReference"]

