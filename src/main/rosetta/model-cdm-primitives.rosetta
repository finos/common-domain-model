namespace org.isda.cdm
version "${project.version}"

import cdm.base.*
import cdm.base.datetime.*
import cdm.base.math.*
import cdm.synonyms.config.*

type PrimitiveEvent: <"A primitive event is defined by one and only one atomic change in state of a trade. An example of this is a contract formation where the legal terms of the contact are added to the trade. A Primitive event contains a before and after state where the before is a reference to another after state of a primitive event in order to preserve lineage.">
	execution ExecutionPrimitive (0..1)
		[synonym Workflow_Event value "executionPrimitive" path "primitive"]
		
	contractFormation ContractFormationPrimitive (0..1)
		[synonym Workflow_Event value "contractFormation" path "primitive"]
		
	split SplitPrimitive (0..1)
		[synonym Workflow_Event value "split" path "primitive"]
		
	exercise ExercisePrimitive (0..1)
		[synonym Workflow_Event value "exercise" path "primitive"]
		
	observation ObservationPrimitive (0..1)
		[synonym Workflow_Event value "observation" path "primitive"]
		
	quantityChange QuantityChangePrimitive (0..1)
		[synonym Workflow_Event value "quantityChange" path "primitive"]
		
	reset ResetPrimitive (0..1)
		[synonym Workflow_Event value "reset" path "primitive"]
		
	termsChange TermsChangePrimitive (0..1) 
		[synonym Workflow_Event value "termsChange" path "primitive"]
		
	transfer TransferPrimitive (0..1)
		[synonym Workflow_Event value "transfer" path "primitive"]
		
		
	condition PrimitiveEvent: one-of

type ExecutionPrimitive: <"Specification of the primitive event for an execution, with 'after' state being an ExecutionState and the 'before' state being Null. It is expected that the 'before' state will be adjusted or deprecated once the CDM scope is extended to the pre-execution space.">
	before ExecutionState (0..0) <"The 0 cardinality reflects the fact that there is no execution in the before state of an execution primitive. As noted in the definition associated with the class, this is expected to change once the CDM scope is extended to the pre-execution space.">
		[metadata reference]
		[synonym Workflow_Event value "before"]
	after ExecutionState (1..1) <"The after state corresponds to the execution between the parties. In the case of an execution on a contractual product, some additional characteristics may need to be specified to get a fully-formed contract, for instance when the executing party acts as an agent, as is the case in an allocation scenario. This is the purpose of the 'ContractFormation' primitive event.">
		[synonym Workflow_Event value "after"]

type ContractFormationPrimitive: <"Specification of a primitive event that represents an executed trade for a contractual product that has been affirmed (or confirmed) by the two parties.  The optional 'before' state is an 'ExecutionState' consisting of an ExecutionPrimitive.  The 'after' state is a 'PostContractFormationState' that includes a Contract in which there is an optional reference to a RelatedAgreeemnt, such as a Master Agreement.  If an ‘after’ and ‘before’ both exist, then they must have the same TradableProduct values.">
	before ExecutionState (0..1) <"The before state corresponds to the output of an execution between the parties.">
		[metadata reference]
		[synonym Workflow_Event value "before"]
	after PostContractFormationState (1..1) <"The after state corresponds to the new contract being formed between the parties, plus some additional trade workflow information.">
		[synonym Workflow_Event value "after"]
		
	// TODO enable condition once party has been refactored out of product
//	condition: <"The product should be unchanged.">
//		before -> execution -> tradableProduct -> product = after -> contract -> tradableProduct -> product

	condition: <"The quantity should be unchanged.">
		if before exists then before -> execution -> tradableProduct -> quantityNotation = after -> contract -> tradableProduct -> quantityNotation
	
	condition: <"The price should be unchanged.">
		if before exists then before -> execution -> tradableProduct -> priceNotation = after -> contract -> tradableProduct -> priceNotation


type SplitPrimitive: <"The primitive event to represent a split/allocation of a trade. As part of this primitive event the type of trade, either an execution or a contract, does not get altered. In the case of an execution, the further transformation of each split execution into a contract will be the purpose of the ContractFormation primitive.">
	before Trade (1..1) <"The trade before split, which is either an execution if split happens before the contract is formed, or an already formed contract.">
		[metadata reference]
		[synonym Workflow_Event value "before"]
	after SplitOutcome (1..1) <"Outcome of the split as a list of Trades, which is either a split execution or a split contract, plus a pointer to the previous execution or contract marked as 'Split'.">
		[synonym Workflow_Event value "after"]

	condition: <"If the pre-split trade is an execution, then the post-split trade must also be an execution.">
		if before -> execution exists
		then after -> originalTrade -> execution exists
			and after -> splitTrades -> execution exists
			and after -> splitTrades -> contract is absent
	
	condition: <"If the pre-split trade is a contract, then the post-split trade must also be a contract.">
		if before -> contract exists
		then after -> originalTrade -> contract exists
			and after -> splitTrades -> contract exists
			and after -> splitTrades -> execution is absent

	condition: <"The product should be unchanged.">
		if before -> execution exists
		then after -> splitTrades -> execution -> tradableProduct -> product = before -> execution -> tradableProduct -> product
	
	condition:  <"The product should be unchanged.">
		if before -> contract exists
		then after -> splitTrades -> contract -> tradableProduct -> product = before -> contract -> tradableProduct -> product
	
	condition: <"The post-split quantities should sum to the pre-split quantity.">
		if before -> execution exists
		then Sum( after -> splitTrades -> execution -> tradableProduct -> quantityNotation -> quantity -> amount ) = before -> execution -> tradableProduct -> quantityNotation -> quantity -> amount
	
	condition:  <"The post-split quantities should sum to the pre-split quantity.">
		if before -> contract exists
		then Sum( after -> splitTrades -> contract -> tradableProduct -> quantityNotation -> quantity -> amount ) = before -> contract -> tradableProduct -> quantityNotation -> quantity -> amount
	
	// TODO add syntax to handle comparison between list and single item.  https://github.com/REGnosys/rosetta-dsl/issues/167
	condition: <"The price should be unchanged.">
		if before -> execution exists
		then after -> splitTrades -> execution -> tradableProduct -> priceNotation = before -> execution -> tradableProduct -> priceNotation
	
	condition:  <"The price should be unchanged.">
		if before -> contract exists
		then after -> splitTrades -> contract -> tradableProduct -> priceNotation = before -> contract -> tradableProduct -> priceNotation
	
type ExercisePrimitive: <"This primitive leverages the FpML OptionExercise construct, except for the exerciseTiming which is deemed as associated to a request for exercise that is meant to take place, as opposed to the actual exercise event.">
	exerciseDate AdjustableOrAdjustedDate (0..1)
		[synonym Workflow_Event value "exerciseDate"]
	exerciseTime BusinessCenterTime (0..1)
		[synonym Workflow_Event value "exerciseTime"]
	fullExercise boolean (1..1)
		[synonym Workflow_Event value "fullExercise"]
	before ContractState (1..1)
		[metadata reference]
		[synonym Workflow_Event value "before"]
	after ExerciseOutcome (1..1)
		[synonym Workflow_Event value "after"]

type ObservationPrimitive: <"A class to specify the primitive object to specify market observation events, which is applicable across all asset classes.">
	source ObservationSource (1..1) <"The observation source, such as an interest rate curve or an information provider.">
		[synonym Workflow_Event value "source"]
	observation number (1..1) <"The observed value.">
		[synonym Workflow_Event value "observation"]
	date date (1..1) <"The observation date.">
		[synonym Workflow_Event value "date"]
		
	time TimeZone (0..1) <"The observation time.">
		[synonym Workflow_Event value "time"]
	side QuotationSideEnum (0..1) <"The side (bid/mid/ask) of the observation, when applicable.">
		[synonym Workflow_Event value "side"]

type QuantityChangePrimitive: <"The primitive event to represent a change in quantity or notional.">
	before Trade (1..1) <"The state of the trade (either an execution or a contract, before the event.">
		[metadata reference]
		[synonym Workflow_Event value "before"]
	after Trade (1..1) <"The state of the trade (either an execution or a contract, as a follow-up from the event.">
		[synonym Workflow_Event value "after"]

type ResetPrimitive: <"The primitive event to represent a reset.">
	before ContractState (1..1) <"Contract state before the reset, as per previous events processed on the contract.">
		[metadata reference]
		[synonym Workflow_Event value "ignore"]
	after ContractState (1..1) <"Contract state after the reset, that embeds the reset value as an updated field on the contract state.">
		[synonym Workflow_Event value "ignore"]
	condition Contract: <"The original contract in the before/after state of a reset should match.">
		if ResetPrimitive exists
		then before -> contract = after -> contract

type TermsChangePrimitive: <"The primitive event to represent change(s) to the contractual terms and the clearing submission and acceptance process.">
	before Trade (1..1)
		[metadata reference]
		[synonym Workflow_Event value "before"]
		
	after Trade (1..1)
		[synonym Workflow_Event value "after"]

type TransferPrimitive: <"A class to specify the transfer of assets between parties, those assets being either cash, securities or physical assets. This class combines components that are cross-assets (settlement date, settlement type, status, ...) and some other which are specialized by asset class (e.g. the payer/receiver amount and cashflow type for a cash transfer, the transferor/transferee, security indication, quantity, and asset transfer type qualification for the case of a security). The associated globalKey denotes the ability to associate a hash value to the respective Execution instantiations for the purpose of model cross-referencing, in support of functionality such as the event effect and the lineage.">
	[metadata key]
	identifier string (0..1) <"The identifier which might be associated with the transfer.">
		[metadata scheme]
		
	settlementType TransferSettlementEnum (0..1) <"The qualification as to how the transfer will settle, e.g. a DvP settlement.">
		[synonym Workflow_Event value "transferType"]
		
	settlementDate AdjustableOrAdjustedOrRelativeDate (1..1)
		[synonym Workflow_Event value "settlementDate"]
	cashTransfer CashTransferComponent (0..*) <"The cash transfer component of the transfer. In the case where several currencies are involved in the transfer, several components should be used, as the component supports one single currency amount.">
		[synonym Workflow_Event value "cashTransfer"]
		
	securityTransfer SecurityTransferComponent (0..*) <"The security transfer component of the transfer. In the case where several securities are involved in the transfer, several components should be used, as the component supports one single security.">
		[synonym Workflow_Event value "securityTransfer"]
	commodityTransfer CommodityTransferComponent (0..*)
	status TransferStatusEnum (0..1) <"The transfer status, e.g. Instructed, Settled, ...">
		[synonym Workflow_Event value "status"]
	settlementReference string (0..1) <"The settlement reference, when applicable.">
		[synonym Workflow_Event value "settlementReference"]

