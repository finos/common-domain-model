Rosetta versionNumber "0.0.1"
FIX versionNumber "5.0 SP3"
FpML versionNumber "5.10"

/*
 * PRODUCT COMPOSITE APPROACH
 * The product is dynamically inferred from the economic terms, based upon a set of definitions that are associated to the model
 * As part of it, we are looking to converge the data presentation of IRD and CDS products, while still making use of the FpML building blocks
 */
 
class Contract <"A class to specify a contract object, which can be invoked either within the context of an event, or independently from it. It corresponds to the FpML Trade, although restricted to execution and post-execution contexts. Attributes also applicable to pre-execution (a.k.a. pre-trade view in FpML) contexts have been positioned as part of the ContractualProduct class.">
	[synonym FpML value Trade]
{
	contractIdentifier PartyTradeIdentifier (1..*) <"The contract reference identifier(s) allocated by the parties involved in the contract.">;
		[synonym FpML value partyTradeIdentifier pathExpression "trade.tradeHeader"] 
	tradeDate date (1..1) <"The trade date. This is the date the trade was originally executed. In the case of a novation, the novated part of the trade should be reported (by both the remaining party and the transferee) using a trade date corresponding to the date the novation was agreed. The remaining part of a trade should be reported (by both the transferor and the remaining party) using a trade date corresponding to the original execution date.">;
		[synonym FpML value tradeDate pathExpression "trade.tradeHeader"]
	clearedDate date (0..1) anchor <"If the trade was cleared (novated) through a central counterparty clearing service, this represents the date the trade was cleared (transferred to the central counterparty).">;
		[synonym FpML value clearedDate pathExpression "trade.tradeHeader"]
	contractualProduct ContractualProduct (1..1) <"The contractual product information that is associated with the contract. The corresponding FpML construct is the product abstract element and the associated substitution group.">;
	otherPartyPayment Payment (0..*) <"Other fees or additional payments associated with the contract, e.g. broker commissions, where one or more of the parties involved are not principal parties involved in the contract.">;
		[synonym FpML value otherPartyPayment pathExpression "trade"]
	brokerParty Party (0..*) reference <"The party (or parties) that brokered the contract. In FpML, this element is specified as a reference to a party.">;
		[synonym FpML value brokerPartyReference pathExpression "trade"]	
	calculationAgent CalculationAgentModel (1..1) <"The ISDA Calculation Agent and the associated business center information. This information is represented in FpML via the CalculationAgent.model.">;
	determiningParty Party (0..2) reference <"The ISDA Determination Party that is specified in the related confirmation as Determination Party.">;
		[synonym FpML value determiningParty pathExpression "trade"]
	barrierDeterminationAgent Party (0..1) reference <"The party specified in the related confirmation as Barrier Determination Agent.">;
		[synonym FpML value barrierDeterminationAgent pathExpression "trade"]
	hedgingParty Party (0..2) reference <"The ISDA Hedging Party that is specified in the related confirmation as Hedging, or if no Hedging Party is specified, either party to the contract.">;
		[synonym FpML value hedgingParty pathExpression "trade"]
	collateral Collateral (0..1) <"Defines the collateral obligations of a party.">;
		[synonym FpML value collateral pathExpression "trade"]
	documentation Documentation (0..1) <"Defines the definitions that govern the document and should include the year and type of definitions referenced, along with any relevant documentation (such as master agreement) and the date it was signed.">;
		[synonym FpML value documentation pathExpression "trade"]
	governingLaw GoverningLawEnum (0..1) <"Identification of the law governing the transaction.">;
		[synonym FpML value governingLaw pathExpression "trade"]
	/*
	 * QUESTION TO CDM GROUP
	 * TODO - Need to confirm whether we want to associate a contractState attribute.
	 * One of the objection raised in a meeting was the fact that open/close is too simplistic as a state.
	 * Should we look to enhance the indicator with an associated qualifier, e.g. Legal, Accounting?
	 * Or should we drop this concept for the time being?
	 */
	contractState ContractStateEnum (0..1) <"The state qualification of a contractual product, i.e. whether open or close. This attribute is not present as part of the FpML standard.">;
}

data rule Contract_clearedDate
	when Contract -> clearedDate exists
	then Contract -> clearedDate >= Contract -> tradeDate

class ContractualProduct
{
	productIdentification string (1..1) isProduct; // A back-end logic associated to the isProduct qualifier will specify the product as a function of the associated economic terms
	economicTerms EconomicTerms (1..1);
}

isProduct InterestRate_IRSwap_Basis
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_Basis]
	[synonym Bank_A value BasisSwap] // The purpose is to illustrate how firms could map to their own internal product identification
	[synonym Venue_B value FloatFloatInterestSwap]
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists

isProduct InterestRate_IRSwap_FixedFloat
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_FixedFloat]
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> fixedRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists

isProduct InterestRate_IRSwap_FixedFixed
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_FixedFixed]
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> fixedRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> fixedRate exists

isProduct InterestRate_CrossCurrency_Basis
	[synonym ISDA_Taxonomy_v1 value InterestRate_CrossCurrency_Basis]
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and EconomicTerms -> payout -> interestRatePayout -> crossCurrencyTerms -> principalExchanges exists

isProduct InterestRate_CrossCurrency_FixedFloat
	[synonym ISDA_Taxonomy_v1 value InterestRate_CrossCurrency_FixedFloat]
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> fixedRate exists
	and EconomicTerms -> payout -> interestRatePayout -> crossCurrencyTerms -> principalExchanges exists

isProduct InterestRate_IRSwap_FixedFloat_ZeroCoupon
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_FixedFloat] // The v1 taxonomy doesn't have this v2 level of detail
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> fixedRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier = 1
	and EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> period = PeriodEnum.T

isProduct InterestRate_IRSwap_FixedFloat_PlainVanilla
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_FixedFloat] // The v1 taxonomy doesn't have this v2 level of detail
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> fixedRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate -> spreadSchedule -> step is absent
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate -> floatingRateMultiplierSchedule is absent
	and EconomicTerms -> payout -> interestRatePayout -> resetDates -> resetFrequency -> period =
		EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate -> indexTenor -> period
	and EconomicTerms -> payout -> interestRatePayout -> resetDates -> resetFrequency -> periodMultiplier =
		EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate -> indexTenor -> periodMultiplier
	and 	EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier <> 1
	and EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> period <> PeriodEnum.T
	and ( 
		// Payment frequency = reset frequency 
		( EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier = 
		EconomicTerms -> payout -> interestRatePayout -> resetDates -> resetFrequency -> periodMultiplier
		and EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> period = 
			EconomicTerms -> payout -> interestRatePayout -> resetDates -> resetFrequency -> period )
		// Payment frequency is annual and reset frequency is semi-annual and compounding does not apply
		// Payment frequency is annual and reset frequency is quarterly and compounding does not apply
		or ( EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> period = PeriodEnum.Y 
			and ( EconomicTerms -> payout -> interestRatePayout -> resetDates -> resetFrequency -> period = PeriodEnum.M
				and ( EconomicTerms -> payout -> interestRatePayout -> resetDates -> resetFrequency -> periodMultiplier = 6 
					or EconomicTerms -> payout -> interestRatePayout -> resetDates -> resetFrequency -> periodMultiplier = 3 )
				and EconomicTerms -> payout -> interestRatePayout -> compoundingMethod is absent )
		// Payment frequency is semi annual and reset frequency is quarterly and compounding does not apply
		// Payment frequency is quarterly and reset frequency is monthly and compounding does not apply
		or ( EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> period = PeriodEnum.M 
			and ( EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier = 6 
				or EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier = 3 )
			and ( EconomicTerms -> payout -> interestRatePayout -> resetDates -> resetFrequency -> period = PeriodEnum.M
				and EconomicTerms -> payout -> interestRatePayout -> resetDates -> resetFrequency -> periodMultiplier = 3 )
				and EconomicTerms -> payout -> interestRatePayout -> compoundingMethod is absent ) ) )
	// Not able to represent the clause 'No provision for early termination which uses an off-market valuation'

/*
 * TODO Adjust the Xtext grammar to support enumeration styles
 */
isProduct InterestRate_IRSwap_FixedFloat_OIS
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_FixedFloat] // The v1 taxonomy doesn't have this v2 level of detail
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> fixedRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate -> floatingRateIndex = FloatingRateIndexEnum.AUD_AONIA_OIS_COMPOUND

isProduct InterestRate_IRSwap_Basis_OIS
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_Basis] // The v1 taxonomy doesn't have this v2 level of detail
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate -> floatingRateIndex = FloatingRateIndexEnum.AUD_AONIA_OIS_COMPOUND
	
isProduct InterestRate_InflationSwap_FixedFloat_YearOn_Year
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_Inflation]
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> fixedRate exists
	and 	EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier = 1
	and 	EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> period = PeriodEnum.Y

isProduct InterestRate_InflationSwap_FixedFloat_ZeroCoupon
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_Inflation]
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> fixedRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> inflationRate exists
	and EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier = 1
	and EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> period = PeriodEnum.T

isProduct InterestRate_InflationSwap_Basis_YearOn_Year
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_Inflation]
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and 	EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier = 1
	and 	EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> period = PeriodEnum.Y

isProduct InterestRate_InflationSwap_Basis_ZeroCoupon
	[synonym ISDA_Taxonomy_v1 value InterestRate_IRSwap_Inflation]
	EconomicTerms -> payout -> interestRatePayout -> interestRate -> floatingRate exists
	and EconomicTerms -> payout -> interestRatePayout -> interestRate -> inflationRate exists
	and EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> periodMultiplier = 1
	and EconomicTerms -> payout -> interestRatePayout -> paymentDates -> paymentFrequency -> period = PeriodEnum.T


/*
 * QUESTION TO CDM GROUP
 * TODO - How do we identify specify the CDS products, in the absence of normalised scheme values?
 */

class EconomicTerms calculation FixedAmount
{
	payout Payout (1..1);
	/*
	 * The below features are not applicable to the CDS
	 */
	earlyTerminationProvision EarlyTerminationProvision (0..1);
		[synonym FpML value earlyTerminationProvision pathExpression "trade.swap"]
	cancelableProvision CancelableProvision (0..1);
		[synonym FpML value cancelableProvision pathExpression "trade.swap"]
	extendibleProvision ExtendibleProvision (0..1);
}

class Payout
{
	interestRatePayout InterestRatePayout (0..*);
		[synonym FpML value swapStream pathExpression "trade.swap"]
		[synonym FpML value feeLeg pathExpression "trade.creditDefaultSwap"]
	creditDefaultPayout CreditDefaultPayout (0..1);
	fee Payment (0..*);
		[synonym FpML value additionalPayment pathExpression "trade.swap"]
}

class InterestRatePayout
{
	payerParty Party (1..1) reference;
		[synonym FpML value payerPartyReference]
	receiverParty Party (1..1) reference;
		[synonym FpML value receiverPartyReference]
	quantity ContractualQuantity (1..1);
	interestRate InterestRate (0..1);
	dayCountFraction DayCountFractionEnum (1..1);
		[synonym FpML value dayCountFraction pathExpression "calculationPeriodAmount.calculation"]
		[synonym FpML value dayCountFraction pathExpression "periodicPayment.fixedAmountCalculation"]
		[synonym FpML value dayCountFraction pathExpression "periodicPayment.floatingAmountCalculation"]
	discounting Discounting (0..1);
		[synonym FpML value discounting pathExpression "calculationPeriodAmount.calculation"]
	compoundingMethod CompoundingMethodEnum (0..1);
		[synonym FpML value compoundingMethod pathExpression "calculationPeriodAmount.calculation"]
	calculationPeriodDates CalculationPeriodDates (1..1);
		[synonym FpML value calculationPeriodDates]
	paymentDates PaymentDates (1..1);
		[synonym FpML value paymentDates]
	resetDates ResetDates (1..1);
		[synonym FpML value resetDates]
	cashflows Cashflows (0..1) <"The cashflows representation of the swap stream.">;
		[synonym FpML value cashflows]
	crossCurrencyTerms CrossCurrencyTerms (0..1); // New construct, that wraps the principleExchanges and settlementProvision terms
}

data rule InterestRatePayout_quantity
	when InterestRatePayout exists
	then InterestRatePayout -> quantity -> notionalSchedule must exist

class ContractualQuantity
{
	quantity Quantity (0..1);
	notionalAmount Money (0..1);
		[synonym FpML value initialValue pathExpression "calculationPeriodAmount.calculation" set notionalAmount when Payout -> interestRatePayout -> quantity -> notionalSchedule -> notionalStepSchedule -> step is absent]
		[synonym FpML value calculationAmount pathExpression "protectionTerms"]
		[synonym FpML value calculationAmount pathExpression "periodicPayment.fixedAmountCalculation"]
	notionalSchedule NotionalSchedule (0..1);
		[synonym FpML value notionalSchedule pathExpression "calculationPeriodAmount.calculation" set notionalSchedule when Payout -> interestRatePayout -> quantity -> notionalSchedule -> notionalStepSchedule -> step exists]
	fxLinkedNotional FxLinkedNotionalSchedule (0..1);
	futureValueNotional FutureValueAmount (0..1);
	 	[synonym FpML value futureValueNotional pathExpression "calculationPeriodAmount.calculation"]
}

choice rule ContractualQuantity_choice <"TThe below set of notional values are exclusive, while some of those could be associated with the futureValueNotional.">
	for ContractualQuantity optional choice between
	quantity and notionalAmount and notionalSchedule and fxLinkedNotional

data rule InterestRatePayout_futureValueNotional <"The BRL CDI future value notional only applies to a fixed Rate Schedule.">
	when InterestRatePayout -> interestRate -> fixedRate is absent
	then InterestRatePayout -> quantity -> futureValueNotional must be absent

data rule FutureValueNotional_terminationDate <"FpML states that the value date associated with the future value notional should match the adjusted termination date.">
	when InterestRatePayout -> quantity -> futureValueNotional exists
	then InterestRatePayout -> quantity -> futureValueNotional -> valueDate = InterestRatePayout -> calculationPeriodDates -> terminationDate -> adjustedDate

class NotionalSchedule
	[synonym FpML value Notional]
{
	id string (0..1);
		[synonym FpML value id]
	notionalStepSchedule NonNegativeAmountSchedule (1..1) <"The notional amount or notional amount schedule expressed as explicit outstanding notional amounts and dates. In the case of a schedule, the step dates may be subject to adjustments in accordance with any adjustments specified in calculationPeriodDatesAdjustments.">;
		[synonym FpML value notionalStepSchedule]
	notionalStepParameters NotionalStepRule (0..1) <"A parametric representation of the notional step schedule, i.e. parameters used to generate the notional schedule.">;
		[synonym FpML value notionalStepParameters]
}

data rule NotionalSchedule_notionalStepSchedule <"FpML validation rule ird-61 - Context: NonNegativeSchedule (complex type). If step does not exist, then initialValue must not be equal to 0.">
	when NotionalSchedule -> notionalStepSchedule -> step is absent
	then NotionalSchedule -> notionalStepSchedule -> initialValue <> 0b

/*
 * The mapping to the CDS feeLeg is handled at a lower granularity level because the overall construct is different
 */
class InterestRate one of
{
	fixedRate Schedule (0..1);
		[synonym FpML value fixedRateSchedule pathExpression "calculationPeriodAmount.calculation"]
	floatingRate FloatingRateCalculation (0..1);
		[synonym FpML value floatingRateCalculation pathExpression "calculationPeriodAmount.calculation"]
	inflationRate InflationRateCalculation (0..1);
		[synonym FpML value inflationRateCalculation pathExpression "calculationPeriodAmount.calculation"]
}

class CreditDefaultPayout
{
	generalTerms GeneralTerms (1..1);
//		[synonym FpML value generalTerms pathExpression "trade.creditDefaultSwap"]
	protectionTerms ProtectionTerms (1..1);
		[synonym FpML value protectionTerms pathExpression "trade.creditDefaultSwap"]
	cashSettlementTerms CashSettlementTerms (0..1);
		[synonym FpML value cashSettlementTerms pathExpression "trade.creditDefaultSwap"]
	physicalSettlementTerms PhysicalSettlementTerms (0..1);
		[synonym FpML value physicalSettlementTerms pathExpression "trade.creditDefaultSwap"]
}

choice rule CreditDefaultPayout_choice <"Choice rule to represent an FpML choice construct.">
	for CreditDefaultPayout optional choice between
	cashSettlementTerms and physicalSettlementTerms

data rule CreditDefaultPayout_quantity
	when InterestRatePayout exists
	then InterestRatePayout -> quantity -> notionalAmount must exist

data rule CreditDefaultPayout_inflationRate // Do we want to actually have such restriction?  While FpML does't support it, FpML scope is limited to standardised products.
	when EconomicTerms -> payout -> creditDefaultPayout exists
	then EconomicTerms -> payout -> interestRatePayout -> interestRate -> inflationRate must be absent

class PaymentDates // Differences with the FpML PaymentDate include addition of CDS paymentDelay element.
{
	paymentFrequency Frequency (1..1);
		[synonym FpML value paymentFrequency]
	firstPaymentDate date (0..1);
		[synonym FpML value firstPaymentDate]
	lastRegularPaymentDate date (0..1);
		[synonym FpML value lastRegularPaymentDate]
	payRelativeTo PayRelativeToEnum (1..1);
		[synonym FpML value payRelativeTo]
	paymentDaysOffset Offset (0..1);
		[synonym FpML value paymentDaysOffset]
	paymentDatesAdjustments BusinessDayAdjustments (1..1);
		[synonym FpML value paymentDatesAdjustments]
	paymentDelay boolean (1..1); // As a departure from FpML, the proposal is to remove optional cardinality in a boolean attribute
		[synonym FpML value paymentDelay]
//		TODO - The below logic could be a proper way to handle the FpML optional boolean that is quite frequent in the FpML Credit schema
//		[synonym FpML value paymentDelay set paymentDelay to False when FpML.paymentDelay is absent]
//		alternative syntax: [synonym FpML value paymentDelay set paymentDelay to False when synonym.paymentDelay is absent]
}

data rule PaymentDates_firstPaymentDate <"FpML validation rule ird-6 - Context: InterestRateStream (complex type). If paymentDates/firstPaymentDate exists, and if calculationPeriodDates/effectiveDate exists, then paymentDates/firstPaymentDate must be after calculationPeriodDates/effectiveDate/unadjustedDate.">
	when InterestRateStream -> paymentDates -> firstPaymentDate exists 
		and InterestRateStream -> calculationPeriodDates -> effectiveDate exists
	then InterestRateStream -> paymentDates -> firstPaymentDate > InterestRateStream -> calculationPeriodDates -> effectiveDate -> unadjustedDate

data rule PaymentDates_firstPaymentDate_lastRegularPaymentDate <"FpML validation rule ird-35 - Context: PaymentDates (complex type). If firstPaymentDate exists, and if lastRegularPaymentDate exists, then firstPaymentDate must be before lastRegularPaymentDate.">
	when PaymentDates -> firstPaymentDate exists 
		and PaymentDates -> lastRegularPaymentDate exists
	then PaymentDates -> firstPaymentDate < PaymentDates -> lastRegularPaymentDate

data rule PaymentDates_firstPaymentDate_initialStub <"FpML specifies that firstPaymentDate must only be included if there is an initial stub.">
	when InterestRateStream -> stubCalculationPeriodAmount -> initialStub is absent
	then InterestRateStream -> paymentDates -> firstPaymentDate must be absent 

data rule PaymentDates_lastRegularPaymentDate_finalStub <"FpML specifies that lastRegularPaymentDate must only be included if there is an final stub.">
	when InterestRateStream -> stubCalculationPeriodAmount -> finalStub is absent
	then InterestRateStream -> paymentDates -> lastRegularPaymentDate must be absent
	
data rule PaymentDates_paymentDaysOffset <"FpML specifies that paymentDaysOffset should only be included if early or delayed payment is applicable, i.e. if the periodMultiplier element value is not equal to zero.">
	when PaymentDates -> paymentDaysOffset exists
	then PaymentDates -> paymentDaysOffset -> periodMultiplier <> 0

data rule PaymentDates_inflationLag <"In FpML, Offset extends PeriodEnum, which doesn't include the value 'T'.">
	when PaymentDates -> paymentDaysOffset exists
	then PaymentDates -> paymentDaysOffset -> period <> PeriodEnum.T

class Quantity
{
	amount number (1..1);
	unitOfMeasure UnitOfMeasureEnum (0..1);
	timeUnit TimeUnitEnum (0..1);
}

class CrossCurrencyTerms
{
	principalExchanges PrincipalExchanges (0..1);
		[synonym FpML value principalExchanges pathExpression "trade.swap.swapStream"]
	settlementProvision SettlementProvision (0..1);
		[synonym FpML value settlementProvision pathExpression "trade.swap.swapStream"]
}

class ProtectionTerms // Adjusted from the FpML construct by replacing calculationAmount, a.k.a. notional.
{
	quantity ContractualQuantity (1..1);
	creditEvents CreditEvents (0..1);
		[synonym FpML value creditEvents]
	obligations Obligations (0..1);
		[synonym FpML value obligations]
	floatingAmountEvents FloatingAmountEvents (0..1);
		[synonym FpML value floatingAmountEvents]
}

class TransactedPrice // These are the set of transacted price attributes currently positioned as part of the FpML FeeLeg construct.
{
	marketFixedRate number (0..1);
		[synonym FpML value marketFixedRate pathExpression "feeLeg"]
	initialPoints number (0..1);
		[synonym FpML value initialPoints pathExpression "feeLeg"]
	marketPrice number (0..1);
		[synonym FpML value marketPrice pathExpression "feeLeg"]
	quotationStyle QuotationStyleEnum (0..1);
		[synonym FpML value quotationStyle pathExpression "feeLeg"]
}

class GeneralTerms // Adjusted from the FpML construct by removing the effectiveDate, terminationDate, businessDayAdjustments
{
	buyerSeller BuyerSeller (1..1);
	referenceInformation ReferenceInformation (0..1);
		[synonym FpML value referenceInformation pathExpression "trade.creditDefaultSwap.generalTerms"]
	indexReferenceInformation IndexReferenceInformation (0..1);
		[synonym FpML value indexReferenceInformation pathExpression "trade.creditDefaultSwap.generalTerms"]
	basketReferenceInformation BasketReferenceInformation (0..1);
		[synonym FpML value basketReferenceInformation pathExpression "trade.creditDefaultSwap.generalTerms"]
	additionalTerm string (0..*) scheme "additionalTermScheme";
		[synonym FpML value additionalTerm pathExpression "trade.creditDefaultSwap.generalTerms"]
	substitution boolean (1..1); // As a departure from FpML, the proposal is to remove optional cardinality in a boolean attribute. See class PaymentDates for proposed resolution.
		[synonym FpML value substitution pathExpression "trade.creditDefaultSwap.generalTerms"]
	modifiedEquityDelivery boolean (1..1); // As a departure from FpML, the proposal is to remove optional cardinality in a boolean attribute. See class PaymentDates for proposed resolution.
		[synonym FpML value modifiedEquityDelivery pathExpression "trade.creditDefaultSwap.generalTerms"]
}

choice rule GeneralTerms_choice
	for GeneralTerms required choice between
	referenceInformation and indexReferenceInformation and basketReferenceInformation
