namespace cdm.event.workflow : <"Workflow concepts (orthogonal to business event): time stamp, credit limit, trade warehouse info and associated function specifications.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.base.staticdata.identifier.*

import cdm.event.common.*

annotation creation: <"Annotation to describe the intent of a function">
    [prefix Create]

    PrimitiveEvent PrimitiveEvent (0..1) <"A primitive event function should take as an input all of the types required to construct the event and produce a new PrimitiveEvent type.">
	BusinessEvent BusinessEvent (0..1) <"A business event function should take as its inputs the after state of previous business event or in case where the is no before state, all of the inputs required to produce the outcome BusinessEvent.">
	WorkflowStep WorkflowStep (0..1) <"Create a proposed, accepted or rejected WorkflowStep with details about the message, identifiers, event timestamps, parties and accounts involved in the step and allow the action to be set to New, Correct or Cancel.">

func Create_WorkflowStep: <"Function to create a workflow step with a business event and associated details about the message, identifiers, event timestamps, parties and accounts involved in the step. The function should be used when there is already a fully formed business event with the action set to signify that the step is new, or a correction/cancellation of a previous step. The action is constrained so that when a previous workflow step is specified, the valid actions are as follows; New -> New, New -> Correct, New -> Cancel, Correct -> Correct and Correct -> Cancel. When a previous workflow is not specified, the action must be New.">
	[creation WorkflowStep]
	inputs:
		messageInformation MessageInformation (0..1) <"Contains all information pertaining the messaging header.">
		timestamp EventTimestamp (1..1) <"The dateTime and qualifier associated with this event.">
		eventIdentifier Identifier (1..1) <"The identifier that uniquely identify this lifecycle event.">
		party Party (0..*) <"The specification of the parties involved in the WorkflowStep.">
		account Account (0..*) <"Optional account information that could be associated to the event.">
		previousWorkflowStep WorkflowStep (0..1) <"Optional previous WorkflowStep that provides lineage to WorkflowStep that precedes it. If specified, the previous action is used to constrain the actions allows to the resulting workflow step.">
		action ActionEnum (1..1) <"Specifies whether the event is a new, a correction or a cancellation. When a previous workflow step is specified, the allowed actions are as follows; New -> New, New -> Correct, New -> Cancel, Correct -> Correct and Correct -> Cancel. When a previous workflow is not specified, the action must be New. Two consecutive workflow steps with action New, is valid when you have multiple steps e.g. new execution -> new contract formation">
		businessEvent BusinessEvent (0..1) <"Life cycle event for the step. The business event must be specified if the action is new or corrected, and must be absent in the case of a cancel where the previous step would provide the lineage to the the business event.">

	output:
		workflowStep WorkflowStep (1..1) <"Workflow step with a business event (in the event of action being new or correct) and associated details about the message, identifiers, event timestamps, parties and accounts involved in the step.">

	condition: <"The previous workflow step must contain a business event. Use Create_AcceptedWorkflowStep when the previous workflow step is a proposal.">
		if (previousWorkflowStep exists)
		then previousWorkflowStep -> businessEvent exists

	condition: <"Valid action transitions are: New -> New, New -> Correct, New -> Cancel, Correct -> New, Correct -> Correct and Correct -> Cancel">
		if (previousWorkflowStep -> action = ActionEnum -> New or previousWorkflowStep -> action = ActionEnum -> Correct)
		then (action = ActionEnum -> New or action = ActionEnum -> Correct or action = ActionEnum -> Cancel)

	condition: <"You cannot create a business event on a cancelled previous step">
		previousWorkflowStep -> action <> ActionEnum -> Cancel
	
	condition: <"Action must be New if there is no previous step">
		if (previousWorkflowStep is absent or previousWorkflowStep -> action is absent)
		then (action = ActionEnum -> New)

	assign-output workflowStep -> action: <"Assign the workflowStep action.">
		action

	assign-output workflowStep -> messageInformation: <"Assign the workflowStep action.">
		messageInformation

	assign-output workflowStep -> timestamp: <"Assign the the dateTime and qualifier associated with this event.">
		timestamp

	assign-output workflowStep -> eventIdentifier: <"Assign the identifier that uniquely identify this lifecycle event.">
		eventIdentifier

	assign-output workflowStep -> party: <"Assign the parties involved in the WorkflowStep.">
		party

	assign-output workflowStep -> account: <"Assign the account information that could be associated to the event.">
		account

	assign-output workflowStep -> previousWorkflowStep: <"Assign the key of the previous step to resulting step providing lineage.">
		previousWorkflowStep as-key

	assign-output workflowStep -> businessEvent: <"Assign the business event corresponding to the workflow step.">
		businessEvent

func Create_AcceptedWorkflowStep: <"Represents the acceptance of a proposed instruction that results in a workflow step containing a business event, message details, identifiers, event timestamps, parties and accounts. The previous workflow step input must exist to provide workflow lineage. The instruction from the previous workflow step should be used with a [creation BusinessEvent] function to create the input business event passed into this function e.g. AllocationInstruction from the previous step is used with Create_Allocation to produce the business event which should used as an input to this step.">
	[creation WorkflowStep]
	inputs:
		messageInformation MessageInformation (0..1) <"Contains all information pertaining the messaging header.">
		timestamp EventTimestamp (1..1) <"The dateTime and qualifier associated with this event.">
		eventIdentifier Identifier (1..1) <"The identifier that uniquely identify this lifecycle event.">
		party Party (0..*) <"The specification of the parties involved in the WorkflowStep.">
		account Account (0..*) <"Optional account information that could be associated to the event.">
		previousWorkflowStep WorkflowStep (1..1) <"Required previous WorkflowStep that provides lineage to WorkflowStep that precedes it.">
		businessEvent BusinessEvent (1..1) <"Life cycle event for the step">

	output:
		acceptedWorkflowStep WorkflowStep (1..1) <"Accepted WorkflowStep populated with the business event and associated details about the message, identifiers, event timestamps, parties and accounts involved in the step.">

	condition: <"The previous step being accepted must be a proposed step containing an instruction.">
		previousWorkflowStep -> proposedInstruction exists

	condition: <"You cannot accept a business event on a cancelled previous step.">
		previousWorkflowStep -> action <> ActionEnum -> Cancel

	condition: <"The previous step cannot be rejected.">
		previousWorkflowStep -> rejected <> True

	assign-output acceptedWorkflowStep -> messageInformation: <"Assign the workflowStep action.">
		messageInformation

	assign-output acceptedWorkflowStep -> timestamp: <"Assign the the dateTime and qualifier associated with this event.">
		timestamp

	assign-output acceptedWorkflowStep -> eventIdentifier: <"Assign the identifier that uniquely identify this lifecycle event.">
		eventIdentifier

	assign-output acceptedWorkflowStep -> party: <"Assign the parties involved in the WorkflowStep.">
		party

	assign-output acceptedWorkflowStep -> account: <"Assign the account information that could be associated to the event.">
		account

	assign-output acceptedWorkflowStep -> previousWorkflowStep: <"Set the reference to the previous WorkflowStep to provide lineage">
		previousWorkflowStep as-key

	assign-output acceptedWorkflowStep -> businessEvent: <"Assign the business event corresponding to the workflow step.">
		businessEvent

func Create_ProposedWorkflowStep: <"Represents the proposal to create a business event that results in a workflow step containing an instruction, message details, identifiers, event timestamps, parties and accounts. The optional previous workflow step input provides workflow lineage to where there has been a correction or cancellation to the proposed step. The action is constrained so that when a previous workflow step is specified, the valid actions are as follows; New -> Correct and Correct -> Cancel. When a previous workflow is not specified, the action must be New.">
	[creation WorkflowStep]
	inputs:
		messageInformation MessageInformation (0..1) <"Contains all information pertaining the messaging header">
		timestamp EventTimestamp (1..1) <"The dateTime and qualifier associated with this event.">
		eventIdentifier Identifier (1..1) <"The identifier that uniquely identify this lifecycle event.">
		party Party (0..*) <"The specification of the parties involved in the WorkflowStep.">
		account Account (0..*) <"Optional account information that could be associated to the event.">
		previousWorkflowStep WorkflowStep (0..1) <"Optional previous WorkflowStep that provides lineage to WorkflowStep that precedes it.">
		action ActionEnum (1..1) <"Specifies whether the event is new or a correction. The action cannot be a cancellation or new if the previous step is also new.">
		proposedInstruction Instruction (1..1) <"The proposed instruction for the step to initiate a workflow e.g. Clearing Instruction or Allocation Instruction">

	output:
		proposedWorkflowStep WorkflowStep (1..1) <"Proposed WorkflowStep populated with the proposed instruction">

	condition: <"When the previous step is new or corrected and contains an instruction (proposed), the following action can only be correct.">
		if (previousWorkflowStep -> proposedInstruction exists and (previousWorkflowStep -> action = ActionEnum -> New or previousWorkflowStep -> action = ActionEnum -> Correct))
		then action = ActionEnum -> Correct

	condition: <"When the previous step contains a business event, the following action can only be new.">
		if (previousWorkflowStep is absent or previousWorkflowStep -> businessEvent exists)
		then action = ActionEnum -> New

	assign-output proposedWorkflowStep -> messageInformation: <"Assign the workflowStep action.">
		messageInformation

	assign-output proposedWorkflowStep -> timestamp: <"Assign the the dateTime and qualifier associated with this event.">
		timestamp

	assign-output proposedWorkflowStep -> eventIdentifier: <"Assign the identifier that uniquely identify this lifecycle event.">
		eventIdentifier

	assign-output proposedWorkflowStep -> party: <"Assign the parties involved in the WorkflowStep.">
		party

	assign-output proposedWorkflowStep -> account: <"Assign the account information that could be associated to the event.">
		account

	assign-output proposedWorkflowStep -> previousWorkflowStep: <"Set the reference to the previous WorkflowStep to provide lineage">
		previousWorkflowStep as-key

	assign-output proposedWorkflowStep -> proposedInstruction:
	proposedInstruction

func Create_RejectedWorkflowStep: <"Represents the rejection of a proposed instruction that results in a workflow step containing the rejection flag, message details, identifiers, event timestamps, parties and accounts involved in the step. The previous workflow step input must exist to provide workflow lineage. This function will be further developed to provide the reasons for rejection.">
	[creation WorkflowStep]
	inputs:
		messageInformation MessageInformation (0..1) <"Contains all information pertaining the messaging header">
		timestamp EventTimestamp (1..1) <"The dateTime and qualifier associated with this event.">
		eventIdentifier Identifier (1..1) <"The identifier that uniquely identify this lifecycle event.">
		previousWorkflowStep WorkflowStep (1..1) <"Required previous WorkflowStep that provides lineage to WorkflowStep that precedes it.">

	output:
		rejectedWorkflowStep WorkflowStep (1..1) <"Rejected WorkflowStep with lineage to the proposed step that preceded it.">

	condition: <"The previous proposed step being rejected must exist">
		previousWorkflowStep -> proposedInstruction exists
	
	assign-output rejectedWorkflowStep -> messageInformation: <"Assign the workflowStep action.">
		messageInformation

	assign-output rejectedWorkflowStep -> timestamp: <"Assign the the dateTime and qualifier associated with this event.">
		timestamp

	assign-output rejectedWorkflowStep -> eventIdentifier: <"Assign the identifier that uniquely identify this lifecycle event.">
		eventIdentifier

	assign-output rejectedWorkflowStep -> previousWorkflowStep: <"Set the reference to the previous WorkflowStep to provide lineage">
		previousWorkflowStep as-key

	assign-output rejectedWorkflowStep -> rejected: <"Set the rejected flag to True">
		True
