namespace "org.isda.cdm"

class AdjustableDate <"A class for defining a date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date. The CDM collapses the FpML AdjustableDate and AdjustableDate2 FpML constructs, as the only difference is that this latter allows for the ability to reference date adjustments through the dateAdjustmentsReference element.">
	[synonym FpML value AdjustableDate]
	[synonym FpML value AdjustableDate2]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	unadjustedDate date (1..1 ) <"A date subject to adjustment.">;
		[synonym FpML value unadjustedDate]
		[synonym FpML value unadjustedDate pathExpression "adjustableDate"]
		[synonym FpML value unadjustedDate pathExpression "paymentDate"]
		[synonym FpML value unadjustedDate pathExpression "paymentDate.adjustableDate"]
		[synonym FpML value firstPeriodStartDate]
		[synonym FpML value adjustablePaymentDate]
	dateAdjustments BusinessDayAdjustments (0..1) <"The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.">;
		[synonym FpML value dateAdjustments]
		[synonym FpML value dateAdjustments pathExpression "calculationPeriodDates.terminationDate"]
		[synonym FpML value dateAdjustments pathExpression "calculationPeriodDates.effectiveDate"]
		[synonym FpML value dateAdjustments pathExpression "paymentDate.adjustableDate"]
		[synonym FpML value dateAdjustments pathExpression "adjustableDate"]
		[synonym FpML value dateAdjustments pathExpression "paymentDate"]
	dateAdjustmentsReference string (0..1) reference <"A pointer style reference to date adjustments defined elsewhere in the document.">;
		[synonym FpML value dateAdjustmentsReference]
	adjustedDate date (0..1) anchor <"The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).">;
		[synonym FpML value adjustedDate]
		[synonym FpML value adjustedDate pathExpression "paymentDate"]
		[synonym FpML value adjustedDate pathExpression "adjustableDate"]
		[synonym FpML value adjustedDate pathExpression "paymentDate.adjustableDate"]
}

choice rule AdjustableDate_choice <"Choice rule to represent an FpML choice construct.">
	for AdjustableDate optional choice between
	dateAdjustments and dateAdjustmentsReference 

class AdjustableDates <"A class for defining a series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the dates.">
	[synonym FpML value AdjustableDates]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	unadjustedDate date (1..*) <"A date subject to adjustment.">;
		[synonym FpML value unadjustedDate]
	dateAdjustments BusinessDayAdjustments (1..1) <"The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.">;
		[synonym FpML value dateAdjustments]
	adjustedDate date (0..*) anchor <"The date(s) once the adjustment has been performed. (Note that this date may change if the business center holidays change).">;
		[synonym FpML value adjustedDate]
}

class AdjustableOrAdjustedDate <"A class for defining a date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">
	[synonym FpML value AdjustableOrAdjustedDate]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	unadjustedDate date (0..1 ) <"A date subject to adjustment.">;
		[synonym FpML value unadjustedDate]
	dateAdjustments BusinessDayAdjustments (0..1) <"The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.">;
		[synonym FpML value dateAdjustments]
	adjustedDate date (0..1) anchor <"The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).">;
		[synonym FpML value adjustedDate]
}

data rule AdjustableOrAdjustedDate_adjustedDate <"FpML specifies a choice between adjustedDate and [unadjustedDate (required), dateAdjutsments (required), adjustedDate (optional)].">
	when AdjustableOrAdjustedDate exists
	then AdjustableOrAdjustedDate -> adjustedDate exists 
	or ( AdjustableOrAdjustedDate -> unadjustedDate and AdjustableOrAdjustedDate -> dateAdjustments and AdjustableOrAdjustedDate -> adjustedDate ) exists
	or ( ( AdjustableOrAdjustedDate -> unadjustedDate and AdjustableOrAdjustedDate -> dateAdjustments ) exists 
		and AdjustableOrAdjustedDate -> adjustedDate is absent )

class AdjustableOrAdjustedOrRelativeDate <"This Rosetta class specifies the date as either an unadjusted, adjusted or relative date. It supplements the features of the AdjustableOrAdjustedDate to support the credit default swap option premium, which uses the relative date construct.">
{
	id string (0..1) anchor;
		[synonym FpML value id]
	unadjustedDate date (0..1 ) <"A date subject to adjustment.">;
		[synonym FpML value unadjustedDate]
		[synonym FpML value adjustablePaymentDate]
		[synonym FpML value unadjustedDate pathExpression "paymentDate.adjustableDate"]
		[synonym FpML value unadjustedDate pathExpression "paymentDate"]
	dateAdjustments BusinessDayAdjustments (0..1) <"The business day convention and financial business centers used for adjusting the date if it would otherwise fall on a day that is not a business date in the specified business centers.">;
		[synonym FpML value dateAdjustments]
		[synonym FpML value dateAdjustments pathExpression "paymentDate.adjustableDate"]
		[synonym FpML value dateAdjustments pathExpression "paymentDate"]
	adjustedDate date (0..1) anchor <"The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).">;
		[synonym FpML value adjustedDate]
		[synonym FpML value adjustedDate pathExpression "paymentDate"]
	relativeDate RelativeDateOffset (0..1) <"A date specified as some offset to another date (the anchor date).">;
		[synonym FpML value relativeDate]
		[synonym FpML value relativeDate pathExpression "paymentDate"]
}

data rule AdjustableOrAdjustedOrRelativeDate_adjustedDate <"This data rule extends the data rule AdjustableOrAdjustedDate_adjustedDate by specifying logic applicable to the relative date.">
	when AdjustableOrAdjustedOrRelativeDate exists
	then AdjustableOrAdjustedOrRelativeDate -> adjustedDate exists
	or AdjustableOrAdjustedOrRelativeDate -> relativeDate exists
	or ( AdjustableOrAdjustedOrRelativeDate -> unadjustedDate and AdjustableOrAdjustedOrRelativeDate -> dateAdjustments and AdjustableOrAdjustedOrRelativeDate -> adjustedDate ) exists
	or ( ( AdjustableOrAdjustedOrRelativeDate -> unadjustedDate and AdjustableOrAdjustedOrRelativeDate -> dateAdjustments ) exists 
		and AdjustableOrAdjustedOrRelativeDate -> adjustedDate is absent )

class AdjustableOrRelativeDate <"A class giving the choice between defining a date as an explicit date together with applicable adjustments or as relative to some other (anchor) date.">
{
	id string (0..1) anchor;
		[synonym FpML value id]
	adjustableDate AdjustableDate (0..1) <"A date that shall be subject to adjustment if it would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">;
	relativeDate RelativeDateOffset (0..1) <"A date specified as some offset to another date (the anchor date).">;
		[synonym FpML value relativeDate]
		[synonym FpML value relativeDate pathExpression "paymentDate"]
}

choice rule AdjustableOrRelativeDate_choice <"Choice rule to represent an FpML choice construct.">
	for AdjustableOrRelativeDate required choice between
		adjustableDate and relativeDate

class AdjustableOrRelativeDates <"A class giving the choice between defining a series of dates as an explicit list of dates together with applicable adjustments or as relative to some other series of (anchor) dates.">
{
	id string (0..1) anchor;
		[synonym FpML value id]
	adjustableDates AdjustableDates (0..1) <"A series of dates that shall be subject to adjustment if they would otherwise fall on a day that is not a business day in the specified business centers, together with the convention for adjusting the date.">;
		[synonym FpML value adjustableDates]
	relativeDates RelativeDates (0..1) <"A series of dates specified as some offset to another series of dates (the anchor dates).">;
		[synonym FpML value relativeDates]
}

choice rule AdjustableOrRelativeDates_choice <"Choice rule to represent an FpML choice construct.">
	for AdjustableOrRelativeDates required choice between
		adjustableDates and relativeDates

class AdjustedRelativeDateOffset extends RelativeDateOffset <"A type defining a date (referred to as the derived date) as a relative offset from another date (referred to as the anchor date) plus optional date adjustments.">
	[synonym FpML value AdjustedRelativeDateOffset]
{
	relativeDateAdjustments BusinessDayAdjustments (0..1) <"The business day convention and financial business centers used for adjusting the relative date if it would otherwise fall on a day that is not a business date in the specified business centers.">;
		[synonym FpML value relativeDateAdjustments]
}

class AmericanExercise <"A class defining the exercise period for an American style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.">
	[synonym FpML value AmericanExercise]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	commencementDate AdjustableOrRelativeDate (1..1) <"The first day of the exercise period for an American style option.">;
		[synonym FpML value commencementDate]
	expirationDate AdjustableOrRelativeDate (1..1) <"The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.">;
		[synonym FpML value expirationDate]
	relevantUnderlyingDate AdjustableOrRelativeDates (0..1) <"The date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).">;
		[synonym FpML value relevantUnderlyingDate]
	earliestExerciseTime BusinessCenterTime (1..1 ) <"The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) to, and including, the expiration date.">;
		[synonym FpML value earliestExerciseTime]
	latestExerciseTime BusinessCenterTime (0..1 ) <"For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller's agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.">;
		[synonym FpML value latestExerciseTime]
	expirationTime BusinessCenterTime (1..1) <"The latest time for exercise on expirationDate.">;
		[synonym FpML value expirationTime]
	multipleExercise MultipleExercise (0..1) <"As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more that the maximum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an integral multiple of, the integral multiple amount.">;
		[synonym FpML value multipleExercise]
	exerciseFeeSchedule ExerciseFeeSchedule (0..1) <"The fees associated with an exercise date. The fees are conditional on the exercise occurring. The fees can be specified as actual currency amounts or as percentages of the notional amount being exercised.">;
		[synonym FpML value exerciseFeeSchedule]
}

class AmountSchedule extends Schedule <"A class to specify a currency amount or a currency amount schedule.">
	[synonym FpML value AmountSchedule]
{
	currency string (1..*) scheme "currencyScheme" <"The currency in which the amount is denominated.">;
		[synonym FpML value currency]
}

class AutomaticExercise <"A type to define automatic exercise of a swaption. With automatic exercise the option is deemed to have exercised if it is in the money by more than the threshold amount on the exercise date.">
	[synonym FpML value AutomaticExercise]
{
	thresholdRate number (1..1) <"A threshold rate. The threshold of 0.10% would be represented as 0.001">;
		[synonym FpML value thresholdRate]
}

class BermudaExercise <"A class defining the Bermuda option exercise dates and the expiration date together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fee.">
	[synonym FpML value BermudaExercise]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	bermudaExerciseDates AdjustableOrRelativeDates (1..1) <"The dates that define the Bermuda option exercise dates and the expiration date. The last specified date is assumed to be the expiration date. The dates can either be specified as a series of explicit dates and associated adjustments or as a series of dates defined relative to another schedule of dates, for example, the calculation period start dates. Where a relative series of dates are defined the first and last possible exercise dates can be separately specified.">;
		[synonym FpML value bermudaExerciseDates]
	relevantUnderlyingDate AdjustableOrRelativeDates (0..1) <"The date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).">;
		[synonym FpML value relevantUnderlyingDate]
	earliestExerciseTime BusinessCenterTime (1..1) <"The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) on each Bermuda option exercise date and the expiration date.">;
		[synonym FpML value earliestExerciseTime]
	latestExerciseTime BusinessCenterTime (0..1 ) <"For a Bermuda or American style option, the latest time on an exercise business day (excluding the expiration date) within the exercise period that notice can be given by the buyer to the seller or seller's agent. Notice of exercise given after this time will be deemed to have been given on the next exercise business day.">;
		[synonym FpML value latestExerciseTime]
	expirationTime BusinessCenterTime (1..1) <"The latest time for exercise on expirationDate.">;
		[synonym FpML value expirationTime]
	multipleExercise MultipleExercise (0..1) <"As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more that the maximum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an integral multiple of, the integral multiple amount.">;
		[synonym FpML value multipleExercise]
	exerciseFeeSchedule ExerciseFeeSchedule (0..1) <"The fees associated with an exercise date. The fees are conditional on the exercise occurring. The fees can be specified as actual currency amounts or as percentages of the notional amount being exercised.">;
		[synonym FpML value exerciseFeeSchedule]
}

class BrokerConfirmation <"Identifies the market sector in which the trade has been arranged.">
	[synonym FpML value BrokerConfirmation]
{
	brokerConfirmationType BrokerConfirmationTypeEnum (1..1) scheme "brokerConfirmationTypeScheme" <"The type of broker confirmation executed between the parties.">;
		[synonym FpML value brokerConfirmationType]
}

class BusinessCenters <"A class for defining business day calendar used in determining whether a day is a business day or not. A list of business day calendar locations may be ordered in the document alphabetically based on business day calendar location code. An FpML document containing an unordered business day calendar location list is still regarded as a conformant document. The CDM adjusts the FpML constructs by embedding the ability to reference the business center(s) as part of that class.">
	[synonym FpML value BusinessCenters]
{
	id string (0..1) anchor;
		[synonym FpML value id pathExpression "businessCenters"]
		[synonym FpML value id]
	businessCenter BusinessCenterEnum (0..*) scheme "businessCenterScheme" <"A code identifying a business day calendar location. A business day calendar location is drawn from the list identified by the business day calendar location scheme.">;
		[synonym FpML value businessCenter]
		[synonym FpML value businessCenter pathExpression "businessCenters"]
	businessCentersReference string (0..1) reference <"A pointer style reference to a set of financial business centers defined elsewhere in the document. This set of business centers is used to determine whether a particular day is a business day or not.">;
		[synonym FpML value businessCentersReference]
}

choice rule BusinessCenters_choice <"The CDM embeds as part of the BusinessCenters class the ability to reference business center(s).">
	for BusinessCenters required choice between
	businessCenter and businessCentersReference

class BusinessCenterTime <"A class for defining a time with respect to a business day calendar location. For example, 11:00am London time.">
	[synonym FpML value BusinessCenterTime]
{
	hourMinuteTime time (1..1) <"A time specified in hh:mm:ss format where the second component must be '00', e.g. 11am would be represented as 11:00:00.">;
		[synonym FpML value hourMinuteTime]
	businessCenter BusinessCenterEnum (1..1) scheme "businessCenterScheme" <"A code identifying a business day calendar location. A business day calendar location is drawn from the list identified by the business day calendar location scheme.">;
		[synonym FpML value businessCenter]
}


class BusinessDateRange extends DateRange <"A class defining a range of contiguous business days by defining an unadjusted first date, an unadjusted last date and a business day convention and business centers for adjusting the first and last dates if they would otherwise fall on a non business day in the specified business centers. The days between the first and last date must also be good business days in the specified centers to be counted in the range.">
	[synonym FpML value BusinessDateRange]
{
	businessDayConvention BusinessDayConventionEnum (1..1) <"The convention for adjusting a date if it would otherwise fall on a day that is not a business day.">;
		[synonym FpML value businessDayConvention]
	businessCenters BusinessCenters (0..1) <"The business center(s), specified either explicitly or by reference to those specified somewhere else in the instance document.">;
}

class BusinessDayAdjustments <"A class defining the business day convention and financial business centers used for adjusting any relevant date if it would otherwise fall on a day that is not a business day in the specified business center.">
	[synonym FpML value BusinessDayAdjustments]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	businessDayConvention BusinessDayConventionEnum (1..1) <"The convention for adjusting a date if it would otherwise fall on a day that is not a business day.">;
		[synonym FpML value businessDayConvention]
	businessCenters BusinessCenters (0..1) <"The business center(s), specified either explicitly or by reference to those specified somewhere else in the instance document.">;
}
	
class BuyerSeller <"This class corresponds to the FpML BuyerSeller.model construct.">
{
	buyerPartyReference string (1..1) reference <"A reference to the party that buys this instrument, i.e. pays for this instrument and receives the rights defined by it. See 2000 ISDA definitions Article 11.1 (b). In the case of FRAs this the fixed rate payer.">;
		[synonym FpML value buyerPartyReference]
	buyerAccountReference string (0..1) reference <"A reference to the account that buys this instrument.">;
	sellerPartyReference string (1..1) reference <"A reference to the party that sells ('writes') this instrument, i.e. that grants the rights defined by this instrument and in return receives a payment for it. See 2000 ISDA definitions Article 11.1 (a). In the case of FRAs this is the floating rate payer.">;
		[synonym FpML value sellerPartyReference]
	sellerAccountReference string (0..1) reference <"A reference to the account that sells this instrument.">;
}

class CalculationAgent <"A class defining the ISDA calculation agent responsible for performing duties as defined in the applicable product definitions.">
	[synonym FpML value CalculationAgent]
{
	calculationAgentPartyReference string (0..*) reference <"In FpML, a pointer style reference to a party identifier defined elsewhere in the document. The party referenced is the ISDA Calculation Agent for the trade. If more than one party is referenced then the parties are assumed to be co-calculation agents, i.e. they have joint responsibility.">;
		[synonym FpML value calculationAgentPartyReference pathExpression "trade.calculationAgent"]
		[synonym FpML value calculationAgentPartyReference pathExpression "calculationAgent"]
		[synonym FpML value calculationAgentPartyReference pathExpression "trade.swaption.calculationAgent"]
		[synonym FpML value calculationAgentPartyReference pathExpression "swaption.calculationAgent"]
	calculationAgentParty CalculationAgentPartyEnum (0..1) <"The ISDA calculation agent responsible for performing duties as defined in the applicable product definitions. For example, the Calculation Agent may be defined as being the Non-exercising Party.">;
		[synonym FpML value calculationAgentParty pathExpression "trade.calculationAgent"]
		[synonym FpML value calculationAgentParty pathExpression "calculationAgent"]
		[synonym FpML value calculationAgentParty pathExpression "trade.swaption.calculationAgent"]
		[synonym FpML value calculationAgentParty pathExpression "swaption.calculationAgent"]
	calculationAgentBusinessCenter BusinessCenterEnum (0..1) scheme "businessCenterScheme" <"The city in which the office through which ISDA Calculation Agent is acting for purposes of the transaction is located The short-form confirm for a trade that is executed under a Sovereign or Asia Pacific Master Confirmation Agreement ( MCA ), does not need to specify the Calculation Agent. However, the confirm does need to specify the Calculation Agent City. This is due to the fact that the MCA sets the value for Calculation Agent but does not set the value for Calculation Agent City.">;
		[synonym FpML value calculationAgentBusinessCenter pathExpression "trade"]
		[synonym FpML value calculationAgentBusinessCenter]
}

choice rule CalculationAgent_choice <"Choice rule to represent an FpML choice construct.">
	for CalculationAgent optional choice between
	calculationAgentPartyReference and calculationAgentParty

class CalculationPeriodFrequency extends Frequency <"A class to specify the frequency at which calculation period end dates occur within the regular part of the calculation period schedule and their roll date convention.">
	[synonym FpML value CalculationPeriodFrequency]
{
	rollConvention RollConventionEnum (1..1) <"Used in conjunction with a frequency and the regular period start date of a calculation period to determine the calculation period end date within the regular part of the calculation period.">;
		[synonym FpML value rollConvention pathExpression "calculationPeriodDates.calculationPeriodFrequency"]
		[synonym FpML value rollConvention pathExpression "periodicPayment"]
}

data rule FpML_ird_57 <"FpML validation rule ird-57 - Context: CalculationPeriodFrequency. [period eq ('M', 'Y')] not(rollConvention = ('NONE', 'SFE', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT','SUN')).">
	when CalculationPeriodFrequency -> period = PeriodExtendedEnum.M or CalculationPeriodFrequency -> period = PeriodExtendedEnum.Y
	then CalculationPeriodFrequency -> rollConvention <> RollConventionEnum.NONE
		or CalculationPeriodFrequency -> rollConvention <> RollConventionEnum.SFE
		or CalculationPeriodFrequency -> rollConvention <> RollConventionEnum.MON
		or CalculationPeriodFrequency -> rollConvention <> RollConventionEnum.TUE
		or CalculationPeriodFrequency -> rollConvention <> RollConventionEnum.WED
		or CalculationPeriodFrequency -> rollConvention <> RollConventionEnum.THU
		or CalculationPeriodFrequency -> rollConvention <> RollConventionEnum.FRI
		or CalculationPeriodFrequency -> rollConvention <> RollConventionEnum.SAT
		or CalculationPeriodFrequency -> rollConvention <> RollConventionEnum.SUN

data rule FpML_ird_58 <"FpML validation rule ird-58 - Context: CalculationPeriodFrequency. When the period is 'W', the rollConvention must be a week day, 'SFE' or 'NONE'.">
	when CalculationPeriodFrequency -> period = PeriodExtendedEnum.W
	then CalculationPeriodFrequency -> rollConvention = RollConventionEnum.NONE
		or CalculationPeriodFrequency -> rollConvention = RollConventionEnum.SFE
		or CalculationPeriodFrequency -> rollConvention = RollConventionEnum.MON
		or CalculationPeriodFrequency -> rollConvention = RollConventionEnum.TUE
		or CalculationPeriodFrequency -> rollConvention = RollConventionEnum.WED
		or CalculationPeriodFrequency -> rollConvention = RollConventionEnum.THU
		or CalculationPeriodFrequency -> rollConvention = RollConventionEnum.FRI
		or CalculationPeriodFrequency -> rollConvention = RollConventionEnum.SAT
		or CalculationPeriodFrequency -> rollConvention = RollConventionEnum.SUN

data rule FpML_ird_60 <"FpML validation rule ird-60 - Context: CalculationPeriodFrequency. When the period is 'T', the rollConvention must be 'NONE'.">
	when CalculationPeriodFrequency -> period = PeriodExtendedEnum.T
	then CalculationPeriodFrequency -> rollConvention = RollConventionEnum.NONE

class CashSettlementReferenceBanks <"A class defining the list of reference institutions polled for relevant rates or prices when determining the cash settlement amount for a product where cash settlement is applicable.">
	[synonym FpML value CashSettlementReferenceBanks]
{
	referenceBank ReferenceBank (1..*) <"An institution (party) identified by means of a coding scheme and an optional name.">;
		[synonym FpML value referenceBank]
}

class Collateral <"A type for defining the obligations of the counterparty subject to credit support requirements.">
	[synonym FpML value Collateral]
{
	independentAmount IndependentAmount (1..1) <"Independent Amount is an amount that usually less creditworthy counterparties are asked to provide. It can either be a fixed amount or a percentage of the Transaction's value. The Independent Amount can be: (i) transferred before any trading between the parties occurs (as a deposit at a third party's account or with the counterparty) or (ii) callable after trading has occurred (typically because a downgrade has occurred). In situation (i), the Independent Amount is not included in the calculation of Exposure, but in situation (ii), it is included in the calculation of Exposure. Thus, for situation (ii), the Independent Amount may be transferred along with any collateral call. Independent Amount is a defined term in the ISDA Credit Support Annex. ('with respect to a party, the amount specified as such for that party in Paragraph 13; if no amount is specified, zero').">;
		[synonym FpML value independentAmount]
}

class ContractualMatrix
	[synonym FpML value ContractualMatrix]
{
	matrixType MatrixTypeEnum (1..1) scheme "matrixTypeScheme" <"Identifies the form of applicable matrix.">;
		[synonym FpML value matrixType]
	publicationDate date (0..1) <"Specifies the publication date of the applicable version of the matrix. When this element is omitted, the ISDA supplemental language for incorporation of the relevant matrix will generally define rules for which version of the matrix is applicable.">;
		[synonym FpML value publicationDate]
	matrixTerm MatrixTermEnum (0..1) scheme "matrixTermScheme" <"Defines any applicable key into the relevant matrix. For example, the Transaction Type would be the single term required for the Credit Derivatives Physical Settlement Matrix. This element should be omitted in the case of the 2000 ISDA Definitions Settlement Matrix for Early Termination and Swaptions.">;
		[synonym FpML value matrixTerm]
}

class ContractualTermsSupplement <"A contractual supplement (such as those published by ISDA) and its publication date that will apply to the trade.">
	[synonym FpML value ContractualTermsSupplement]
{
	type ContractualSupplementEnum (1..1) scheme "contractualSupplementScheme" <"Identifies the form of applicable contractual supplement.">;
		[synonym FpML value type]
	publicationDate date (0..1) <"Specifies the publication date of the applicable version of the contractual supplement.">;
		[synonym FpML value publicationDate]
}

class CreditSupportAgreement <"The agreement executed between the parties and intended to govern collateral arrangement for all OTC derivatives transactions between those parties.">
	[synonym FpML value CreditSupportAgreement]
{
	type CreditSupportAgreementTypeEnum (1..1) scheme "creditSupportAgreementTypeScheme" <"The type of ISDA Credit Support Agreement.">;
		[synonym FpML value type]
	date date (1..1) <"The date of the agreement executed between the parties and intended to govern collateral arrangements for all OTC derivatives transactions between those parties.">;
		[synonym FpML value date]
	identifierValue string (0..1) <"An identifier used to uniquely identify the CSA. FpML specifies the type as creditSupportAgreementIdScheme, but without proposing any value.  As far as e understand, no scheme has yet been developed at this point.">;
		[synonym FpML value identifier]
}

class DateRange <"A class defining a contiguous series of calendar dates. The date range is defined as all the dates between and including the first and the last date. The first date must fall before the last date.">
	[synonym FpML value DateRange]
{
	unadjustedFirstDate date (1..1) <"The first date of a date range.">;
		[synonym FpML value unadjustedFirstDate]
	unadjustedLastDate date (1..1) <"The last date of a date range.">;
		[synonym FpML value unadjustedLastDate]
}

class DateInstances <"A class to provide for the ability to specify a date alongside with prior instance(s) of that date. This is to provide for the ability to indicated the prior trade date and effective trade of a novated trade.">
{
	id string (0..1) anchor;
		[synonym FpML value id pathExpression "trade.tradeHeader.tradeDate"]
		[synonym FpML value id pathExpression "tradeHeader.tradeDate"]
		[synonym FpML value id pathExpression "trade.tradeHeader.effectiveDate"]
		[synonym FpML value id pathExpression "tradeHeader.effectiveDate"]
	date date (0..1) <"Specification of the current date when expressed as a date, such as the trade date.">;
		[synonym FpML value tradeDate pathExpression "trade.tradeHeader"]
		[synonym FpML value tradeDate pathExpression "tradeHeader"]
	adjustableDate AdjustableDate (0..1) <"Specification of the current date when expressed as an adjustable date, such as the effective date.">;
		[synonym FpML value effectiveDate pathExpression "calculationPeriodDates"]
		[synonym FpML value effectiveDate]
	priorDateInstance PriorDateInstance (0..*) <"Specification of the prior date instance, when applicable, alongside with the ability to associate a contract reference to that date.">;
}

choice rule DateInstances_choice <"The date associated with the DateInstances class needs to be expressed either as a date or an adjustableDate.">
	for DateInstances required choice between
	date and adjustableDate

class DateList <"List of dates.">
	[synonym FpML value DateList]
{
	date date (1..*);
		[synonym FpML value date]
}

class DateTimeList <"List of dateTimes.">
	[synonym FpML value DateTimeList]
{
	dateTime dateTime (1..*);
		[synonym FpML value dateTime]
}

class Documentation <"A class for defining the definitions that govern the document and should include the year and type of definitions referenced, along with any relevant documentation (such as master agreement) and the date it was signed.">
	[synonym FpML value Documentation]
{
	masterAgreement MasterAgreement (0..1) <"The agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.">;
		[synonym FpML value masterAgreement]
	masterConfirmation MasterConfirmation (0..1);
		[synonym FpML value masterConfirmation]
	brokerConfirmation BrokerConfirmation (0..1) <"Specifies the details for a broker confirm.">;
		[synonym FpML value brokerConfirmation]
	contractualDefinitions ContractualDefinitionsEnum (0..*) scheme "contractualDefinitionsScheme" <"The definitions such as those published by ISDA that will define the terms of the trade.">;
		[synonym FpML value contractualDefinitions]
	contractualTermsSupplement ContractualTermsSupplement (0..*) <"A contractual supplement (such as those published by ISDA) that will apply to the trade.">;
		[synonym FpML value contractualTermsSupplement]
	contractualMatrix ContractualMatrix (0..*) <"A reference to a contractual matrix of elected terms/values (such as those published by ISDA) that shall be deemed to apply to the trade. The applicable matrix is identified by reference to a name and optionally a publication date. Depending on the structure of the matrix, an additional term (specified in the matrixTerm element) may be required to further identify a subset of applicable terms/values within the matrix.">;
		[synonym FpML value contractualMatrix]
	creditSupportAgreement CreditSupportAgreement (0..1) <"The agreement executed between the parties and intended to govern collateral arrangement for all OTC derivatives transactions between those parties.">;
		[synonym FpML value creditSupportAgreement]
	otherAgreement OtherAgreement (0..*) <"Any other agreement executed between the parties.">;
		[synonym FpML value otherAgreement]
	attachment Resource (0..*) <"A human readable document related to this transaction, for example a confirmation.">;
		[synonym FpML value attachment]
}

choice rule Documentation_choice <"Choice rule to represent an FpML choice construct.">
	for Documentation optional choice between
	masterConfirmation and brokerConfirmation

class EuropeanExercise <"A class defining the exercise period for a European style option together with any rules governing the notional amount of the underlying which can be exercised on any given exercise date and any associated exercise fees.">
	[synonym FpML value EuropeanExercise]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	expirationDate AdjustableOrRelativeDate (1..1) <"The last day within an exercise period for an American style option. For a European style option it is the only day within the exercise period.">;
		[synonym FpML value expirationDate]
	relevantUnderlyingDate AdjustableOrRelativeDates (0..1) <"The date on the underlying set by the exercise of an option. What this date is depends on the option (e.g. in a swaption it is the swap effective date, in an extendible/cancelable provision it is the swap termination date).">;
		[synonym FpML value relevantUnderlyingDate]
	earliestExerciseTime BusinessCenterTime (1..1) <"The earliest time at which notice of exercise can be given by the buyer to the seller (or seller's agent) on the expiration date.">;
		[synonym FpML value earliestExerciseTime]
	expirationTime BusinessCenterTime (1..1) <"The latest time for exercise on expirationDate.">;
		[synonym FpML value expirationTime]
	partialExercise PartialExercise (0..1) <"As defined in the 2000 ISDA Definitions, Section 12.3. Partial Exercise, the buyer of the option has the right to exercise all or less than all the notional amount of the underlying swap on the expiration date, but may not exercise less than the minimum notional amount, and if an integral multiple amount is specified, the notional amount exercised must be equal to, or be an integral multiple of, the integral multiple amount.">;
		[synonym FpML value partialExercise]
	exerciseFee ExerciseFee (0..1) <"A fee to be paid on exercise. This could be represented as an amount or a rate and notional reference on which to apply the rate.">;
		[synonym FpML value exerciseFee]
}

/*
 * In the below notional has been changed to be of type NotionalSchedule
 */
class ExerciseFee extends BuyerSeller <"A class defining the fee payable on exercise of an option. This fee may be defined as an amount or a percentage of the notional exercised. As a difference with FpML, it extends the BuyerSeller class.">
	[synonym FpML value ExerciseFee]
{
	notionalReference string (1..1) reference <"A pointer style reference to the associated notional schedule defined elsewhere in the document.">;
		[synonym FpML value notionalReference]
	feeAmount number (0..1) <"The amount of fee to be paid on exercise. The fee currency is that of the referenced notional.">;
		[synonym FpML value feeAmount]
	feeRate number (0..1) <"A fee represented as a percentage of some referenced notional. A percentage of 5% would be represented as 0.05.">;
		[synonym FpML value feeRate]
	feePaymentDate RelativeDateOffset (1..1) <"The date on which exercise fee(s) will be paid. It is specified as a relative date.">;
		[synonym FpML value feePaymentDate]
}

choice rule ExerciseFee_choice <"Choice rule to represent an FpML choice construct.">
	for ExerciseFee required choice between  
		feeAmount and feeRate
/*
 * In the below notional has been changed to be of type NotionalSchedule
 */	
class ExerciseFeeSchedule extends PayerReceiver <"A class to define a fee or schedule of fees to be payable on the exercise of an option. This fee may be defined as an amount or a percentage of the notional exercised. As a difference with FpML, it extends the BuyerSeller class.">
	[synonym FpML value ExerciseFeeSchedule]
{
	notionalReference string (1..1) reference <"A pointer style reference to the associated notional schedule defined elsewhere in the document.">;
		[synonym FpML value notionalReference]
	feeAmountSchedule AmountSchedule (0..1) <"The exercise fee amount schedule. The fees are expressed as currency amounts. The currency of the fee is assumed to be that of the notional schedule referenced.">;
		[synonym FpML value feeAmountSchedule]
	feeRateSchedule Schedule (0..1) <"The exercise free rate schedule. The fees are expressed as percentage rates of the notional being exercised. The currency of the fee is assumed to be that of the notional schedule referenced.">;
		[synonym FpML value feeRateSchedule]
	feePaymentDate RelativeDateOffset (1..1) <"The date on which exercise fee(s) will be paid. It is specified as a relative date.">;
		[synonym FpML value feePaymentDate]
}

choice rule ExerciseFeeSchedule_choice <"Choice rule to represent an FpML choice construct.">
	for ExerciseFeeSchedule required choice between
	feeAmountSchedule and feeRateSchedule

class ExerciseNotice <"A class defining to whom and where notice of execution should be given. The partyReference refers to one of the principal parties of the trade. If present the exerciseNoticePartyReference refers to a party, other than the principal party, to whom notice should be given.">
	[synonym FpML value ExerciseNotice]
{
	partyReference string (1..1) reference <"The party referenced has allocated the trade identifier.">;
		[synonym FpML value partyReference]
	exerciseNoticePartyReference string (0..1) reference <"The party referenced is the party to which notice of exercise should be given by the buyer.">;
		[synonym FpML value exerciseNoticePartyReference]
	businessCenter BusinessCenterEnum (1..1) scheme "businessCenterScheme" <"The business center.">;
		[synonym FpML value businessCenter]
}

class ExerciseProcedure <"A class describing how notice of exercise should be given. This can be either manual or automatic.">
	[synonym FpML value ExerciseProcedure]
{
	manualExercise ManualExercise (0..1) <"Specifies that the notice of exercise must be given by the buyer to the seller or seller's agent.">;
		[synonym FpML value manualExercise]
	automaticExercise AutomaticExercise (0..1) <"If automatic is specified, then the notional amount of the underlying swap not previously exercised under the swaption will be automatically exercised at the expiration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than the specified threshold rate. The term in-the-money is assumed to have the meaning defining in the 2000 ISDA Definitions, Section 17.4 In-the-money.">;
		[synonym FpML value automaticExercise]
	followUpConfirmation boolean (1..1) <"A flag to indicate whether follow-up confirmation of exercise (written or electronic) is required following telephonic notice by the buyer to the seller or seller's agent.">;
		[synonym FpML value followUpConfirmation]
	limitedRightToConfirm boolean (0..1) <"Has the meaning defined as part of the 1997 ISDA Government Bond Option Definitions, section 4.5 Limited Right to Confirm Exercise. If present, (i) the Seller may request the Buyer to confirm its intent if not done on or before the expiration time on the Expiration date (ii) specific rules will apply in relation to the settlement mode.">;
		[synonym FpML value limitedRightToConfirm]
	splitTicket boolean (0..1) <"Typically applicable to the physical settlement of bond and convertible bond options. If present, means that the party required to deliver the bonds will divide those to be delivered as notifying party desires to facilitate delivery obligations.">;
		[synonym FpML value splitTicket]
}

choice rule ExerciseProcedure_choice <"Choice rule to represent an FpML choice construct.">
	for ExerciseProcedure required choice between
	manualExercise and automaticExercise

class FloatingRate <"A class defining a floating rate.">
	[synonym FpML value FloatingRate]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	floatingRateIndex FloatingRateIndexEnum (1..1) scheme "floatingRateIndexScheme" <"The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05.">;
		[synonym FpML value floatingRateIndex]
	indexTenor Period (0..1) <"The ISDA Designated Maturity, i.e. the tenor of the floating rate. A FRA can contain either one or two indexTenor instances.">;
		[synonym FpML value indexTenor]
	floatingRateMultiplierSchedule Schedule (0..1) <"A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.">;
		[synonym FpML value floatingRateMultiplierSchedule]
	spreadSchedule SpreadSchedule (0..*) <"The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.">;
		[synonym FpML value spreadSchedule]
	rateTreatment RateTreatmentEnum (0..1) <"The specification of any rate conversion which needs to be applied to the observed rate before being used in any calculations. The two common conversions are for securities quoted on a bank discount basis which will need to be converted to either a Money Market Yield or Bond Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraphs (g) and (h) for definitions of these terms.">;
		[synonym FpML value rateTreatment]
	capRateSchedule StrikeSchedule (0..*) <"The cap rate or cap rate schedule, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. A cap rate schedule is expressed as explicit cap rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.">;
		[synonym FpML value capRateSchedule]
	floorRateSchedule StrikeSchedule (0..*) <"The floor rate or floor rate schedule, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. A floor rate schedule is expressed as explicit floor rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.">;
		[synonym FpML value floorRateSchedule]
}

data rule FloatingRate_floatingRateMultiplierSchedule <"FpML specifies that the floatingRateMultiplierSchedule should only be included if the multiplier is not equal to 1 for the term of the stream.">
	when FloatingRate -> floatingRateMultiplierSchedule exists
	then FloatingRate -> floatingRateMultiplierSchedule -> initialValue <> 1.0

class FloatingRateCalculation extends FloatingRate <"A type defining the floating rate and definitions relating to the calculation of floating rate amounts.">
	[synonym FpML value FloatingRateCalculation]
{
	initialRate number (0..1) <"The initial floating rate reset agreed between the principal parties involved in the trade. This is assumed to be the first required reset rate for the first regular calculation period. It should only be included when the rate is not equal to the rate published on the source implied by the floating rate index. An initial rate of 5% would be represented as 0.05.">;
		[synonym FpML value initialRate]
	finalRateRounding Rounding (0..1) <"The rounding convention to apply to the final rate used in determination of a calculation period amount.">;
		[synonym FpML value finalRateRounding]
	averagingMethod AveragingMethodEnum (0..1) <"If averaging is applicable, this component specifies whether a weighted or unweighted average method of calculation is to be used. The component must only be included when averaging applies.">;
		[synonym FpML value averagingMethod]
	negativeInterestRateTreatment NegativeInterestRateTreatmentEnum (0..1) <"The specification of any provisions for calculating payment obligations when a floating rate is negative (either due to a quoted negative floating rate or by operation of a spread that is subtracted from the floating rate).">;
		[synonym FpML value negativeInterestRateTreatment]
}

class Frequency <"A class defining a time frequency, e.g. one day, three months. Used for specifying payment or calculation frequencies at which the value T (Term) is applicable.">
	[synonym FpML value Frequency]
{
	id string (0..1) anchor;
		[synonym FpML value id]
		[synonym FpML value id pathExpression "calculationPeriodDates.calculationPeriodFrequency"]
	periodMultiplier int (1..1) <"A time period multiplier, e.g. 1, 2, or 3.  If the period value is T (Term) then period multiplier must contain the value 1.">;
		[synonym FpML value periodMultiplier]
		[synonym FpML value periodMultiplier pathExpression "calculationPeriodDates.calculationPeriodFrequency"]
	period PeriodExtendedEnum (1..1) <"A time period, e.g. a day, week, month, year or term of the stream.">;
		[synonym FpML value period]
		[synonym FpML value period pathExpression "calculationPeriodDates.calculationPeriodFrequency"]
}

data rule Frequency_period <"FpML specifies that if period value is T (Term) then periodMultiplier must contain the value 1.">
	when Frequency -> period = PeriodExtendedEnum.T
	then Frequency -> periodMultiplier = 1
	
data rule Frequency_periodMultiplier <"FpML specifies periodMultiplier as a positive integer.">
	when Frequency exists
	then Frequency -> periodMultiplier >= 0

class FutureValueAmount extends Money <"A type defining a currency amount as at a future value date.">
	[synonym FpML value FutureValueAmount]
{
	calculationPeriodNumberOfDays int (1..1) <"The number of days from the adjusted calculation period start date to the adjusted value date, calculated in accordance with the applicable day count fraction.">;
		[synonym FpML value calculationPeriodNumberOfDays]
	valueDate date (1..1) <"Adjusted value date of the future value amount.">;
		[synonym FpML value valueDate]
}

data rule FutureValueAmount_nonNegativeAmount <"In FpML the type FutureValueAmount extends NonNegativeMoney.">
	when FutureValueAmount exists
	then FutureValueAmount -> amount >= 0.0

data rule FutureValueAmount_calculationPeriodNumberOfDays <"FpML specifies calculationPeriodNumberOfDays as a positiveInteger.">
	when FutureValueAmount exists
	then FutureValueAmount -> calculationPeriodNumberOfDays >= 0

class FxRate <"A type describing the rate of a currency conversion: pair of currency, quotation mode and exchange rate.">
	[synonym FpML value FxRate]
{
	quotedCurrencyPair QuotedCurrencyPair (1..1) <"Defines the two currencies for an FX trade and the quotation relationship between the two currencies.">;
		[synonym FpML value quotedCurrencyPair]
	rate number (0..1) <"The rate of exchange between the two currencies of the leg of a deal. Must be specified with a quote basis.">;
		[synonym FpML value rate]
}

class FxSpotRateSource <"A class defining the rate source and fixing time for an FX rate.">
	[synonym FpML value FxSpotRateSource]
{
	primaryRateSource InformationSource (1..1) <"The primary source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.">;
		[synonym FpML value primaryRateSource]
	secondaryRateSource InformationSource (0..1) <"An alternative, or secondary, source for where the rate observation will occur. Will typically be either a page or a reference bank published rate.">;
		[synonym FpML value secondaryRateSource]
	fixingTime BusinessCenterTime (0..1) <"The time at which the spot currency exchange rate will be observed. It is specified as a time in a business day calendar location, e.g. 11:00am London time.">;
		[synonym FpML value fixingTime]
}

class IndependentAmount extends PayerReceiver
	[synonym FpML value IndependentAmount]
{
	paymentDetail PaymentDetail (1..*) <"A container element allowing a schedule of payments associated with the Independent Amount.">;
		[synonym FpML value paymentDetail]
}

class InformationSource <"A class defining the source for a piece of information (e.g. a rate refix or an FX fixing). The attribute names have been adjusted from FpML to address the fact that the information is not limited to rates.">
	[synonym FpML value InformationSource]
{
	sourceProvider InformationProviderEnum (1..1) scheme "informationProviderScheme" <"An information source for obtaining a market data point. For example Bloomberg, Reuters, Telerate etc.">;
		[synonym FpML value rateSource]
		[synonym FIX value RateSource tag 1446]
	sourcePage string (0..1) scheme "rateSourcePageScheme" <"A specific page for the source for obtaining a market data point. In FpML, this is specified as a scheme, rateSourcePageScheme, for which no coding Scheme or URI is specified.">;
		[synonym FpML value rateSourcePage]
	sourcePageHeading string (0..1) <"The heading for the source on a given source page.">;
		[synonym FpML value rateSourcePageHeading]
}

class InitialFixingDate one of <"A CDM class which purpose is to specify the initial fixing date either alongside the FpML interest rate specification as an offset of another date, or alongside the credit derivative specification as an unadjusted date.">
{
	relativeDateOffset RelativeDateOffset (0..1);
		[synonym FpML value initialFixingDate pathExpression "resetDates"]
	initialFixingDate date (0..1);
		[synonym FpML value initialFixingDate pathExpression "periodicPayment.floatingAmountCalculation"]
}

class IssuerTradeId <"A class for a two-parts identifier, such as a USI.">
	[synonym FpML value IssuerTradeId]
{
	issuer string (1..1) scheme "issuerIdScheme" <"The party that assigns the trade identifier.">;
		[synonym FpML value issuer]
	identifier string (0..1) anchor scheme "tradeIdScheme" <"The identifier value. The CDM uses a neutral identifier attribute name rather than the FpML trade qualifier because of the focus that includes the pre-execution lifecycle, at which point a trade doesn't exist yet.">;
		[synonym FpML value tradeId]
}

class ManualExercise <"A class defining manual exercise, i.e. that the option buyer counterparty must give notice to the option seller of exercise.">
	[synonym FpML value ManualExercise]
{
	exerciseNotice ExerciseNotice (0..1) <"Definition of the party to whom notice of exercise should be given.">;
		[synonym FpML value exerciseNotice]
	fallbackExercise boolean (0..1) <"If fallback exercise is specified then the notional amount of the underlying swap, not previously exercised under the swaption, will be automatically exercised at the expiration time on the expiration date if at such time the buyer is in-the-money, provided that the difference between the settlement rate and the fixed rate under the relevant underlying swap is not less than one tenth of a percentage point (0.10% or 0.001). The term in-the-money is assumed to have the meaning defined in the 2000 ISDA Definitions, Section 17.4. In-the-money.">;
		[synonym FpML value fallbackExercise]
}

class MasterAgreement <"A class for defining the agreement executed between the parties and intended to govern all OTC derivatives transactions between those parties.">
	[synonym FpML value MasterAgreement]
{
	masterAgreementId string (0..1) scheme "masterAgreementIdScheme" <"An identifier that has been created to identify the master agreement.">;
		[synonym FpML value masterAgreementId]
	masterAgreementType MasterAgreementTypeEnum (1..1) scheme "masterAgreementTypeScheme" <"The agreement executed between the parties and intended to govern product-specific derivatives transactions between those parties.">;
		[synonym FpML value masterAgreementType]
	masterAgreementVersion string (0..1) scheme "masterAgreementVersionScheme" <"The version of the master agreement.">;
		[synonym FpML value masterAgreementVersion]
	masterAgreementDate date (0..1) <"The date on which the master agreement was signed.">;
		[synonym FpML value masterAgreementDate]
}

class MasterConfirmation <"A class for defining the master confirmation agreement executed between the parties.">
	[synonym FpML value MasterConfirmation]
{
	masterConfirmationType MasterConfirmationTypeEnum (1..1) scheme "masterConfirmationTypeScheme" <"The type of master confirmation executed between the parties.">;
		[synonym FpML value masterConfirmationType]
	masterConfirmationDate date (1..1) <"The date of the confirmation executed between the parties and intended to govern all relevant transactions between those parties.">;
		[synonym FpML value masterConfirmationDate]
	masterConfirmationAnnexDate date (0..1) <"The date that an annex to the master confirmation was executed between the parties.">;
		[synonym FpML value masterConfirmationAnnexDate]
	masterConfirmationAnnexType MasterConfirmationAnnexTypeEnum (0..1) scheme "masterConfirmationAnnexTypeScheme" <"The type of master confirmation annex executed between the parties.">;
		[synonym FpML value masterConfirmationAnnexType]
}

class Money <"A class defining a currency amount.">
	[synonym FpML value Money]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	currency string (1..1) scheme "currencyScheme" <"The currency in which an amount is denominated.">;
		[synonym FpML value currency]
		[synonym FpML value currency pathExpression "paymentAmount"]
		[synonym FpML value currency pathExpression "fixedAmount"]
	amount number (1..1) <"The monetary quantity in currency units.">;
		[synonym FpML value amount]
		[synonym FpML value amount pathExpression "notionalAmount"]
		[synonym FpML value amount pathExpression "paymentAmount"]
		[synonym FpML value amount pathExpression "fixedAmount"]
}

class MultipleExercise extends PartialExercise one of <"A class defining multiple exercises. As defined in the 2000 ISDA Definitions, Section 12.4. Multiple Exercise, the buyer of the option has the right to exercise all or less than all the unexercised notional amount of the underlying swap on one or more days in the exercise period, but on any such day may not exercise less than the minimum notional amount or more than the maximum notional amount, and if an integral multiple amount is specified, the notional exercised must be equal to or, be an integral multiple of, the integral multiple amount. In FpML, MultipleExercise is built upon the PartialExercise.model.">
	[synonym FpML value MultipleExercise]
{
	maximumNotionalAmount number (0..1) <"The maximum notional amount that can be exercised on a given exercise date.">;
		[synonym FpML value maximumNotionalAmount]
	maximumNumberOfOptions number (0..1) <"The maximum number of options that can be exercised on a given exercise date. If the number is not specified, it means that the maximum number of options corresponds to the remaining unexercised options.">;
		[synonym FpML value maximumNumberOfOptions]
}

data rule MultipleExercise_maximumNumberOfOptions <"FpML MultipleExercise construct specifies the minimumNumberOfOptions as a positive integer.">
	when MultipleExercise -> maximumNumberOfOptions exists
	then MultipleExercise -> maximumNotionalAmount >= 0.0

class NonNegativeAmountSchedule extends NonNegativeSchedule <"A class defining a currency amount or a currency amount schedule.">
	[synonym FpML value NonNegativeAmountSchedule]
{
	currency string (1..1) scheme "currencyScheme" <"The currency in which an amount is denominated.">;
		[synonym FpML value currency]
}

class NonNegativeSchedule <"A class defining a schedule of non-negative rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.">
	[synonym FpML value NonNegativeSchedule pathExpression "notionalStepSchedule"]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	initialValue number (1..1) <"The non-negative initial rate or amount, as the case may be. An initial rate of 5% would be represented as 0.05.">;
		[synonym FpML value initialValue]
	step NonNegativeStep (0..*) <"The schedule of step date and non-negative value pairs. On each step date the associated step value becomes effective. A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.">;
		[synonym FpML value step]
}

data rule NonNegativeSchedule_initialValue <"FpML specified initialValue as a NonNegativeDecimal.">
	when NonNegativeSchedule exists
	then NonNegativeSchedule -> initialValue >= 0.0

class NonNegativeStep <"A class defining a step date and non-negative step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortisation or a step-up coupon schedule.">
	[synonym FpML value NonNegativeStep]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	stepDate date (1..1) <"The date on which the associated stepValue becomes effective. This day may be subject to adjustment in accordance with a business day convention.">;
		[synonym FpML value stepDate]
	stepValue number (1..1) <"The non-negative rate or amount which becomes effective on the associated stepDate. A rate of 5% would be represented as 0.05.">;
		[synonym FpML value stepValue]
}

data rule NonNegativeStep_stepValue <"FpML specified stepValue as a NonNegativeDecimal.">
	when NonNegativeStep exists
	then NonNegativeStep -> stepValue >= 0.0

class Offset extends Period <"A class defining an offset used in calculating a new date relative to a reference date, e.g. calendar days, business days, commodity Business days, etc.">
	[synonym FpML value Offset]
{
	dayType DayTypeEnum (0..1) <"In the case of an offset specified as a number of days, this element defines whether consideration is given as to whether a day is a good business day or not. If a day type of business days is specified then non-business days are ignored when calculating the offset. The financial business centers to use for determination of business days are implied by the context in which this element is used. This element must only be included when the offset is specified as a number of days. If the offset is zero days then the dayType element should not be included.">;
		[synonym FpML value dayType]
}

data rule Offset_DayType <"FpML specifies that the dayType must only be included when the offset is specified as a number of days, while should not be included if the offset is zero days.">
	when Offset -> period <> PeriodEnum.D 
		or Offset -> periodMultiplier = 0
	then Offset -> dayType is absent

class OptionPhysicalSettlement
	[synonym FpML value SwaptionPhysicalSettlement]
{
	clearedPhysicalSettlement boolean (1..1) <"Specifies whether the swap resulting from physical settlement of the swaption transaction will clear through a clearing house. The meaning of Cleared Physical Settlement is defined in the 2006 ISDA Definitions, Section 15.2 (published in Supplement number 28).">;
		[synonym FpML value clearedPhysicalSettlement]
	predeterminedClearingOrganizationPartyReference string (0..1) reference <"A reference to the clearing organisation (CCP, DCO) to which the trade should be cleared.">;
		[synonym FpML value predeterminedClearingOrganizationPartyReference]
}

class OtherAgreement <"A class for defining the an agreement executed between parties.">
	[synonym FpML value OtherAgreement]
{
	identifier string (0..1) scheme "agreementIdScheme" <"An identifier that has been created to identify the agreement.">;
		[synonym FpML value identifier]
	type string (1..1) scheme "agreementTypeScheme" <"The agreement executed between the parties and intended to govern product-specific derivatives transactions between those parties.">;
		[synonym FpML value type]
	version string (0..1) scheme "agreementVersionScheme" <"The version of the agreement.">;
		[synonym FpML value version]
	date date (0..1) <"The date on which the agreement was signed.">;
		[synonym FpML value date]
}

class PartialExercise <"A class defining partial exercise. As defined in the 2000 ISDA Definitions, Section 12.3 Partial Exercise, the buyer of the option may exercise all or less than all the notional amount of the underlying swap but may not be less than the minimum notional amount (if specified) and must be an integral multiple of the integral multiple amount if specified.">
	[synonym FpML value PartialExercise]
{
	notionaReference string (1..1) reference <"A pointer style reference to the associated notional schedule defined elsewhere in the document. This element has been made optional as part of its integration in the OptionBaseExtended, because not required for the options on securities.">;
		[synonym FpML value notionalReference]
	integralMultipleAmount number (0..1) <"A notional amount which restricts the amount of notional that can be exercised when partial exercise or multiple exercise is applicable. The integral multiple amount defines a lower limit of notional that can be exercised and also defines a unit multiple of notional that can be exercised, i.e. only integer multiples of this amount can be exercised.">;
		[synonym FpML value integralMultipleAmount]
	minimumNotionalAmount number (0..1) <"The minimum notional amount that can be exercised on a given exercise date. See multipleExercise.">;
		[synonym FpML value minimumNotionalAmount]
	minimumNumberOfOptions int (0..1) <"The minimum number of options that can be exercised on a given exercise date.">;
		[synonym FpML value minimumNumberOfOptions]
}

choice rule PartialExercise_choice <"Choice rule to represent an FpML choice construct.">
	for PartialExercise required choice between
		minimumNotionalAmount and minimumNumberOfOptions

data rule MinimumNumberOfOptions_minimumNumberOfOptions <"FpML MultipleExercise construct specifies the minimumNumberOfOptions as a positive integer.">
	when MultipleExercise -> minimumNumberOfOptions exists
	then MultipleExercise -> minimumNumberOfOptions >= 0

class PayerReceiver <"A class to represent the FpML PayerReceiver.model.">
{
	payerPartyReference string (1..1) reference <"A reference to the party responsible for making the payments defined by this structure.">;
		[synonym FpML value payerPartyReference]
		[synonym FpML value buyerPartyReference]
	payerAccountReference string (0..1) reference <"A reference to the account responsible for making the payments defined by this structure.">;
		[synonym FpML value payerAccountReference]
	receiverPartyReference string (1..1) reference <"A reference to the party that receives the payments corresponding to this structure.">;
		[synonym FpML value receiverPartyReference]
		[synonym FpML value sellerPartyReference]
	receiverAccountReference string (0..1) reference <"A reference to the account that receives the payments corresponding to this structure.">;
		[synonym FpML value receiverAccountReference]
}

class Payment extends CashflowBase rosettaKey <"A class for defining payments, an artefact to be used as the input to a payment system or the outcome of it, and is to be distinguished from a cashflow, which is the raw outcome of a calculation or some other assessment. Rosetta extends the FpML Payment type for the purpose of supporting premium payment, by adding the premiumExpression and the paymentDiscounting attributes.">
{
	paymentAmount Money (1..1) <"The currency amount of the payment.">;
	paymentDate AdjustableOrAdjustedOrRelativeDate (0..1) <"The payment date. While FpML specifies this element to be of type AdjustableOrAdjustedDate, Rosetta uses the AdjustableOrAdjustedOrRelativeDate to accommodate the credit default swap option premium, which uses the relative date construct.">;
	paymentType PaymentTypeEnum (0..1);
		[synonym Rosetta_Workbench value paymentType]
}

data rule Payment_paymentflowAmount <"FpML specifies paymentAmount as a NonNegativeMoney type. The direction is indeed implied by the payer/receiver attribute.">
	when Payment -> paymentAmount exists
	then Payment -> paymentAmount -> amount >= 0.0

class PaymentDetail
	[synonym FpML value PaymentDetail]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	paymentDate AdjustableOrAdjustedDate (0..1);
		[synonym FpML value paymentDate]
	paymentRule PaymentRule (1..1) <"The calculation rule.">;
		[synonym FpML value paymentRule]	
	paymentAmount Money (0..1) <"A fixed payment amount.">;
		[synonym FpML value paymentAmount]
}

class PaymentDiscounting <"This class corresponds to the FpML PaymentDiscounting.model group for representing the discounting elements that can be associated with a payment.">
{
	discountFactor number (0..1) <"The value representing the discount factor used to calculate the present value of the cash flow.">;
		[synonym FpML value discountFactor]
	presentValueAmount Money (0..1) <"The amount representing the present value of the forecast payment.">;
		[synonym FpML value presentValueAmount]
}

class PaymentRule <"A class defining the payment calculation rule. As of FpML 5.10, percentage rule is the only calculation rule that has been specified as part of the standard.">
	[synonym FpML value PaymentRule]
{
	percentageRule PercentageRule (0..1) <"This attribute is not present as part of the FpML construct, as the payment rule is specialised by means of runtime type extension through the xsi:type.">;
}

class Period <"A class to define recurring periods or time offsets.">
	[synonym FpML value Period]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	periodMultiplier int (1..1) <"A time period multiplier, e.g. 1, 2 or 3 etc. A negative value can be used when specifying an offset relative to another date, e.g. -2 days.">;
		[synonym FpML value periodMultiplier]
	period PeriodEnum (1..1) <"A time period, e.g. a day, week, month or year of the stream. If the periodMultiplier value is 0 (zero) then period must contain the value D (day).">;
		[synonym FpML value period]
}

data rule Period_period <"FpML specifies that if the periodMultiplier value is 0 (zero) then period must contain the value D (day).">
	when Period -> periodMultiplier = 0
	then Period -> period = PeriodEnum.D

class PremiumExpression <"This class corresponds to the FpML Premium.model group for representing the option premium when expressed in a way other than an amount.">
{
	premiumType PremiumTypeEnum (0..1) <"Forward start premium type">;
		[synonym FpML value premiumType]
	/*
	 * Is the premiumType usage intended to be limited to forward start options?  
	 * See some further comments/questions associated with the PremiumTypeEnum
	 */
	 pricePerOption Money (0..1) <"The amount of premium to be paid expressed as a function of the number of options.">;
	 	[synonym FpML value pricePerOption]
	 percentageOfNotional number (0..1) <"The amount of premium to be paid expressed as a percentage of the notional value of the transaction. A percentage of 5% would be expressed as 0.05.">;
	 	[synonym FpML value percentageOfNotional]
}

class PrincipalExchanges <"A class defining which principal exchanges occur for the stream.">
	[synonym FpML value PrincipalExchanges]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	initialExchange boolean (1..1) <"A true/false flag to indicate whether there is an initial exchange of principal on the effective date.">;
		[synonym FpML value initialExchange]
	finalExchange boolean (1..1) <"A true/false flag to indicate whether there is a final exchange of principal on the termination date.">;
		[synonym FpML value finalExchange]
	intermediateExchange boolean (1..1) <"A true/false flag to indicate whether there are intermediate or interim exchanges of principal during the term of the swap.">;
		[synonym FpML value intermediateExchange]
}

class PriorDateInstance <"A class to specify the ability to specify a date alongside a contract reference. This is to provide for the ability to indicated the prior trade date and effective trade of a novated trade.">
{
	date date (1..1) <"The prior date instance. If the date has been expressed as an adjustable date as part of the DateInstances class, this date is also meant as an adjustable date.">;
	contractReference Identifier (0..1) <"The contract identifier that can be associated to a prior date instance for lineage purposes.">;
}

class QuotedCurrencyPair <"A class that describes the composition of a rate that has been quoted or is to be quoted. This includes the two currencies and the quotation relationship between the two currencies and is used as a building block throughout the FX specification.">
	[synonym FpML value QuotedCurrencyPair]
{
	currency1 string (1..1) scheme "currencyScheme" <"The first currency specified when a pair of currencies is to be evaluated.">;
		[synonym FpML value currency1]
	currency2 string (1..1) scheme "currencyScheme" <"The second currency specified when a pair of currencies is to be evaluated.">;
		[synonym FpML value currency2]
	quoteBasis QuoteBasisEnum (1..1) <"The method by which the exchange rate is quoted.">;
		[synonym FpML value quoteBasis]
}

class RateObservation <"A class defining parameters associated with an individual observation or fixing. This class forms part of the cashflow representation of a stream.">
	[synonym FpML value RateObservation]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	resetDate date (0..1) <"The reset date.">;
		[synonym FpML value resetDate]
	adjustedFixingDate date (0..1) <"The adjusted fixing date, i.e. the actual date the rate is observed. The date should already be adjusted for any applicable business day convention.">;
		[synonym FpML value adjustedFixingDate]
	observedRate number (0..1) <"The actual observed rate before any required rate treatment is applied, e.g. before converting a rate quoted on a discount basis to an equivalent yield. An observed rate of 5% would be represented as 0.05.">;
		[synonym FpML value observedRate]
	treatedRate number (0..1) <"The observed rate after any required rate treatment is applied. A treated rate of 5% would be represented as 0.05.">;
		[synonym FpML value treatedRate]
	observationWeight int (1..1) <"The number of days weighting to be associated with the rate observation, i.e. the number of days such rate is in effect. This is applicable in the case of a weighted average method of calculation where more than one reset date is established for a single calculation period.">;
		[synonym FpML value observationWeight]
	rateReference string (0..1) reference <"A pointer style reference to a floating rate component defined as part of a stub calculation period amount component. It is only required when it is necessary to distinguish two rate observations for the same fixing date which could occur when linear interpolation of two different rates occurs for a stub calculation period.">;
		[synonym FpML value rateReference]
	forecastRate number (0..1) <"The value representing the forecast rate used to calculate the forecast future value of the accrual period.A value of 1% should be represented as 0.01.">;
		[synonym FpML value forecastRate]
	treatedForecastRate number (0..1) <"The value representing the forecast rate after applying rate treatment rules. A value of 1% should be represented as 0.01.">;
		[synonym FpML value treatedForecastRate]
}

data rule RateObservation_observationWeight <"FpML specifies observationWeight as a positive integer.">
	when RateObservation exists
	then RateObservation -> observationWeight >= 0

class ReferenceBank <"A class to describe an institution (party) identified by means of a coding scheme and an optional name.">
	[synonym FpML value ReferenceBank]
{
	referenceBankId string (1..1) scheme "referenceBankIdScheme" <"An institution (party) identifier, e.g. a bank identifier code (BIC). FpML specifies a referenceBankIdScheme.">;
		[synonym FpML value referenceBankId]
	referenceBankName string (0..1) <"The name of the institution (party). A free format string. FpML does not define usage rules for the element.">;
		[synonym FpML value referenceBankName]
}

class RelatedParty
	[synonym FpML value RelatedParty]
{
	partyReference string (1..1) reference <"Reference to a party.">;
		[synonym FpML value partyReference]
	accountReference string (0..1) reference <"Reference to an account.">;
		[synonym FpML value accountReference]
	role PartyRoleEnum (1..1) <"The category of the relationship. The related party performs the role specified in this field for the base party. For example, if the role is ,Guarantor,, the related party acts as a guarantor for the base party.">;
		[synonym FpML value role]
	/*
	 * The type element has not been specified at this point, because the associated values of 'all positions' vs. 'some positions' seem to be of limited usefulness
	 * We should look to confirm the applicability with FpML experts
	 */
}

class RelativeDates extends RelativeDateOffset <"A class describing a set of dates defined as relative to another set of dates.">
	[synonym FpML value RelativeDates]
{
	periodSkip int (0..1) <"The number of periods in the referenced date schedule that are between each date in the relative date schedule. Thus a skip of 2 would mean that dates are relative to every second date in the referenced schedule. If present this should have a value greater than 1.">;
		[synonym FpML value periodSkip]
	scheduleBounds DateRange (0..1) <"The first and last dates of a schedule. This can be used to restrict the range of values in a reference series of dates.">;
		[synonym FpML value scheduleBounds]
}

data rule RelativeDates_periodSkip <"FpML specifies that, if present, the period skip should have a value greater than 1.">
	when RelativeDates -> periodSkip exists
	then RelativeDates -> periodSkip > 1

class RelativeDateOffset extends Offset <"A class defining a date (referred to as the derived date) as a relative offset from another date (referred to as the anchor date). If the anchor date is itself an adjustable date then the offset is assumed to be calculated from the adjusted anchor date. A number of different scenarios can be supported, namely; 1) the derived date may simply be a number of calendar periods (days, weeks, months or years) preceding or following the anchor date; 2) the unadjusted derived date may be a number of calendar periods (days, weeks, months or years) preceding or following the anchor date with the resulting unadjusted derived date subject to adjustment in accordance with a specified business day convention, i.e. the derived date must fall on a good business day; 3) the derived date may be a number of business days preceding or following the anchor date. Note that the businessDayConvention specifies any required adjustment to the unadjusted derived date. A negative or positive value in the periodMultiplier indicates whether the unadjusted derived precedes or follows the anchor date. The businessDayConvention should contain a value NONE if the day type element contains a value of Business (since specifying a negative or positive business days offset would already guarantee that the derived date would fall on a good business day in the specified business centers).">
	[synonym FpML value RelativeDateOffset]
{
	businessDayConvention BusinessDayConventionEnum (1..1) <"The convention for adjusting a date if it would otherwise fall on a day that is not a business day.">;
		[synonym FpML value businessDayConvention]
	businessCenters BusinessCenters (0..1);
		[synonym FpML value businessCenters]
	businessCentersReference string (0..1) reference <"A pointer style reference to a set of financial business centers defined elsewhere in the document. This set of business centers is used to determine whether a particular day is a business day or not.">;
		[synonym FpML value businessCentersReference]
	dateRelativeTo string (0..1) reference <"Specifies the anchor as an href attribute. The href attribute value is a pointer style reference to the element or component elsewhere in the document where the anchor date is defined.">;
		[synonym FpML value dateRelativeTo]
	adjustedDate date (0..1) <"The date once the adjustment has been performed. (Note that this date may change if the business center holidays change).">;
		[synonym FpML value adjustedDate]
}

class ResetFrequency extends Frequency <"A class defining the reset frequency. In the case of a weekly reset, also specifies the day of the week that the reset occurs. If the reset frequency is greater than the calculation period frequency the this implies that more or more reset dates is established for each calculation period and some form of rate averaging is applicable. The specific averaging method of calculation is specified in FloatingRateCalculation. In case the reset frequency is of value T (term), the period is defined by the swap/swapStream/calculationPerioDates/effectiveDate and the swap/swapStream/calculationPerioDates/terminationDate.">
	[synonym FpML value ResetFrequency]
{
	weeklyRollConvention WeeklyRollConventionEnum (0..1) <"The day of the week on which a weekly reset date occurs. This element must be included if the reset frequency is defined as weekly and not otherwise.">;
		[synonym FpML value weeklyRollConvention]
}

data rule FpML_ird_49 <"FpML validation rule ird-49 - WeeklyRollConvention should exist if and only if the period is 'W'.">
	when ResetFrequency -> weeklyRollConvention exists
	then ResetFrequency -> period = PeriodExtendedEnum.W

class Resource <"Describes the resource that contains the media representation of a business event (i.e used for stating the Publicly Available Information). For example, can describe a file or a URL that represents the event. This type is an extended version of a type defined by RIXML (www.rixml.org).  Rosetta restricts the FpML implementation by not providing the ability to associated a document in hexadecimalBinary or base64Binary until such time that actual use cases will come up.">
	[synonym FpML value Resource]
{
	resourceId string (1..1) scheme "resourceIdScheme" <"The unique identifier of the resource within the event. FpML specifies this element of type resourceIdScheme but with no specified value.">;
		[synonym FpML value resourceId]
	resourceType ResourceTypeEnum (0..1) scheme "resourceTypeScheme" <"A description of the type of the resource, e.g. a confirmation.">;
		[synonym FpML value resourceType]
	language string (0..1) scheme "languageScheme" <"Indicates the language of the resource, described using the ISO 639-2/T Code.">;
		[synonym FpML value language]
	sizeInBytes number (0..1) <"Indicates the size of the resource in bytes. It could be used by the end user to estimate the download time and storage needs.">;
		[synonym FpML value sizeInBytes]
	length ResourceLength (0..1) <"Indicates the length of the resource. For example, if the resource were a PDF file, the length would be in pages.">;
		[synonym FpML value length]
	mimeType string (0..1) scheme "mimeTypeScheme" <"Indicates the type of media used to store the content. mimeType is used to determine the software product(s) that can read the content. MIME Types are described in RFC 2046.">;
		[synonym FpML value mimeType]
	name string (0..1) <"The name of the resource.  It is specified as a NormalizedString in FpML.">;
		[synonym FpML value name]
	comments string (0..1) <"Any additional comments that are deemed necessary. For example, which software version is required to open the document? Or, how does this resource relate to the others for this event?">;
		[synonym FpML value comments]
	string string (0..1) <"Provides extra information as string. In case the extra information is in XML format, a CDATA section must be placed around the source message to prevent its interpretation as XML content.">;
		[synonym FpML value string]
	url string (0..1) <"Indicates where the resource can be found, as a URL that references the information on a web server accessible to the message recipient.">;
		[synonym FpML value url]
}

choice rule Resource_choice <"Choice rule to represent an FpML choice construct.  Note that FpML also provides the ability to have hexadecimalBinary or base64Binary, which have not been implemented in Rosetta until we see actual use cases.">
	for Resource optional choice between
	string and url

class ResourceLength <"The class that indicates the length of the resource.">
	[synonym FpML value ResourceLength]
{
	lengthUnit LengthUnitEnum (1..1) <"The length unit of the resource. For example, pages (pdf, text documents) or time (audio, video files).">;
		[synonym FpML value lengthUnit]
	lengthValue number (1..1) <"The length value of the resource.">;
		[synonym FpML value lengthValue]
}

class Rounding <"A class defining a rounding direction and precision to be used in the rounding of a rate.">
	[synonym FpML value Rounding]
{
	roundingDirection RoundingDirectionEnum (1..1) <"Specifies the rounding direction.">;
		[synonym FpML value roundingDirection]
	precision int (0..1) <"Specifies the rounding precision in terms of a number of decimal places. Note how a percentage rate rounding of 5 decimal places is expressed as a rounding precision of 7 in the FpML document since the percentage is expressed as a decimal, e.g. 9.876543% (or 0.09876543) being rounded to the nearest 5 decimal places is 9.87654% (or 0.0987654).">;
		[synonym FpML value precision]
}

class Schedule <"A class defining a schedule of rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.">
	[synonym FpML value Schedule pathExpression "fixedRateSchedule", "floatingRateMultiplierSchedule", "feeRateSchedule", "fixedRateSchedule", "knownAmountSchedule", "feeAmountSchedule", "capRateSchedule", "floorRateSchedule", "spreadSchedule/"]
{
	id string (0..1) anchor;
		[synonym FpML value id]
		[synonym FpML value id pathExpression "periodicPayment.fixedAmountCalculation.fixedRate"]
	initialValue number (1..1) <"The initial rate or amount, as the case may be. An initial rate of 5% would be represented as 0.05.">;
		[synonym FpML value initialValue]
		[synonym FpML value initialValue pathExpression "calculationPeriodAmount.calculation.fixedRateSchedule"]
		[synonym FpML value initialValue pathExpression "calculationPeriodAmount.calculation.floatingRateCalculation"]
		[synonym FpML value fixedRate pathExpression "periodicPayment.fixedAmountCalculation"]
	step Step (0..*) <"The schedule of step date and value pairs. On each step date the associated step value becomes effective A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.">;
		[synonym FpML value step pathExpression "calculationPeriodAmount.calculation.fixedRateSchedule"]
		[synonym FpML value step]
}

data rule FpML_ird_25 <"FpML validation rule ird-25 - If step does not exist, then initialValue must not be equal to 0.">
	when Schedule -> step is absent
	then Schedule -> initialValue <> 0.0

class SettlementRateSource one of <"A class describing the method for obtaining a settlement rate.">
	[synonym FpML value SettlementRateSource]
{
	informationSource InformationSource (0..1) <"The information source where a published or displayed market rate will be obtained, e.g. Telerate Page 3750.">;
		[synonym FpML value informationSource]
	cashSettlementReferenceBanks CashSettlementReferenceBanks (0..1) <"A container for a set of reference institutions that may be called upon to provide rate quotations as part of the method to determine the applicable cash settlement amount. If institutions are not specified, it is assumed that reference institutions will be agreed between the parties on the exercise date, or in the case of swap transaction to which mandatory early termination is applicable, the cash settlement valuation date.">;
		[synonym FpML value cashSettlementReferenceBanks]
}

class SimplePayment extends PayerReceiver <"A class to specified payments in a simpler fashion than the Payment type. This construct should be used from the FpML version 4.3 onwards.">
	[synonym FpML value SimplePayment]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	paymentAmount Money (1..1) <"The payment amount.">;
		[synonym FpML value paymentAmount]
	paymentDate AdjustableOrRelativeDate (1..1) <"The payment date. This date is subject to adjustment in accordance with any applicable business day convention.">;
		[synonym FpML value paymentDate]
}

data rule SimplePayment_PaymentAmount <"FpML specifies paymentAmount as NonNegativeMoney.">
	when SimplePayment -> paymentAmount exists
	then SimplePayment -> paymentAmount -> amount > 0.0

class SpreadSchedule extends Schedule <"Adds an optional spread type element to the Schedule to identify a long or short spread value.">
	[synonym FpML value SpreadSchedule]
{
	type SpreadScheduleTypeEnum (0..1) scheme "spreadScheduleTypeScheme" <"An element which purpose is to identify a long or short spread value.">;
		[synonym FpML value SpreadScheduleType]
}

class Step <"A class defining a step date and step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortisation or a step-up coupon schedule.">
	[synonym FpML value Step]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	stepDate date (1..1) <"The date on which the associated step value becomes effective.">;
		[synonym FpML value stepDate]
	stepValue number (1..1) <"The rate of amount which becomes effective on the associated step date. A rate of 5% would be represented as 0.05.">;
		[synonym FpML value stepValue]
}

class Strike <"A class describing a single cap or floor rate.">
	[synonym FpML value Strike]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	strikeRate number (1..1) <"The rate for a cap or floor.">;
		[synonym FpML value strikeRate]
		[synonym FIX value StrikePrice tag 202]
	buyer PayerReceiverEnum (0..1) <"The buyer of the option.">;
		[synonym FpML value buyer]
	seller PayerReceiverEnum (0..1) <"The party that has sold.">;
		[synonym FpML value seller]
}

class StrikeSchedule extends Schedule <"A class describing a schedule of cap or floor rates.">
	[synonym FpML value StrikeSchedule]
{
	buyer PayerReceiverEnum (0..1) <"The buyer of the option.">;
		[synonym FpML value buyer]
	seller PayerReceiverEnum (0..1) <"The party that has sold.">;
		[synonym FpML value seller]
}

class StubFloatingRate <"A class defining a floating rate.">
	[synonym FpML value StubFloatingRate]
{
	id string (0..1) anchor;
		[synonym FpML value id]
	floatingRateIndex FloatingRateIndexEnum (1..1) <"The floating rate index.">;
		[synonym FpML value floatingRateIndex]
	indexTenor Period (0..1) <"The ISDA Designated Maturity, i.e. the tenor of the floating rate.">;
		[synonym FpML value indexTenor]
	floatingRateMultiplierSchedule Schedule (0..1) <"A rate multiplier or multiplier schedule to apply to the floating rate. A multiplier schedule is expressed as explicit multipliers and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in the calculationPeriodDatesAdjustments. The multiplier can be a positive or negative decimal. This element should only be included if the multiplier is not equal to 1 (one) for the term of the stream.">;
		[synonym FpML value floatingRateMultiplierSchedule]
	spreadSchedule SpreadSchedule (0..*) <"The ISDA Spread or a Spread schedule expressed as explicit spreads and dates. In the case of a schedule, the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The spread is a per annum rate, expressed as a decimal. For purposes of determining a calculation period amount, if positive the spread will be added to the floating rate and if negative the spread will be subtracted from the floating rate. A positive 10 basis point (0.1%) spread would be represented as 0.001.">;
		[synonym FpML value spreadSchedule]
	rateTreatment RateTreatmentEnum (0..1) <"The specification of any rate conversion which needs to be applied to the observed rate before being used in any calculations. The two common conversions are for securities quoted on a bank discount basis which will need to be converted to either a Money Market Yield or Bond Equivalent Yield. See the Annex to the 2000 ISDA Definitions, Section 7.3. Certain General Definitions Relating to Floating Rate Options, paragraphs (g) and (h) for definitions of these terms.">;
		[synonym FpML value rateTreatment]
	capRateSchedule StrikeSchedule (0..*) <"The cap rate or cap rate schedule, if any, which applies to the floating rate. The cap rate (strike) is only required where the floating rate on a swap stream is capped at a certain level. A cap rate schedule is expressed as explicit cap rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The cap rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A cap rate of 5% would be represented as 0.05.">;
		[synonym FpML value capRateSchedule]
	floorRateSchedule StrikeSchedule (0..*) <"The floor rate or floor rate schedule, if any, which applies to the floating rate. The floor rate (strike) is only required where the floating rate on a swap stream is floored at a certain strike level. A floor rate schedule is expressed as explicit floor rates and dates and the step dates may be subject to adjustment in accordance with any adjustments specified in calculationPeriodDatesAdjustments. The floor rate is assumed to be exclusive of any spread and is a per annum rate, expressed as a decimal. A floor rate of 5% would be represented as 0.05.">;
		[synonym FpML value floorRateSchedule]
}

class StubValue one of <"A type defining how a stub calculation period amount is calculated. A single floating rate tenor different to that used for the regular part of the calculation periods schedule may be specified, or two floating rate tenors many be specified. If two floating rate tenors are specified then Linear Interpolation (in accordance with the 2000 ISDA Definitions, Section 8.3 Interpolation) is assumed to apply. Alternatively, an actual known stub rate or stub amount may be specified.">
	[synonym FpML value StubValue]
{
	floatingRate StubFloatingRate (0..2) <"The rates to be applied to the initial or final stub may be the linear interpolation of two different rates. While the majority of the time, the rate indices will be the same as that specified in the stream and only the tenor itself will be different, it is possible to specift two different rates. For example, a 2 month stub period may use the linear interpolation of a 1 month and 3 month rate. The different rates would be specified in this component. Note that a maximum of two rates can be specified. If a stub period uses the same floating rate index, including tenor, as the regular calculation periods then this should not be specified again within this component, i.e. the stub calculation period amount component may not need to be specified even if there is an initial or final stub period. If a stub period uses a different floating rate index compared to the regular calculation periods then this should be specified within this component. If specified here, they are likely to have id attributes, allowing them to be referenced from within the cashflows component.">;
		[synonym FpML value floatingRate]
	stubRate number (0..1) <"An actual rate to apply for the initial or final stub period may have been agreed between the principal parties (in a similar way to how an initial rate may have been agreed for the first regular period). If an actual stub rate has been agreed then it would be included in this component. It will be a per annum rate, expressed as a decimal. A stub rate of 5% would be represented as 0.05.">;
		[synonym FpML value stubRate]
	stubAmount Money (0..1) <"An actual amount to apply for the initial or final stub period may have been agreed between the two parties. If an actual stub amount has been agreed then it would be included in this component.">;
		[synonym FpML value stubAmount]
}
