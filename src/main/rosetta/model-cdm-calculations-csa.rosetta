namespace org.isda.cdm
version "${project.version}"

import cdm.observable.asset.*
import cdm.observable.common.*

import cdm.legalagreement.contract.*

import cdm.product.template.*

/*
 * Variation Margin Mark to Market Calculation 
 * 
 * Goals:
 *   1. Describe a product agnostic mark-to-market calculation such that it can be used for Variation Margin valuation process;
 *   2. To be as transparent as possible in capturing which CDM elements are being used for the calculations.
 */
/*
 * Option 1 - A mark to market calculation for an FX Forward as provided by a member firm
 * 
 *   1. + requires minimal infrastructure work to support VG thread
 *   2. - delegates more work to the InterpolateForwardRate function, opaque usage of ForwardPayout
 *   3. - will not support other products
 * 
 */
func FxMarkToMarket: <"Representation of sample mark to market calculation provided by a member firm.">
	// TODO Never referenced in CDM
	inputs: contract Contract (1..1)
	output: value number (1..1)
	
	alias forwardPayout: <"Alias to the forward pay out.">
		contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> forwardPayout only-element
	alias forwardExchangeRate: <"Alias for the forward price.">
		contract -> tradableProduct -> priceNotation -> price -> exchangeRate	
	alias currency1Quantity: <"Alias for the forward price.">
		ExtractQuantityByCurrency(contract -> tradableProduct -> quantityNotation, forwardExchangeRate only-element -> quotedCurrencyPair -> currency1)
	
	alias currency2Quantity: <"Alias for the forward price.">
		ExtractQuantityByCurrency(contract -> tradableProduct -> quantityNotation, forwardExchangeRate only-element -> quotedCurrencyPair -> currency2 )
	
	alias quotedQuantity: <"The amount of the quoted currency.">
 		if forwardExchangeRate -> quotedCurrencyPair -> quoteBasis = QuoteBasisEnum -> Currency1PerCurrency2
		then currency1Quantity -> quantity -> amount
		else currency2Quantity -> quantity -> amount
	
	alias baseQuantity: <"The amount of the quoted currency.">
 		if forwardExchangeRate -> quotedCurrencyPair -> quoteBasis = QuoteBasisEnum -> Currency2PerCurrency1
		then currency1Quantity -> quantity -> amount
		else currency2Quantity -> quantity -> amount
	
	alias interpolatedRate:
		InterpolateForwardRate(forwardPayout)
	
	condition: <"The forwardPayout on the contract must exist.">
		contract -> tradableProduct -> product -> contractualProduct -> economicTerms -> payout -> forwardPayout exists
	
	assign-output value:
		(quotedQuantity / interpolatedRate - baseQuantity) * interpolatedRate

func InterpolateForwardRate:
	inputs: forward ForwardPayout (1..1)
	output: result number(1..1)
