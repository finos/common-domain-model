namespace "org.isda.cdm"
version "${project.version}"

/*
 * Variation Margin Mark to Market Calculation 
 * 
 * Goals:
 *   1. Describe a product agnostic mark-to-market calculation such that it can be used for Variation Margin valuation process;
 *   2. To be as transparent as possible in capturing which CDM elements are being used for the calculations.
 */
/*
 * Option 1 - A mark to market calculation for an FX Forward as provided by a member firm
 * 
 *   1. + requires minimal infrastructure work to support VG thread
 *   2. - delegates more work to the InterpolateForwardRate function, opaque usage of ForwardPayout
 *   3. - will not support other products
 * 
 */
func FxMarkToMarket : <"Representation of sample mark to market calculation provided by a member firm.">
    // TODO Never referenced in CDM
    inputs: forwardPayout ForwardPayout (1..1)
    output: value number (1..1)
    alias forwardFX : <"Alias for the forward FX path in the model, to make function more readable.">
        forwardPayout -> underlier -> singleUnderlier -> underlyingProduct -> foreignExchange
    alias quotedQuantity: <"The amount of the quoted currency.">
            if forwardFX -> exchangeRate -> quotedCurrencyPair -> quoteBasis = QuoteBasisEnum.Currency2PerCurrency1 
            then forwardFX -> exchangedCurrency2 -> cashflowAmount -> amount 
            else forwardFX -> exchangedCurrency1 -> cashflowAmount -> amount
    alias baseQuantity: <"The amount of the base currency.">
            if forwardFX -> exchangeRate -> quotedCurrencyPair -> quoteBasis = QuoteBasisEnum.Currency2PerCurrency1 
            then forwardFX  -> exchangedCurrency1 -> cashflowAmount -> amount 
            else forwardFX -> exchangedCurrency2 -> cashflowAmount -> amount
    alias interpolatedRate:
            InterpolateForwardRate( forwardPayout)
    assign-output value :
        (quotedQuantity / interpolatedRate - baseQuantity) * interpolatedRate

func InterpolateForwardRate:
	inputs: forward ForwardPayout (1..1)
    output: result number(1..1)
