namespace "org.isda.cdm"
version "${project.version}"

calculation EquityCashSettlementAmount <"Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 72. 'Equity Cash Settlement Amount' means, in respect of an Equity Cash Settlement Date, an amount in the Settlement Currency determined by the Calculation Agent as of the Equity Valuation Date to which the Equity Cash Settlement Amount relates, pursuant to the following formula: Equity Cash Settlement Amount = ABS(Rate Of Return) × Equity Notional Amount.">
{
	equityCashSettlementAmount : rateOfReturn * notionalAmount
	
	where
		rateOfReturn	: Abs( ResolveRateOfReturn( EquityPayout ) -> rate ) -> result
		notionalAmount	: ResolveNotionalAmount( EquityPayout ) -> notional
}

calculation EquityPerformance <"Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 75. 'Equity Performance' means, in respect of an Equity Cash Settlement Date, an amount in the Settlement Currency determined by the Calculation Agent as of the Equity Valuation Date to which the Equity Cash Settlement Amount relates, pursuant to the following formula: Equity Performance = (Rate Of Return) × Equity Notional Amount.">
{
	equityPerformance : rateOfReturn * notionalAmount

	where
		rateOfReturn	: ResolveRateOfReturn( EquityPayout ) -> rate
		notionalAmount	: ResolveNotionalAmount( EquityPayout ) -> notional
}

calculation RateOfReturn <"Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 139. 'Rate Of Return' means, in respect of any Equity Valuation Date, the amount determined pursuant to the following formula: Rate Of Return = (Final Price - Initial Price) / Initial Price.">
{
	rateOfReturn : ( finalPrice - initialPrice ) / initialPrice 

	where
		calculationPeriod : ResolveCalculationPeriod( EquityPayout -> calculationPeriodDates /*, time */ ) 
					
		initialPrice <"Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 102. 'Initial Price' means, in respect of the first Equity Valuation Date, the Specified Initial Price, and in respect of each subsequent Equity Valuation Date, the Final Price for the Equity Valuation Date immediately preceding such Equity Valuation Date."> : 
		  	if calculationPeriod -> isFirstPeriod = True then 
				EquityPayout -> priceReturnTerms -> initialPrice -> netPrice -> amount
			else (
				if EquityPayout -> priceReturnTerms -> valuationPriceInterim exists then
					ResolvePrice( EquityPayout -> priceReturnTerms -> valuationPriceInterim, calculationPeriod -> startDate ) -> price
				else 
					ResolvePrice( EquityPayout -> priceReturnTerms -> valuationPriceFinal, calculationPeriod -> startDate ) -> price
			) 
				
		finalPrice <"Part 1 Section 5, 'Pricing', of the 2018 ISDA CDM Equity Confirmation, Para 5.1, 'Determining Prices': Each price in relation to a Pricing Date shall be determined pursuant to the specified Pricing Method. Pricing Method for the final Equity Valuation Date shall be specified by the Final EVD Pricing Election and Pricing Method for any other Equity Valuation Date shall be 'Securities Close Pricing (Official)'"> :
			if calculationPeriod -> isLastPeriod = True then
				ResolvePrice( EquityPayout -> priceReturnTerms -> valuationPriceFinal, calculationPeriod -> endDate ) -> price
			else
				ResolvePrice( EquityPayout -> priceReturnTerms -> valuationPriceInterim, calculationPeriod -> endDate ) -> price
}

calculation EquityNotionalAmount <"Part 1 Section 12 of the 2018 ISDA CDM Equity Confirmation for Security Equity Swap, Para 74. 'Equity Notional Amount' means the Number Of Securities times the Initial Price, adjusted, if applicable, as provided in Part 1 Section 2.2, 'Equity Notional Reset'. If 'With Reset' is the Equity Notional Reset Election, then in respect of each Equity Cash Settlement Date: (i) the Equity Notional Amount applicable in respect of the first Equity Cash Settlement Date will be the amount specified as such in the definition of Equity Notional Amount; (ii) the Equity Notional Amount applicable in respect of each subsequent Equity Cash Settlement Date will be the sum of (a) the Equity Notional Amount in respect of the prior Equity Cash Settlement Date and (b) the Equity Performance, whether positive or negative, in respect of the prior Equity Cash Settlement Date; and (iii)	the Floating Notional Amount will be adjusted as provided in sub-clauses (i) and (ii) above as though it were an Equity Notional Amount.">
{
	equityNotionalAmount : numberOfSecurities * initialPrice

	where
		numberOfSecurities	: EquityPayout -> underlier -> singleUnderlier -> openUnits
		calculationPeriod	: ResolveCalculationPeriod( EquityPayout -> calculationPeriodDates /*, time */ )
		initialPrice		: ResolveInitialPrice ( EquityPayout ) -> price
}

function ResolveCalculationPeriod( calculationPeriodDates CalculationPeriodDates /*, time zonedDateTime*/ ) <"Function specification to return the current calculation period start and end dates, and whether this is the first or last period of the schedule, based on a CalculationPeriodDates schedule and the current time.">
{
	// TODO: add "time" as argument, once new Function Specification module in production
	startDate AdjustableOrRelativeDate;
	endDate AdjustableOrRelativeDate;
	isFirstPeriod boolean;
	isLastPeriod boolean;
}

function ResolvePrice( equityValuation EquityValuation, valuationDate AdjustableOrRelativeDate ) <"Function specification to return the price on a Valuation Date based on an EquityValuation method.'">
{
	price number;
}

function ResolveInitialPrice( equityPayout EquityPayout ) <"">
{
	price number;
	// Body to be copied from "RateOfReturn" specification once new Function Specification module in production
}

function ResolveRateOfReturn( equityPayout EquityPayout ) <"">
{
	rate number;
	// Body to be copied from "RateOfReturn" specification once new Function Specification module in production
}

function ResolveNotionalAmount( equityPayout EquityPayout ) <"">
{
	notional number;
	// Body to be copied from "EquityNotionalAmount" specification once new Function Specification module in production
}

calculation FixedAmount <"2006 ISDA Definition Article 5 Section 5.1. Calculation of a Fixed Amount: The Fixed Amount payable by a party on a Payment Date will be: (a) if an amount is specified for the Swap Transaction as the Fixed Amount payable by that party for that Payment Date or for the related Calculation Period, that amount; or (b) if an amount is not specified for the Swap Transaction as the Fixed Amount payable by that party for that Payment Date or for the related Calculation Period, an amount calculated on a formula basis for that Payment Date or for the related Calculation Period as follows: Fixed Amount = Calculation Amount × Fixed Rate × Day Count Fraction.">
{
	fixedAmount : calculationAmount * fixedRate * dayCountFraction
	
	where
		calculationAmount	: InterestRatePayout -> quantity -> notionalSchedule -> notionalStepSchedule -> initialValue
		fixedRate			: InterestRatePayout -> rateSpecification -> fixedRate -> initialValue
		dayCountFraction	: InterestRatePayout -> dayCountFraction
}

calculation FloatingAmount <"2006 ISDA Definition Article 6 Section 6.1. Calculation of a Floating Amount: Subject to the provisions of Section 6.4 (Negative Interest Rates), the Floating Amount payable by a party on a Payment Date will be: (a) if Compounding is not specified for the Swap Transaction or that party, an amount calculated on a formula basis for that Payment Date or for the related Calculation Period as follows: Floating Amount = Calculation Amount × Floating Rate + Spread × Floating Rate Day Count Fraction (b) if “Compounding” is specified to be applicable to the Swap Transaction or that party and 'Flat Compounding' is not specified, an amount equal to the sum of the Compounding Period Amounts for each of the Compounding Periods in the related Calculation Period; or (c) if 'Flat Compounding' is specified to be applicable to the Swap Transaction or that party, an amount equal to the sum of the Basic Compounding Period Amounts for each of the Compounding Periods in the related Calculation Period plus the sum of the Additional Compounding Period Amounts for each such Compounding Period.">
{
	 // TODO - The below calculation needs to be refined for the case of negative interest rate and compounding
	 // TODO - The ISDA 2006 doesn't make reference to the FpML floatingRateMultiplierSchedule.
	 // Discussed resolution path with Jonathan & Harry is for Jonathan to ask the Rates Committee if the rate multiplier is actually used.
	 
	floatingAmount : calculationAmount * ( floatingRate + spread ) * dayCountFraction
	
	where
		calculationAmount	: InterestRatePayout -> quantity -> notionalSchedule -> notionalStepSchedule -> initialValue
		floatingRate		: ResolveRateIndex( InterestRatePayout -> rateSpecification -> floatingRate -> floatingRateIndex ) -> rate
		// TODO: question to group: why can a float rate calculation node in FpML contain multiple rate schedules?
		spread				: GetRateSchedule( InterestRatePayout -> rateSpecification -> floatingRate ) -> schedule -> initialValue
		dayCountFraction	: InterestRatePayout -> dayCountFraction
}

calculation DayCountFractionEnum._1_1 <"2006 ISDA Definition Article 4 section 4.16(a):	if “1/1” is specified, 1;">
{
	: 1.0
	
	where
		payout : InterestRatePayout
}

calculation DayCountFractionEnum.ACT_ACT_ISDA <"2006 ISDA Definition Article 4 section 4.16(b): if “Actual/Actual”, “Actual/Actual (ISDA)”, “Act/Act” or “Act/Act (ISDA)” is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 365 (or, if any portion of that Calculation Period or Compounding Period falls in a leap year, the sum of (i) the actual number of days in that portion of the Calculation Period or Compounding Period falling in a leap year divided by 366 and (ii) the actual number of days in that portion of the Calculation Period or Compounding Period falling in a non-leap year divided by 365);">
{
	: (daysInNonLeapPeriod / 365) + (daysInLeapYearPeriod / 366)
	
	where
		alias calculationPeriod
			CalculationPeriod( InterestRatePayout -> calculationPeriodDates )
		
		daysInLeapYearPeriod <"The number of days of the period that fall in a leap year.">:
			calculationPeriod -> daysInLeapYearPeriod
		
		daysInNonLeapPeriod <"The difference between the total days in the period and the days in leap year period">:
			(calculationPeriod -> daysInPeriod) - (calculationPeriod -> daysInLeapYearPeriod)	
}

calculation DayCountFractionEnum.ACT_ACT_ICMA <"2006 ISDA Definition Article 4 section 4.16(c):	(c)	if “Actual/Actual (ICMA)” or “Act/Act (ICMA)” is specified, a fraction equal to “number of days accrued/number of days in year”, as such terms are used in Rule 251 of the statutes, by-laws, rules and recommendations of the International Capital Market Association (the “ICMA Rule Book”), calculated in accordance with Rule 251 of the ICMA Rule Book as applied to non US dollar denominated straight and convertible bonds issued after December 31, 1998, as though the interest coupon on a bond were being calculated for a coupon period corresponding to the Calculation Period or Compounding Period in respect of which payment is being made;">
{
	// TODO support the long initial and final stubs	
	: daysInPeriod / (daysInPeriod * periodsInYear)
	
	where
		alias calculationPeriod
			CalculationPeriod( InterestRatePayout -> calculationPeriodDates )
			
		daysInPeriod <"Number of calendar in the calculation period">:
			calculationPeriod -> daysInPeriod
		
		periodsInYear <"Number of calculation periods in a year">:
			PeriodsInYear( InterestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency) -> numberOfPeriods
}

calculation DayCountFractionEnum.ACT_365_FIXED <"2006 ISDA Definition Article 4 section 4.16(d): If 'Actual/365 (Fixed)', 'Act/365 (Fixed)', 'A/365 (Fixed)' or 'A/365F' is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 365.">
{
	: daysInPeriod / 365
	
	where
		daysInPeriod <"Number of calendar in the calculation period">:
			CalculationPeriod( InterestRatePayout -> calculationPeriodDates ) -> daysInPeriod
}

calculation DayCountFractionEnum.ACT_360 <"'2006 ISDA Definition Article 4 section 4.16(e): if “Actual/360”, “Act/360” or “A/360” is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360.">
{
	: daysInPeriod / 360
	
	where
		daysInPeriod <"Number of calendar in the calculation period">:
			CalculationPeriod( InterestRatePayout -> calculationPeriodDates ) -> daysInPeriod
}

calculation DayCountFractionEnum._30_360 <"2006 ISDA Definition Article 4 section 4.16(f): if “30/360”, “360/360” or “Bond Basis” is specified, the number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360, calculated on a formula basis as follows:[[360 x (Y2 - Y1)] + [30 x (M2 - M1)] + (D2 - D1)]/360.">
{
	: (360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360
	
	where
		alias calculationPeriod
			CalculationPeriod( InterestRatePayout -> calculationPeriodDates )
	
		startYear <"The year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">: 
			calculationPeriod -> startDate -> year
		
		endYear <"The year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
			calculationPeriod -> endDate -> year
		
		startMonth <"The calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">:
			calculationPeriod -> startDate -> month
		
		endMonth <"The calendar month, expressed as number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
			calculationPeriod -> endDate -> month
		
		endDay <"The calendar day, expressed as a number, immediately following the last day included in the Calculation Period or Compounding Period, unless such number would be 31 and D2, is greater than 29, in which case D2 will be 30">:
			if calculationPeriod -> startDate -> day > 29 then Min( calculationPeriod -> endDate -> day, 30 ) else calculationPeriod -> endDate -> day
		
		startDay <"The first calendar day, expressed as a number, of the Calculation Period or Compounding Period, unless such number would be 31, in which case, will be 30">:
			 Min( calculationPeriod -> startDate -> day, 30 )		
}

calculation DayCountFractionEnum._30E_360 <"2006 ISDA Definition Article 4 section 4.16(g): If '30E/360' or 'Eurobond Basis' is specified, the number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360, calculated on a formula basis as follows:[[360 x (Y2 - Y1)] + [30 x (M2 - M1)] + (D2 - D1)]/360.">
{
	: (360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360
	
	where
		alias calculationPeriod
			CalculationPeriod( InterestRatePayout -> calculationPeriodDates )
	
		startYear <"The year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">:
			calculationPeriod -> startDate -> year
	
		endYear <"The year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
			calculationPeriod -> endDate -> year
				
		startMonth <"The calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">:
			calculationPeriod -> startDate -> month
		
		endMonth <"The calendar month, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
			calculationPeriod -> endDate -> month
		
		endDay <"The first calendar day, expressed as a number, of the Calculation Period or Compounding Period, unless such number would be 31, in which case will be 30">:
			Min( calculationPeriod -> endDate -> day, 30 )
		
		startDay <"The calendar day, expressed as a number, immediately following the last day included in the Calculation Period or Compounding Period, unless such number would be 31, in which case will be 30"> :
			Min( calculationPeriod -> startDate -> day, 30 )
}

calculation DayCountFractionEnum._30E_360_ISDA <"2006 ISDA Definition Article 4 section 4.16(h): if “30E/360 (ISDA)” is specified, the number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360, calculated on a formula basis as follows: [[360 × (Y2 - Y1)]+[30 × (M2 - M1)] +(D2 - D1)]/360 ">
{
	: (360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360
	
	where
		alias calculationPeriod
			CalculationPeriod( InterestRatePayout -> calculationPeriodDates )
			
		alias interestRatePayoutTerminationDate
			ToAdjustedDate (InterestRatePayout -> calculationPeriodDates -> terminationDate)
				
		alias startDateIsInLeapYear
			IsLeapYear(calculationPeriod -> startDate -> year)
		
		alias endDateIsInLeapYear
			IsLeapYear(calculationPeriod -> endDate -> year)
	
		startYear <"The year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">:
			calculationPeriod -> startDate -> year
		
		endYear <"The year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
			calculationPeriod -> endDate -> year
			
		startMonth <"The calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">:
			calculationPeriod -> startDate -> month
			
		endMonth <"The calendar month, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">:
			calculationPeriod -> endDate -> month

		startDay:
			if startDateIsInLeapYear = False and calculationPeriod -> startDate -> month = 2 and calculationPeriod -> startDate -> day = 28
				or startDateIsInLeapYear = True and calculationPeriod -> startDate -> month = 2 and calculationPeriod -> startDate -> day = 29
				or calculationPeriod -> startDate -> day = 31
			then 30 else calculationPeriod -> endDate -> day
		
		endDay:
			if endDateIsInLeapYear = False and calculationPeriod -> endDate -> month = 2 and calculationPeriod -> endDate -> day = 28
				or endDateIsInLeapYear = True and calculationPeriod -> endDate -> month = 2 and calculationPeriod -> endDate -> day = 29
				or calculationPeriod -> endDate -> day = 31
				or calculationPeriod -> endDate = interestRatePayoutTerminationDate -> adjustedDate
			then 30 else calculationPeriod -> endDate -> day
}

calculation DayCountFractionEnum.ACT_365L <"The actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 365 (or, if the later Period End Date of the Calculation Period or Compounding Period falls in a leap year, divided by 366). ">
{
	: daysInPeriod / daysInYear
	
	where
		alias calculationPeriod
			CalculationPeriod( InterestRatePayout -> calculationPeriodDates )
		
		alias endDateIsInLeapYear
			IsLeapYear(calculationPeriod -> endDate -> year)
		
		daysInPeriod <"The actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made ">:
			calculationPeriod -> daysInPeriod
		
		daysInYear <"365 or, if the later Period End Date of the Calculation Period or Compounding Period falls in a leap year, divided by 366. ">: 
			if (endDateIsInLeapYear = True) then 366 else 365
}

function CalculationPeriod( calculationPeriodDates CalculationPeriodDates ) <"2006 ISDA Definition Section 4.13. 'Calculation Period' means, in respect of a Swap Transaction and a party, each period from, and including, one Period End Date of that party to, but excluding, the next following applicable Period End Date during the Term of the Swap Transaction, except that (a) the initial Calculation Period for the party will commence on, and include, the Effective Date and (b) the final Calculation Period for the party will end on, but exclude, the Termination Date.">
{
	startDate date;
	endDate date;
	daysInPeriod int;
	daysInLeapYearPeriod int;
}

function GetRateSchedule( floatingRateCalculation FloatingRateSpecification )
{
	schedule SpreadSchedule;
}

function ResolveRateIndex( index FloatingRateIndexEnum ) <"The function to specify that the floating rate index enumeration will be expressed as a number once the rate is observed.">
{
	rate number;
}

function ToAdjustedDate( terminationDate AdjustableOrRelativeDate )
{
	adjustedDate date;
}

function PeriodsInYear( frequency CalculationPeriodFrequency )
{
	numberOfPeriods int;
}

function Abs( x number ) 
{
	result number;
}
	