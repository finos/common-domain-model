namespace "org.isda.cdm"
version "${project.version}"

func FixedAmount: <"2006 ISDA Definition Article 5 Section 5.1. Calculation of a Fixed Amount: The Fixed Amount payable by a party on a Payment Date will be: (a) if an amount is specified for the Swap Transaction as the Fixed Amount payable by that party for that Payment Date or for the related Calculation Period, that amount; or (b) if an amount is not specified for the Swap Transaction as the Fixed Amount payable by that party for that Payment Date or for the related Calculation Period, an amount calculated on a formula basis for that Payment Date or for the related Calculation Period as follows: Fixed Amount = Calculation Amount × Fixed Rate × Day Count Fraction.">
	[calculation]
	inputs: 
		interestRatePayout InterestRatePayout (1..1)
		date date (1..1)
		
	output: 
		fixedAmount number (1..1)
		
	alias calculationAmount	: 
		interestRatePayout -> quantity -> notionalSchedule -> notionalStepSchedule -> initialValue
		
	alias fixedRate : 
		interestRatePayout -> rateSpecification -> fixedRate -> initialValue
		
	alias dayCountFraction : 
		DayCountFraction(interestRatePayout, interestRatePayout -> dayCountFraction, date)
	
	assign-output fixedAmount : 
		calculationAmount * fixedRate * dayCountFraction


func FloatingAmount: <"2006 ISDA Definition Article 6 Section 6.1. Calculation of a Floating Amount: Subject to the provisions of Section 6.4 (Negative Interest Rates), the Floating Amount payable by a party on a Payment Date will be: (a) if Compounding is not specified for the Swap Transaction or that party, an amount calculated on a formula basis for that Payment Date or for the related Calculation Period as follows: Floating Amount = Calculation Amount × Floating Rate + Spread × Floating Rate Day Count Fraction (b) if “Compounding” is specified to be applicable to the Swap Transaction or that party and 'Flat Compounding' is not specified, an amount equal to the sum of the Compounding Period Amounts for each of the Compounding Periods in the related Calculation Period; or (c) if 'Flat Compounding' is specified to be applicable to the Swap Transaction or that party, an amount equal to the sum of the Basic Compounding Period Amounts for each of the Compounding Periods in the related Calculation Period plus the sum of the Additional Compounding Period Amounts for each such Compounding Period.">
	 // TODO - The below calculation needs to be refined for the case of negative interest rate and compounding
	 // TODO - The ISDA 2006 doesn't make reference to the FpML floatingRateMultiplierSchedule.
	 // Discussed resolution path with Jonathan & Harry is for Jonathan to ask the Rates Committee if the rate multiplier is actually used.
	[calculation]
	inputs: 
		interestRatePayout InterestRatePayout (1..1)
		date date (1..1)
	output: floatingAmount number (1..1)
	
	alias calculationAmount	: interestRatePayout -> quantity -> notionalSchedule -> notionalStepSchedule -> initialValue
	alias floatingRate		: ResolveRateIndex( interestRatePayout -> rateSpecification -> floatingRate -> floatingRateIndex )
		// TODO: question to group: why can a float rate calculation node in FpML contain multiple rate schedules?
	alias spread			: GetRateSchedule( interestRatePayout -> rateSpecification -> floatingRate ) -> initialValue
	alias dayCountFraction	: DayCountFraction(interestRatePayout, interestRatePayout -> dayCountFraction, date)

	assign-output floatingAmount : calculationAmount * ( floatingRate + spread ) * dayCountFraction

func DayCountFraction: <"A description of inputs and outputs for all day count fraction calculations">
	[calculation]
	inputs:
		interestRatePayout InterestRatePayout (1..1)
		dayCountFractionEnum DayCountFractionEnum (1..1)
		date date (1..1)
	output:
		result number (1..1)


func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> _1_1): <"2006 ISDA Definition Article 4 section 4.16(a):	if “1/1” is specified, 1;">
	[calculation]
	assign-output result: 1.0


func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> ACT_ACT_ISDA): <"'2006 ISDA Definition Article 4 section 4.16(e): if “Actual/360”, “Act/360” or “A/360” is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360.">
	[calculation]
	alias calculationPeriod: CalculationPeriod(interestRatePayout -> calculationPeriodDates, date)
	alias daysInLeapYearPeriod: <"The number of days of the period that fall in a leap year.">
			calculationPeriod -> daysInLeapYearPeriod
	alias daysInNonLeapPeriod: <"The difference between the total days in the period and the days in leap year period">
			(calculationPeriod -> daysInPeriod) - (calculationPeriod -> daysInLeapYearPeriod)
	assign-output result:
		(daysInNonLeapPeriod / 365) + (daysInLeapYearPeriod / 366)


func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> ACT_ACT_ICMA): <"2006 ISDA Definition Article 4 section 4.16(c):	(c)	if “Actual/Actual (ICMA)” or “Act/Act (ICMA)” is specified, a fraction equal to “number of days accrued/number of days in year”, as such terms are used in Rule 251 of the statutes, by-laws, rules and recommendations of the International Capital Market Association (the “ICMA Rule Book”), calculated in accordance with Rule 251 of the ICMA Rule Book as applied to non US dollar denominated straight and convertible bonds issued after December 31, 1998, as though the interest coupon on a bond were being calculated for a coupon period corresponding to the Calculation Period or Compounding Period in respect of which payment is being made;">
	[calculation]
	alias calculationPeriod: CalculationPeriod(interestRatePayout -> calculationPeriodDates, date)
	alias daysInPeriod: <"Number of calendar in the calculation period">
			calculationPeriod -> daysInPeriod
	alias periodsInYear: <"Number of calculation periods in a year">
			PeriodsInYear(interestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency)
	assign-output result:
		// TODO support the long initial and final stubs
		daysInPeriod / (daysInPeriod * periodsInYear)

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> ACT_365_FIXED): <"'2006 ISDA Definition Article 4 section 4.16(d): If 'Actual/365 (Fixed)', 'Act/365 (Fixed)', 'A/365 (Fixed)' or 'A/365F' is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 365. ISDA Definition Article 4 section 4.16(e): if “Actual/360”, “Act/360” or “A/360” is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360.">
	[calculation]
	alias daysInPeriod: <"Number of calendar in the calculation period">
		CalculationPeriod(interestRatePayout -> calculationPeriodDates, date) -> daysInPeriod
	assign-output result:
		daysInPeriod / 365

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> ACT_360): <"'2006 ISDA Definition Article 4 section 4.16(e): if “Actual/360”, “Act/360” or “A/360” is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360.">
	[calculation]
	alias daysInPeriod:  <"Number of calendar in the calculation period">
		CalculationPeriod(interestRatePayout -> calculationPeriodDates, date ) -> daysInPeriod
	assign-output result:
		daysInPeriod / 360

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> _30_360): <"2006 ISDA Definition Article 4 section 4.16(f): if “30/360”, “360/360” or “Bond Basis” is specified, the number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360, calculated on a formula basis as follows:[[360 x (Y2 - Y1)] + [30 x (M2 - M1)] + (D2 - D1)]/360.">
	[calculation]
	alias calculationPeriod:
		CalculationPeriod(interestRatePayout -> calculationPeriodDates, date)
	
	alias startYear: <"The year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
			calculationPeriod -> startDate -> year
		
	alias endYear: <"The year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
			calculationPeriod -> endDate -> year
		
	alias startMonth: <"The calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
			calculationPeriod -> startDate -> month
		
	alias endMonth: <"The calendar month, expressed as number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
			calculationPeriod -> endDate -> month
		
	alias endDay: <"The calendar day, expressed as a number, immediately following the last day included in the Calculation Period or Compounding Period, unless such number would be 31 and D2, is greater than 29, in which case D2 will be 30">
			if calculationPeriod -> startDate -> day > 29 then Min( calculationPeriod -> endDate -> day, 30 ) else calculationPeriod -> endDate -> day
		
	alias startDay: <"The first calendar day, expressed as a number, of the Calculation Period or Compounding Period, unless such number would be 31, in which case, will be 30">
			Min( calculationPeriod -> startDate -> day, 30 )
	assign-output result:
		(360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360


func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> _30E_360): <"'2006 ISDA Definition Article 4 section 4.16(e): if “Actual/360”, “Act/360” or “A/360” is specified, the actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360.">
	[calculation]
	alias calculationPeriod:
		CalculationPeriod(interestRatePayout -> calculationPeriodDates, date)
	
	alias startYear: <"The year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
			calculationPeriod -> startDate -> year
	
	alias endYear: <"The year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
			calculationPeriod -> endDate -> year
				
	alias startMonth: <"The calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
			calculationPeriod -> startDate -> month
		
	alias endMonth: <"The calendar month, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
			calculationPeriod -> endDate -> month
		
	alias endDay: <"The first calendar day, expressed as a number, of the Calculation Period or Compounding Period, unless such number would be 31, in which case will be 30">
			Min( calculationPeriod -> endDate -> day, 30 )
		
	alias startDay: <"The calendar day, expressed as a number, immediately following the last day included in the Calculation Period or Compounding Period, unless such number would be 31, in which case will be 30"> 
			Min( calculationPeriod -> startDate -> day, 30 )
	assign-output result:
		(360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> _30E_360_ISDA): <"2006 ISDA Definition Article 4 section 4.16(h): if “30E/360 (ISDA)” is specified, the number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 360, calculated on a formula basis as follows: [[360 × (Y2 - Y1)]+[30 × (M2 - M1)] +(D2 - D1)]/360 ">
	[calculation]
	
	alias calculationPeriod:
		CalculationPeriod( interestRatePayout -> calculationPeriodDates, date )
	
	alias interestRatePayoutTerminationDate:
		ResolveAdjustableDate (interestRatePayout -> calculationPeriodDates -> terminationDate)
	
	alias startDateIsInLeapYear:
			IsLeapYear(calculationPeriod -> startDate -> year)
	
	alias endDateIsInLeapYear:
			IsLeapYear(calculationPeriod -> endDate -> year)
	
	alias startYear: <"The year, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
			calculationPeriod -> startDate -> year
		
	alias endYear: <"The year, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
			calculationPeriod -> endDate -> year
			
	alias startMonth: <"The calendar month, expressed as a number, in which the first day of the Calculation Period or Compounding Period falls">
			calculationPeriod -> startDate -> month
			
	alias endMonth: <"The calendar month, expressed as a number, in which the day immediately following the last day included in the Calculation Period or Compounding Period falls">
			calculationPeriod -> endDate -> month

	alias startDay:
			if startDateIsInLeapYear = False and calculationPeriod -> startDate -> month = 2 and calculationPeriod -> startDate -> day = 28
				or startDateIsInLeapYear = True and calculationPeriod -> startDate -> month = 2 and calculationPeriod -> startDate -> day = 29
				or calculationPeriod -> startDate -> day = 31
			then 30 else calculationPeriod -> endDate -> day
		
	alias endDay:
			if endDateIsInLeapYear = False and calculationPeriod -> endDate -> month = 2 and calculationPeriod -> endDate -> day = 28
				or endDateIsInLeapYear = True and calculationPeriod -> endDate -> month = 2 and calculationPeriod -> endDate -> day = 29
				or calculationPeriod -> endDate -> day = 31
				or calculationPeriod -> endDate = interestRatePayoutTerminationDate
			then 30 else calculationPeriod -> endDate -> day
	assign-output result:
		(360 * (endYear - startYear) + 30 * (endMonth - startMonth) + (endDay - startDay)) / 360

func DayCountFraction(dayCountFractionEnum: DayCountFractionEnum -> ACT_365L): <"The actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made divided by 365 (or, if the later Period End Date of the Calculation Period or Compounding Period falls in a leap year, divided by 366). ">
	[calculation]
	alias calculationPeriod:
		CalculationPeriod( interestRatePayout -> calculationPeriodDates, date )
	
	alias endDateIsInLeapYear:
		IsLeapYear(calculationPeriod -> endDate -> year)
	
	alias daysInPeriod: <"The actual number of days in the Calculation Period or Compounding Period in respect of which payment is being made ">
		calculationPeriod -> daysInPeriod
	
	alias daysInYear: <"365 or, if the later Period End Date of the Calculation Period or Compounding Period falls in a leap year, divided by 366. ">
		if (endDateIsInLeapYear = True) then 366 else 365
	
	assign-output result: 
		daysInPeriod / daysInYear


func GetRateSchedule:
	inputs: floatingRateCalculation FloatingRateSpecification (1..1)
	output: schedule SpreadSchedule (1..1)


func ResolveRateIndex: <"The function to specify that the floating rate index enumeration will be expressed as a number once the rate is observed.">
	inputs:index FloatingRateIndexEnum (1..1)
	output: rate number(1..1)


func PeriodsInYear:
	inputs: frequency CalculationPeriodFrequency (1..1)
	output: numberOfPeriods int (1..1)


func Abs:
	inputs: x number (1..1)
	output: result number (1..1)
 
 
func CalculationPeriod :<"2006 ISDA Definition Section 4.13. 'Calculation Period' means, in respect of a Swap Transaction and a party, each period from, and including, one Period End Date of that party to, but excluding, the next following applicable Period End Date during the Term of the Swap Transaction, except that (a) the initial Calculation Period for the party will commence on, and include, the Effective Date and (b) the final Calculation Period for the party will end on, but exclude, the Termination Date.">
	inputs: 
		calculationPeriodDates CalculationPeriodDates (1..1)
		date date (1..1)
	output: result CalculationPeriodData (1..1)


data CalculationPeriodData :
	startDate date (1..1)
	endDate date (1..1)
	daysInPeriod int (1..1)
	daysInLeapYearPeriod int (1..1)
	isFirstPeriod boolean (1..1)
	isLastPeriod boolean (1..1)
