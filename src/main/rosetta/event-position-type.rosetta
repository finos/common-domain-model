namespace cdm.event.position : <"Position concepts: portfolio and portfolio aggregation.">
version "${project.version}"

import cdm.base.datetime.*
import cdm.base.math.*
import cdm.base.staticdata.asset.common.*
import cdm.base.staticdata.party.*

import cdm.observable.asset.*
import cdm.product.template.*

import cdm.legalagreement.contract.*
import cdm.event.common.*

type Position: <" A Position describes how much of a given Product is being held and constitutes the atomic element of a Portfolio.">

	product Product (1..1) <"The product underlying the position, which can either be a contractual product or securities.">
	quantity Quantity (1..1) <"The quantity of the product, which can be a negative number in case of a short position.">
	cashBalance Money (0..1) <"The aggregate cost of proceeds">
	positionStatus PositionStatusEnum (1..1) <"Qualifier for the state of the Position, to distinguish if just executed, formed, already settled, closed etc.">
	tradeReference Trade (1..1) <"Reference to the Contract, in case product is contractual and the contract has been formed">
		[metadata reference]

type PortfolioState: <" State-full representation of a Portfolio that describes all the positions held at a given time, in various states which can be either traded, settled, etc., with lineage information to the previous state">
	[metadata key]

	positions Position (0..*) <"The list of positions, each containing a Quantity and a Product.">
	lineage Lineage (1..1) <"Pointer to the previous PortfolioState and new Event(s) leading to the current (new) state. Previous PortfolioState in the Lineage can be Null in case this is the start of the chain of Events.">

	condition Initialisation: <"When the PortfolioState is the starting state of the Portfolio, as identified by a Null state in the Lineage, Positions must be empty and the reference to the latest Event is also empty. This is how a Portfolio gets initialised.">
		if PortfolioState exists and lineage -> portfolioStateReference is absent
		then positions is absent
			and lineage -> eventReference is absent

type AggregationParameters: <" Parameters to be used to filter events that are relevant to a given portfolio in order to calculate the state of this portfolio. The attributes correspond to all the possible aggregation criteria that can be used and these criteria can be combined. All the attributes are optional.">
	dateTime zonedDateTime (1..1) <"To aggregate as of a particular date">
	totalPosition boolean (0..1) <"Specifies whether to calculate total position to given date, or only daily position for the given date.">
	positionStatus PositionStatusEnum (0..1) <"To aggregate based on position status (EXECUTED, SETTLED etc)">
	party Party (0..*) <"To aggregate based on a selection of party(ies) / legal entity(ies).">
		[metadata reference]
	product Product (0..*) <"To aggregate based on a selection of products.">
	productQualifier productType (0..*) <"To aggregate based on a selection of product type(s).">
	tradeReference Trade (0..*)
	    [metadata reference]

type Portfolio: <" A Portfolio represents an aggregation of multiple Positions, by describing the parameters that this Portfolio should be aggregated based on. The resulting PortfolioState is calculated using these aggregation parameters as inputs, by aggregating all the Events that are relevant to this Portfolio. The concept of Portfolio works at all levels in the model: from the highest for a given LegalEntity for instance, to the lowest to account for security substitutions in a secutity financing transaction. As such, Portfolio can be used either above or below the Contract level.">

	aggregationParameters AggregationParameters (1..1) <"Describes the portfolio by describing how to aggregate all its relevant Events.">
	portfolioState PortfolioState (1..1) <"Describes the state of the Portfolio as a list of Positions resulting from the aggregation.">

type AveragingObservation: <"Defines parameters for use in cases when a valuation or other term is based on an average of market observations.">
   calculationMethod AveragingCalculationMethodEnum (1..1) <"Specifies enumerations for the type of averaging calculation.">
   precision Rounding (1..1) <"Specifies details of any rounding applied when averaging market observations.">
   observationTime BusinessCenterTime (1..1) <"Specifies the time details at which a market observation will take place.">
   observationDates ObservationDates (1..1) <"Specifies the date details at which a market observation will take place.">
   fxRateObservable FxRateObservable (0..1) <"Defines foreign exchange (FX) asset class specific parameters.">

type ObservationDates: <"Describes date details for a set of observation dates in parametric or non-parametric form.">
   observationSchedule ObservationSchedule (0..*) <"Specifies a schedule of dates (non-parametric) on which market observations take place, and allows for the optional definition of weights where applicable.  When no weight is specified, then weight of each date is assumed to be 1.0">
   parametricSchedule PeriodicDates (0..1) <"Specifies the date range and frequency on which market observations take place.  Weights can be assigned to dates in the schedule by assigning the weight and corresponding observationReference in the observationSchedule. ">

type FxRateObservable: <"Defines foreign exchange (FX) asset class specific parameters for market observations.">
    quotedCurrencyPair QuotedCurrencyPair (1..1) <"Describes the composition of a rate that has been quoted or is to be quoted.">
        [metadata address "pointsTo"=Observable->currencyPair]
    primaryFxSpotRateSource InformationSource (1..1) <"Specifies the primary source from which a rate should be observed.">
    secondaryFxSpotRateSource InformationSource (0..1) <"Specifies an alternative, or secondary, source from which a rate should be observed.">

type ObservationSchedule: <"Specifies a single date on which market observations take place and specifies optional associated weighting.">
   date AdjustableOrAdjustedDate (0..1) <"Specifies an adjusted or unadjusted date for a market observation.">
   weight number (0..1) <"Specifies the degree of importance of the observation.">
   observationReference string (0..1) <"Specifies an identification key for the market observation. This attribute can be used as a reference to assign weights to a series of dates defined in a parametricSchedule.">
