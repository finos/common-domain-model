namespace cdm.legalagreement.common : <"Common legal agreement concepts.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.base.staticdata.identifier.*

func Create_RelatedAgreementsWithPartyReference: <"Constructs a Related Legal Agreement using a reference to the contractual parties">
	inputs:
		legalAgreement LegalAgreement (1..*)
	output:
		legalAgreementWithPartyReference RelatedAgreement (1..*)
		
func Create_LegalAgreementWithPartyReference: <"Constructs a Legal Agreement using a reference to the contractual parties">
	inputs:
		agreementTerms AgreementTerms (0..1) <"The set of elections specific to the contract">
		agreementDate date (1..1) <"The date on which the legal agreement has been agreed between the parties. This corresponds to the Date of Deed in an English Law document.">
		effectiveDate date (0..1) <"The date on which the agreement is effective, if different from the agreement date. It is expected that it will most often correspond to the agreement date, although there could be situations where the parties will explicitly agree on a distinct effective date.">
		identifier Identifier (0..*) <"The legal agreement identifier. Several identifiers can be specified.">
		agreementType LegalAgreementType (1..1) <"The type of legal agreement, identified via a set of distinct attributes: name, publisher, governing law and version, e.g. ISDA 2013 Standard Credit Support Annex English Law.">
		contractualParty Party (2..2)  <"The two contractual parties to the legal agreement, which reference information is positioned as part of the partyInformation attribute.">
		otherParty PartyRole (0..*) <"The role(s) that other party(ies) may have in relation to the legal agreement, further to the contractual parties.">

	output:
		legalAgreement LegalAgreement (1..1)

	assign-output legalAgreement -> agreementTerms:
		agreementTerms

	assign-output legalAgreement -> agreementDate:
		agreementDate

	assign-output legalAgreement -> effectiveDate:
		effectiveDate

	assign-output legalAgreement -> identifier:
		identifier

	assign-output legalAgreement -> agreementType:
		agreementType

	assign-output legalAgreement -> contractualParty:
		contractualParty as-key

	assign-output legalAgreement -> otherParty:
	otherParty



