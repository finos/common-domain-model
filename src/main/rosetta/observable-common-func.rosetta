namespace cdm.observable.common
version "${project.version}"

import cdm.base.datetime.*
import cdm.base.staticdata.asset.common.*

import cdm.observable.asset.*

func ResolveTimeZoneFromTimeType: <"Defines inputs and outputs needed to derive the time and time-zone for a product identifier">
	inputs:
		productIdentifier ProductIdentifier (1..1)
		timeType TimeTypeEnum (1..1)
		determinationMethod DeterminationMethodEnum (1..1)

	output:
		time TimeZone (1..1)

func PriceQuantityTriangulation: <"Defines all the scenarios which triangulation can be helpful validation between Prices and Quantities.">
	inputs:
		priceQuantity PriceQuantity (0..*)

	output:
		success boolean (1..1)

	assign-output success:
		if priceQuantity -> price -> priceType contains PriceTypeEnum -> CashPrice
		then CashPriceQuantityNoOfUnitsTriangulation(priceQuantity)
		else True

func CashPriceQuantityNoOfUnitsTriangulation: <"Data rule to check the relationship between cash price, notional and number of units.">
	inputs:
		priceQuantity PriceQuantity (0..*)

	output:
		success boolean (1..1)

	alias notional:
		CurrencyAmount(priceQuantity, empty)

	alias noOfUnits:
		NoOfUnits(priceQuantity)

	alias cashPrices:
		priceQuantity -> price -> amount

	alias cashPrice:
		cashPrices only-element

	assign-output success:
		if (cashPrice and noOfUnits and notional) exists
		then cashPrice * noOfUnits = notional

func NoOfUnits: <"Get quantity associated with product identifier.">
	inputs:
		priceQuantity PriceQuantity (0..*)

	output:
		noOfUnits number (1..1)


func CurrencyAmount: <"Get quantity associated with currency.">
	inputs:
		priceQuantity PriceQuantity (0..*)
		currency string (0..1)

	output:
		currencyAmount number (1..1)

func Plus:
	inputs:
		q1 cdm.base.math.Quantity (1..1)
		q2 cdm.base.math.Quantity (1..1)
	output:
		result cdm.base.math.Quantity (1..1)

func Equals:
	inputs:
		quantity cdm.base.math.Quantity (1..*)
		scalar number (1..1)
	output:
		result boolean (1..1)

func GreaterThan:
	inputs:
		quantity cdm.base.math.Quantity (1..*)
		scalar number (1..1)
	output:
		result boolean (1..1)

func GreaterThanEquals:
	inputs:
		quantity cdm.base.math.Quantity (1..*)
		scalar number (1..1)
	output:
		result boolean (1..1)
