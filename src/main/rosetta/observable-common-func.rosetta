namespace cdm.observable.common
version "${project.version}"

import cdm.base.math.*
import cdm.base.datetime.*
import cdm.base.staticdata.asset.common.*

import cdm.observable.asset.*

func ResolveTimeZoneFromTimeType: <"Defines inputs and outputs needed to derive the time and time-zone for a product identifier">
	inputs:
		productIdentifier ProductIdentifier (1..1)
		timeType TimeTypeEnum (1..1)
		determinationMethod DeterminationMethodEnum (1..1)

	output:
		time TimeZone (1..1)

func PriceQuantityTriangulation: <"Defines all the scenarios which triangulation can be helpful validation between Prices and Quantities.">
	inputs:
		quantity Quantity (0..*)
		price Price (0..*)
		
	output:
		success boolean (1..1)

	assign-output success:
		if price -> priceExpression -> priceType contains PriceTypeEnum -> CashPrice
		then CashPriceQuantityNoOfUnitsTriangulation(quantity, price)
		else True

func CashPriceQuantityNoOfUnitsTriangulation: <"Data rule to check the relationship between cash price, notional and number of units.">
	inputs:
		quantity Quantity (0..*)
		price Price (0..*)
		
	output:
		success boolean (1..1)

	alias notional:
		FilterQuantityByCurrencyExists( quantity ) distinct only-element -> amount

	alias noOfUnits:
		FilterQuantityByFinancialUnit( quantity, FinancialUnitEnum -> Share ) only-element -> amount

	alias cashPrices:
		price -> amount

	alias cashPrice:
		cashPrices only-element

	assign-output success:
		if (cashPrice and noOfUnits and notional) exists
		then cashPrice * noOfUnits = notional
