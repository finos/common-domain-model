namespace cdm.product.asset.calculation : <"Product-related, asset class-specific calculation concepts, such as day counting and calculating accruals.">
version "${project.version}"

import cdm.base.math.*
import cdm.base.datetime.*
import cdm.base.daycount.*
import cdm.base.staticdata.asset.rates.*

import cdm.observable.asset.*

import cdm.product.template.*
import cdm.product.common.schedule.*
import cdm.product.asset.floatingrate.*
import cdm.product.asset.*

import cdm.legalagreement.common.*

// =====================================================================
//
// Fixed Amount Calculation definitions
//
// these functions return the calculated fixed amount
//
// ======================================================================

// TODO: should this be enhanced to support spreads and do spread-exclusive calculations for compounding?
func FixedAmountCalculation: <"Calculates the fixed amount for a calculation period by looking up the notional and the fixed rate and multiplying by the year fraction.">
	[calculation]
	inputs:
		interestRatePayout InterestRatePayout (1..1)
		calculationPeriod CalculationPeriodBase (1..1)
	output:
		fixedAmount number (1..1)

	alias fixedRate: LookupFixedRate(interestRatePayout, calculationPeriod)
	alias calculationAmount: LookupNotionalAmount(interestRatePayout, calculationPeriod)
	alias dcf: interestRatePayout->dayCountFraction
	alias yearFraction: CalculateYearFraction(interestRatePayout, dcf, calculationPeriod)

	assign-output fixedAmount:
		calculationAmount->multiplier * fixedRate * yearFraction

func LookupFixedRate: <"Look up the fixed rate for a calculation period.">
	[calculation]
	inputs:
		interestRatePayout InterestRatePayout (1..1) <"An interest rate stream.">
		calculationPeriod CalculationPeriodBase (1..1) <"The calculation period for which you want the spread.">
	output:
		fixedRate number (0..1)  <"the fixed rate value value for the period.">
	alias startDate: calculationPeriod->adjustedStartDate
	assign-output
		fixedRate: LookupRateScheduleAmount(interestRatePayout->rateSpecification -> fixedRate->rateSchedule, startDate)

// =====================================================================
//
// Floating Rate Amount Calculation definitions
//
// these functions perform the floating amount calculations
//
// ======================================================================

func FloatingAmountCalculation: <"Calculate a floating amount for a calculation period by determining the raw floating rate, applying any rate treatments, looking up the calculation period notional, then performing the multiplication of the notional, rate, and year fraction.  Floating amount calculations are described in the 2021 ISDA Definitions in Section 6 and 7.">
	[calculation]
	inputs:
		interestRatePayout InterestRatePayout (1..1) <"The interest rate stream for which the floating amount calculation is being done.">
		calculationPeriod CalculationPeriodBase (1..1) <"The calculation period for which the floating rate calculation is being done.">
		isInitialPeriod boolean (1..1) <"Is this the initial calculation period?.">
	output:
		result FloatingAmountCalculationDetails (1..1) <"The details of the floating rate calculation, including raw rate, rate treatment details, notional, and calculated cashlow amount.">

	// Get the floating rate before treatments
	alias rawFloatingRateDetails: DetermineFloatingRateReset(interestRatePayout, calculationPeriod)
	alias rawFloatingRate: rawFloatingRateDetails->floatingRate

	// apply rate treatments/processing
	alias processingParameters: GetFloatingRateProcessingParameters(interestRatePayout, calculationPeriod)
	// TOOD: implement initial rate
	alias processingDetails: ApplyFloatingRateProcessing(processingParameters, rawFloatingRate, calculationPeriod, isInitialPeriod)
	alias appliedRate: processingDetails-> processedRate
	alias spreadExclusiveRate: processingDetails->spreadExclusiveRate

	// determine notional, year fraction, and perform the final calculation
	alias notional: LookupNotionalAmount(interestRatePayout, calculationPeriod)
	alias dcf: interestRatePayout->dayCountFraction
	alias yearFraction: CalculateYearFraction(interestRatePayout, dcf, calculationPeriod)
	alias annualAccrual: notional->multiplier * appliedRate
	alias notionalAccrual: notional->multiplier * yearFraction
	alias cashflow: notionalAccrual * appliedRate
	alias spreadExclusiveCashflow: notionalAccrual * spreadExclusiveRate

	// record results
	assign-output result->calculationPeriod: calculationPeriod
	assign-output result->calculationPeriodNotionalAmount: notional
	assign-output result->floatingRate: rawFloatingRateDetails
	assign-output result->processingDetails: processingDetails
	assign-output result->appliedRate: appliedRate
	// assign-output result->notionalAmount : notional->amount
	assign-output result->yearFraction: yearFraction
	assign-output result->calculatedAmount: cashflow
	assign-output result->spreadExclusiveCalculatedAMount: spreadExclusiveCashflow

func Create_CalculationPeriodBase: <"Create a CalculationPeriodBase type from CalculationPeriodData type.">
	inputs:
		calcPeriodData CalculationPeriodData(1..1) <"A supplied CalculationPeriodData structure.">
	output:
		calcPeriod CalculationPeriodBase(1..1) <"The corresponding CalculationPeriodBase structure.">
	assign-output calcPeriod->adjustedStartDate: calcPeriodData->startDate
	assign-output calcPeriod ->adjustedEndDate: calcPeriodData->endDate

//-------------------------------------------------------
// The following functions look up current notional
//-------------------------------------------------------

func LookupNotionalAmount: <"Look up the notional amount in effect for a calculation period.">
	[calculation]
	inputs:
		interestRatePayout InterestRatePayout (1..1) <"An interest rate stream.">
		calculationPeriod CalculationPeriodBase (1..1) <"The calculation period for which you want the notional.">
	output:
		notional Money (1..1) <"The notional that is in effect starting from the adjusterPeriodStartDate.">
	// look up and return the notional from the notional schedule
	assign-output notional->multiplier: 
		LookupQuantityScheduleAmount(interestRatePayout->payoutQuantity->quantitySchedule, calculationPeriod->adjustedStartDate)
	assign-output notional->multiplierUnit->currency: 
		interestRatePayout->payoutQuantity->quantitySchedule->initialQuantity->multiplierUnit->currency

func LookupQuantityScheduleAmount: <"Look up a value from a quantity schedule given a supplied starting date.  It will return the value of the last step that is before the supplied starting date, or if none matches, the initial value.">
	[calculation]
	inputs:
		schedule NonNegativeQuantitySchedule (0..1) <"The quantity schedule being looked up from.">
		periodStartDate date (1..1) <"The date for which the quantity is required.">
	output:
		value number (1..1)	<"The quantity in effect on the supplied date.">
	alias stepValues: FindNonNegativeScheduleSteps(schedule->stepSchedule, periodStartDate, 0)
	alias vals: AppendToVector(stepValues, schedule->initialQuantity->multiplier)
	assign-output
		value: SelectFromVector(vals, 0)

func FindNonNegativeScheduleSteps: <"Find all  schedule step values whose stepDate is before or equal to the supplied periodStartDate, starting from supplied startingStep number.  Returns a list of step values starting from the last matching one and going in reverse order.  Done this slightly odd way for efficiency and simplicity in code generation.">
	[calculation]
	inputs:
		schedule NonNegativeStepSchedule (1..1) <"The quantity schedule being looked up from.">
		periodStartDate date (1..1)	<"The date for which the quantity is required.">
		startingStep int (1..1) <"The first step to start looking at.">
	output:
		vector number (0..*)
	alias currentStep: SelectNonNegativeScheduleStep(schedule, startingStep)
	alias remainingValues: FindNonNegativeScheduleSteps(schedule, periodStartDate, startingStep + 1)
	alias append: AppendToVector(remainingValues, currentStep->stepValue)
	alias checkAppend: if (periodStartDate >= stepDate) then append
	alias stepDate: currentStep->stepDate
	assign-output vector:
		if (startingStep < schedule->step count) then checkAppend

func SelectNonNegativeScheduleStep: <"Retrieve a single step from a  schedule given a step number.  This is an entry point to a function written in a native language like Java.  Returns the step if it exists, else null. The index is 0-based, so 0 returns the first step.">
	inputs:
		schedule NonNegativeStepSchedule (1..1) <"The quantity schedule being looked up from.">
		stepNo int (1..1) <"The  step to return.">
	output:
		step NonNegativeStep (0..1)	<"The returned step, or null if it does not exist.">

// -----------------------------------------------
//
// Day count and year fraction calculation
//
// -----------------------------------------------

func CalculateYearFraction: <"Calculate the year fraction for a single calculation period, by invoking the base year fraction logic">
	inputs:
		interestRatePayout InterestRatePayout (1..1) <"The interest rate payout for which the year fraction is needed">
		dcf DayCountFractionEnum (1..1) <"The day count fraction convention to use">
		calculationPeriod CalculationPeriodBase (1..1)  <"The calculation period for which the year fraction is needed">
	output:
		yearFrac number (1..1)

    // some convenience aliases to access start and end dates
	alias start: calculationPeriod->adjustedStartDate
	alias end: calculationPeriod->adjustedEndDate
	alias termination: interestRatePayout->calculationPeriodDates->terminationDate->adjustableDate->unadjustedDate

    // calculate the number of calculation periods in a year
	alias periodsInYear: <"Number of calculation periods in a year.">
		PeriodsInYear(interestRatePayout -> calculationPeriodDates -> calculationPeriodFrequency)

	assign-output yearFrac:
		YearFraction(dcf, start, end, termination, periodsInYear)
