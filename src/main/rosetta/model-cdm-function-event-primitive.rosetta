namespace "org.isda.cdm"
version "${project.version}"


/*
 * Primitive Event Function Specifications 
 */

func ResolveContractState : <"Specification to resolve a contract state into a contract, where a contract state contains the original state of a contract plus some reset values. Resolution works like a mask, replacing original values by reset values, where they apply. The structure of the contract resets must match the structure of the original contract.">
	inputs:
		contractState ContractState (1..1)	
	output:
		contract Contract (1..1)

func QuantityChange : <"A specification of the inputs, outputs and constraints when calculating the after state of a Quantity Change Primitive Event">
	inputs:
		trade Trade (1..1)
		quantityChange ContractualQuantity (1..1)
	
	output:
		quantityChangePrimitive QuantityChangePrimitive (1..1)
	
	condition: <"Non-zero quantity change">
		GreaterThan(quantityChange, 0.0);

	assign-output quantityChangePrimitive -> before: <"Correctly populate the before attributes on the Primitive Event">
		trade

	post-condition: <"The resulting quantity must equal the original quantity plus the quantity change.">
		ExtractQuantity( quantityChangePrimitive -> after ) = Plus( ExtractQuantity( trade ), quantityChange );
	 
	post-condition: <"The input and output types need to be consistent, if we started with an Execution, we should end with an Execution">
		if quantityChangePrimitive -> after -> execution exists then quantityChangePrimitive -> before /* -> execution */ exists else False;
	
	post-condition:
		if quantityChangePrimitive -> after -> contract exists then quantityChangePrimitive -> after -> contract exists else False;  // should be included as part of the previous post-condition, but currently held back by grammar limitation


func ExtractQuantity: <"A function that abstracts away the details of how to retrieve quantity from a given product">
	inputs:
		trade Trade (1..1)
	output:
		quantity ContractualQuantity (1..1) 
	 
// TODO: turn these functions into language level operators i.e. '+'
func Plus:
	inputs:
		q1 ContractualQuantity (1..1)
		q2 ContractualQuantity (1..1)
	output:
		result ContractualQuantity (1..1)


// TODO: turn these functions into language level operators i.e. '='
func Equals:
	inputs:
		contractualQuantity ContractualQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)

// TODO: turn these functions into language level operators i.e. '>'
func GreaterThan:
	inputs:
		contractualQuantity ContractualQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)
		
// TODO: turn these functions into language level operators i.e. '>='
func GreaterThanEquals:
	inputs:
		contractualQuantity ContractualQuantity (1..1)
		scalar number (1..1)
	output:
		result boolean (1..1)
		
// TODO: turn these functions into language level operators i.e. 'sum', 'abs', '<'
func QuantityEquals:
	inputs:
		q1 Quantity (1..*)
		q2 Quantity (1..1)
		precision number (1..1)
	output:
		result boolean (1..1)
