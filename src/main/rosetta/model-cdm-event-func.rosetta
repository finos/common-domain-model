namespace org.isda.cdm
version "${project.version}"

import cdm.base.*
import cdm.base.math.*
import cdm.base.datetime.*
import cdm.base.staticdata.identifier.*
import cdm.base.staticdata.party.*
import cdm.base.staticdata.asset.common.*
import cdm.base.staticdata.asset.rates.*

import cdm.observable.common.*
import cdm.synonyms.config.*

//*********************
// Event Qualification

isEvent root BusinessEvent;

func Qualify_Allocation: <"The qualification of allocation event from the fact that (i) the only primitives are split and contract formation (ii) the number of split executions and the number of contract formations are equal.  Note that SplitPrimitive type has a condition to check that the post-split quantities sum to the pre-split quantity.  Also note that it is expected that an allocation can result in a single contract.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives -> split exists
		and businessEvent -> primitives -> contractFormation exists
		and businessEvent -> primitives -> split -> after -> splitTrades -> execution count = businessEvent -> primitives -> contractFormation -> after -> contract count

/*
 * Temporary event qualification until such time that we firm out the proper qualification and the way to infer it
 */
func Qualify_CashflowCalculationNotification:
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives count = 1
		and businessEvent -> primitives -> transfer -> cashTransfer -> transferCalculation exists
		and businessEvent -> primitives -> transfer -> identifier -> scheme = "DTCCCashflowId"

func Qualify_CashTransfer: <"The qualification of a cash transfer from the fact that the only component is a cashTransfer.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives count = 1
		and businessEvent -> primitives -> transfer exists
		and businessEvent -> primitives -> transfer -> cashTransfer exists
		and businessEvent -> primitives -> transfer -> securityTransfer is absent
		and businessEvent -> primitives -> transfer -> commodityTransfer is absent
		and businessEvent -> primitives -> transfer -> identifier -> scheme <> "DTCCCashflowId"

func Qualify_CashAndSecurityTransfer: <"The qualification of a security settlement from the fact that (i) it is composed of a cashTransfer component and a securityTransfer component, and (ii) the cash and security move in the same direction.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives -> transfer -> cashTransfer exists
		and businessEvent -> primitives -> transfer -> securityTransfer exists
		and businessEvent -> primitives -> transfer -> cashTransfer -> payerReceiver -> payerPartyReference
		-> reference = businessEvent -> primitives -> transfer -> securityTransfer -> transferorTransferee -> transferorPartyReference -> reference
		and businessEvent -> primitives -> transfer -> commodityTransfer is absent

// Simple Agency model for clearing
func Qualify_ClearedTrade:
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives count = 5
		and businessEvent -> primitives -> quantityChange count = 1
		and QuantityDecreasedToZero(businessEvent -> primitives -> quantityChange) = True
		and businessEvent -> primitives -> execution count = 2
		and businessEvent -> primitives -> contractFormation count = 2
		and businessEvent -> primitives -> execution -> after = businessEvent -> primitives -> contractFormation -> before
		// TODO - Add this back in when we correctly map the ClearingOrganization
		and businessEvent -> primitives -> contractFormation -> after -> contract -> partyRole -> role contains PartyRoleEnum -> ClearingOrganization

func Qualify_ClearingRejection: <"The rejection of an alpha trade submission by a CCP, which is qualified by the fact that (i) termsChange is the only primitive, the workflow status is `rejected`, and (iii) the CCP is positioned as a partyRole to the execution or contract in the after state, while it didn't exist in the before state.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives count = 1
		and businessEvent -> primitives -> termsChange exists
		and businessEvent -> workflowEventState -> workflowStatus = WorkflowStatusEnum -> Rejected
		and (businessEvent -> primitives -> termsChange -> before -> execution -> partyRole is absent
		or businessEvent -> primitives -> termsChange -> before -> execution -> partyRole -> role <> PartyRoleEnum -> ClearingOrganization
		or businessEvent -> primitives -> termsChange -> before -> contract -> partyRole is absent
		or businessEvent -> primitives -> termsChange -> before -> contract -> partyRole -> role <> PartyRoleEnum -> ClearingOrganization)
		and (businessEvent -> primitives -> termsChange -> after -> execution -> partyRole -> role = PartyRoleEnum -> ClearingOrganization
		or businessEvent -> primitives -> termsChange -> after -> contract -> partyRole -> role = PartyRoleEnum -> ClearingOrganization)
		and NoQuantityChange(businessEvent -> primitives -> quantityChange) = True

func Qualify_ClearingSubmission: <"The submission of a contract to a CCP, which is qualified by the fact that (i) the termsChange is the only primitive, and (ii) the CCP is positioned as a partyRole to the execution or contract in the after state, while it didn't exist in the before state.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives count = 1
		and businessEvent -> primitives -> termsChange exists
		and businessEvent -> workflowEventState -> workflowStatus = WorkflowStatusEnum -> Submitted
		and (
			businessEvent -> primitives -> termsChange -> before -> execution -> partyRole is absent
			or businessEvent -> primitives -> termsChange -> before -> execution -> partyRole -> role <> PartyRoleEnum -> ClearingOrganization
			or businessEvent -> primitives -> termsChange -> before -> contract -> partyRole is absent
			or businessEvent -> primitives -> termsChange -> before -> contract -> partyRole -> role <> PartyRoleEnum -> ClearingOrganization
		)
		and (
			businessEvent -> primitives -> termsChange -> after -> contract -> partyRole -> role = PartyRoleEnum -> ClearingOrganization
			or businessEvent -> primitives -> termsChange -> after -> contract -> partyContractInformation -> relatedParty -> role contains PartyRoleEnum -> ClearingOrganization
			or businessEvent -> primitives -> termsChange -> after -> execution -> partyRole -> role = PartyRoleEnum -> ClearingOrganization
		)

func Qualify_Compression: <"The qualification of a compression event from the fact that (i) the quantityChange primitive exists, and (ii) there are multiple contracts (or contract references) specified in the before state.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives -> quantityChange exists
		and businessEvent -> primitives -> quantityChange -> before -> contract multiple exists

func Qualify_DerivedObservation: <"The qualification of a derived observation event from the fact that (i) the only primitive is the observation, (ii) there are multiple instances of such observations, and (iii) there is an associated call function to compute, say, an interpolation.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives -> observation only multiple exists
		and businessEvent -> functionCall exists

func Qualify_Exercise: <"The qualification of an exercise event from the fact that (i) the only primitive is the exercise, and (ii) the remaining quantity = 0, and (iv) the closedState of the contract is Terminated.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives count = 1
		and businessEvent -> primitives -> exercise exists

func Qualify_Increase: <"The qualification of a increase event from the fact that (i) the intent is Increase when specified, (ii) the associated primitives are the quantityChange and the cash transfer, the (iii) the quantity associated with the contract increases.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		(businessEvent -> intent is absent or businessEvent -> intent = IntentEnum -> Increase)
		and (
			businessEvent -> primitives count = 1
			and businessEvent -> primitives -> quantityChange exists
			or (businessEvent -> primitives -> quantityChange exists
				and businessEvent -> primitives -> transfer -> cashTransfer exists
			))
		and QuantityIncreased(businessEvent -> primitives -> quantityChange) = True
		and businessEvent -> primitives -> quantityChange -> after -> contract -> closedState is absent

func Qualify_MultipleTransfers: <"The qualification an event that combines multiple transfers from the fact that multiple transfer primitives exist.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives -> transfer multiple exists

func Qualify_Novation: <"The qualification of a novation event from the fact that (i) the intent is Novation when specified, (ii) the primitives quantityChange and a contract formation exist, (iii) the remaining quantity = 0, (iv) the closedState of the contract is Novated, (v) the stepped-in contract has a different contract identifier than the novated contract, (vi) the stepped-in contract has the novation event date and the novation event effective date, and (vii) the contract counterparties have changed.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives -> quantityChange exists
		and businessEvent -> primitives -> contractFormation exists
		and QuantityDecreasedToZero(businessEvent -> primitives -> quantityChange) = True
		and businessEvent -> primitives -> quantityChange -> after -> contract -> closedState -> state = ClosedStateEnum -> Novated
		and businessEvent -> primitives -> contractFormation -> after -> contract -> contractIdentifier <> businessEvent -> primitives -> quantityChange -> before -> contract -> contractIdentifier
		and businessEvent -> eventDate = businessEvent -> primitives -> contractFormation -> after -> contract -> tradeDate -> date
		and businessEvent -> effectiveDate = NovatedContractEffectiveDate(businessEvent) -> dates only-element
		//and originalContractParties <> newContractParties

func Qualify_Observation: <"The qualification of an observation event from the fact that (i) the only primitive is the observation, and (ii) that there is only a single instance of such observation.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives -> observation only single exists

func Qualify_PartialNovation: <"The qualification of a novation event from the fact that (i) the intent is Novation when specified, (ii) the primitives quantityChange and contractFormation exist, (iii) the contract quantity/notional has decreased as part of the quantityChange primitive, while (iv) there is a remaining quantity/notional, (v) the stepped-in contract has a different contract identifier than the original contract, (vi) the stepped-in contract has the novation event date and the novation event effective date, and (vii) the contract counterparties have changed.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives -> quantityChange exists
		and businessEvent -> primitives -> contractFormation exists
		and businessEvent -> primitives -> contractFormation -> after -> contract -> contractIdentifier <> businessEvent -> primitives -> quantityChange -> before -> contract -> contractIdentifier
		and businessEvent -> eventDate = businessEvent -> primitives -> contractFormation -> after -> contract -> tradeDate -> date
		and businessEvent -> effectiveDate = NovatedContractEffectiveDate(businessEvent) -> dates
		and QuantityDecreased(businessEvent -> primitives -> quantityChange) = True
		//and originalContractParties <> newContractParties

func Qualify_PartialTermination: <"The qualification of a partial termination event from the fact that (i) the intent is Partial Termination when specified, (ii) the associated primitives are the quantityChange and the cash transfer, the (iii) the quantity associated with the contract decreases, and (iv) there is an actual remaining quantity.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		(businessEvent -> intent is absent or businessEvent -> intent = IntentEnum -> PartialTermination)
		and (businessEvent -> primitives count = 1
		and businessEvent -> primitives -> quantityChange exists
			or (businessEvent -> primitives -> quantityChange exists
				and businessEvent -> primitives -> transfer -> cashTransfer exists
			))
		and QuantityDecreased(businessEvent -> primitives -> quantityChange) = True
		and businessEvent -> primitives -> quantityChange -> after -> contract -> closedState is absent

func Qualify_Reset: <"The qualification of a reset event from the fact that the only primitive is the reset.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent (1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives count = 1
		and businessEvent -> primitives -> reset exists

func Qualify_SecurityTransfer: <"The qualification of a security transfer from the fact that the only component is a securityTransfer.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives count = 1
		and businessEvent -> primitives -> transfer exists
		and businessEvent -> primitives -> transfer -> securityTransfer exists
		and businessEvent -> primitives -> transfer -> cashTransfer is absent
		and businessEvent -> primitives -> transfer -> commodityTransfer is absent

func Qualify_SecuritySettlement: <"The qualification of a security settlement from the fact that (i) it is composed of a cashTransfer component and a securityTransfer component, and (ii) the cash and security move in opposite directions.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives -> transfer -> cashTransfer exists
		and businessEvent -> primitives -> transfer -> securityTransfer exists
		and businessEvent -> primitives -> transfer -> cashTransfer -> payerReceiver -> payerPartyReference -> reference = businessEvent -> primitives -> transfer -> securityTransfer -> transferorTransferee -> transfereePartyReference -> reference
		and businessEvent -> primitives -> transfer -> commodityTransfer is absent

func Qualify_Termination: <"The qualification of a termination event from the fact that (i) the intent is Termination when specified, (ii) the only primitive is the quantityChange and there is only one such primitive involved, the (iii) the remaining quantity is null, and (iv) the closedState of the contract is Terminated.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		(businessEvent -> intent is absent or businessEvent -> intent = IntentEnum -> Termination)
		and (businessEvent -> primitives count = 1
		and businessEvent -> primitives -> quantityChange exists
			or (businessEvent -> primitives -> quantityChange exists
				and businessEvent -> primitives -> transfer -> cashTransfer exists)
			)
		and QuantityDecreasedToZero(businessEvent -> primitives -> quantityChange) = True
		and businessEvent -> primitives -> quantityChange -> after -> contract -> closedState -> state = ClosedStateEnum -> Terminated

func Qualify_TradeWarehousePositionNotification:
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives -> contractFormation exists
		and businessEvent -> primitives -> contractFormation -> after -> tradeWarehouseWorkflow exists

func Qualify_Execution: <"The qualification of an execution event from the fact that the only component is an execution.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives count = 1 and businessEvent -> primitives -> execution exists

func Qualify_ContractFormation: <"The qualification of a contractFormation event from the fact that the only component is a contractFormation.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent(1..1)
	output: is_event boolean (1..1)
	assign-output is_event:
		businessEvent -> primitives count = 1 and businessEvent -> primitives -> contractFormation exists
		and businessEvent -> primitives -> contractFormation -> after -> tradeWarehouseWorkflow is absent

func Qualify_StockSplit: <"The qualification of StockSplit business event based on (i) an unchanged before/after currency amount (ii) the same adjustment ratio applied to the before/after cash price and number of units.">
	[qualification BusinessEvent]
	inputs:
		businessEvent BusinessEvent (1..1)
	output: is_event boolean (1..1)

	alias beforeQuantityNotation:
		businessEvent -> primitives -> quantityChange -> before -> contract -> tradableProduct -> quantityNotation
	
	alias beforeNoOfUnits:
		if beforeQuantityNotation exists
		then NoOfUnits( beforeQuantityNotation )
	
	alias afterQuantityNotation:
		businessEvent -> primitives -> quantityChange -> after -> contract -> tradableProduct -> quantityNotation
	
	alias afterNoOfUnits:
		if afterQuantityNotation exists
		then NoOfUnits( afterQuantityNotation )
	
	alias beforeCurrencyAmount: 
		if beforeQuantityNotation exists
		then CurrencyAmount( beforeQuantityNotation, empty )
	
	alias afterCurrencyAmount:
		if afterQuantityNotation exists
		then CurrencyAmount( afterQuantityNotation, empty )
	
	alias beforeCashPrices:
		businessEvent -> primitives -> termsChange -> before -> contract -> tradableProduct -> priceNotation -> price -> cashPrice -> netPrice -> amount
	
	alias beforeCashPrice:
		beforeCashPrices only-element 
	alias afterCashPrices:
		businessEvent -> primitives -> termsChange -> after -> contract -> tradableProduct -> priceNotation -> price -> cashPrice -> netPrice -> amount
	
	alias afterCashPrice:
		afterCashPrices only-element
	alias currencyAmountUnchanged:
		if ( beforeCurrencyAmount and afterCurrencyAmount ) exists
		then beforeCurrencyAmount = afterCurrencyAmount
		else False
	
	alias noOfUnitsChanged:
		if ( beforeNoOfUnits and afterNoOfUnits ) exists
		then afterNoOfUnits <> beforeNoOfUnits
		else False
	
	alias cashPriceChanged:
		if ( beforeCashPrice and afterCashPrice ) exists
		then beforeCashPrice <> afterCashPrice
		else False
	
	alias adjustmentRatioMatches:
		if ( beforeNoOfUnits and afterNoOfUnits and beforeCashPrice and afterCashPrice ) exists
		then afterNoOfUnits / beforeNoOfUnits = beforeCashPrice / afterCashPrice
		else False
	
	assign-output is_event:
		// TODO: check product type is equity?
		businessEvent -> primitives count = 2
		and currencyAmountUnchanged = True
		and noOfUnitsChanged = True
		and cashPriceChanged = True 
		and adjustmentRatioMatches = True
