namespace cdm.synonyms.cme
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.base.staticdata.identifier.*

import cdm.observable.event.*
import cdm.observable.asset.*

import cdm.product.asset.*
import cdm.product.template.*
import cdm.product.common.settlement.*

import cdm.legalagreement.contract.*

import cdm.event.common.*
import cdm.event.workflow.*

import cdm.synonyms.fpml.*
import org.isda.cdm.*

synonym source CME_ClearedConfirm_1_17 extends CME_BASE
{
	PrimitiveEvent:
		+ termsChange
			[value "ignore"]

	ContractFormationPrimitive:
		+ after
			[value "clearingConfirmed"]

	AssignedIdentifier:
		+ identifier
			[value "tradeId" meta "tradeIdScheme"]
			[value "usi" meta "usiScheme"]

	PartyContractInformation:
		+ accountReference
			[value "accountReference" meta "href"]

	Contract:
		+ contractIdentifier
			[value "universalSwapIdentifier" path "trade->tradeHeader"]
		- account

	OptionPayout:
		+ underlier
			[hint "swap"]

	CreditLimitInformation:
		+ limitApplicable
			[value "limitApplicable"]

	WorkflowStep:
		+ messageInformation
			[value "header" path "clearingConfirmed"]
		+ timestamp
			[value "timestamps" path "clearingConfirmed->trade->tradeHeader"]
			[value "header" path "clearingConfirmed"]
		+ account
			[value "account" path "clearingConfirmed"]

	BusinessEvent:
		+ eventDate
			[value "clearedDate" path "clearingConfirmed->trade->tradeHeader" maps 2]

	EventTimestamp:
		+ dateTime
			[value "creationTimestamp"]
			[value "expiryTimestamp"]
			[value "submittedForClearing"]
		+ qualification
			[set to EventTimestampQualificationEnum -> eventCreationDateTime when "creationTimestamp" exists]
			[set to EventTimestampQualificationEnum -> eventExpirationDateTime when "expiryTimestamp" exists]
			[set to EventTimestampQualificationEnum -> clearingSubmissionDateTime when "submittedForClearing" exists]

	WorkflowStepState:
		+ workflowStatus
			[value "status" path "clearingConfirmed->trade->tradeHeader"]

	LimitApplicableExtended:
		+ limitLevel
			[value "level" meta "creditLimitLevelScheme"]
		+ limitAmount
			[value "limitAmount"]
		+ limitImpactDueToTrade
			[value "limitImpactDueToTrade"]

	PayoutBase:
		- payoutQuantity
		+ payoutQuantity
			// For Equity Swap:
			[value "notional"]
				// [value "rateOfReturn"]
				// For Swap Stream:
			[value "notionalSchedule" path "calculationPeriodAmount->calculation"]
			[value "fxLinkedNotionalSchedule" path "calculationPeriodAmount->calculation"]
				// For CDS:
			[value "calculationAmount"]
			[value "calculationAmount" path "periodicPayment->fixedAmountCalculation"]
			[value "calculationAmount" path "periodicPayment->floatingAmountCalculation"]
			[value "fixedAmount"]
				// For FX:
				// [hint "paymentAmount"]
				// For Repo:
			[value "settlementAmount" path "nearLeg"]
				// For BRL CDI swaps:
			[value "calculation" path "calculationPeriodAmount"]
				// For CDS Option:
			[hint "notionalReference"]
				// For Bond Option:
			[value "notionalAmount"]

	MessageInformation:
		+ messageId
			[value "messageId" meta "messageIdScheme"]
		+ sentBy
			[value "sentBy" meta "messageAddressScheme"]
		+ sentTo
			[value "sendTo" meta "messageAddressScheme"]

	PostContractFormationState:
		+ creditLimitInformation
			[value "creditLimitInformation" path "trade->tradeHeader"]

    enums

	CategoryEnum:
		+ Customer
			[value "CUST"]
		+ Principal
			[value "HOUS"]

	CashflowTypeEnum:
		+ UpfrontFee
			[value "UPFRONT_FEE"]

	OriginatingEventEnum:
		+ Amendment
			[value "TRADE_AMEND"]
		+ Compression
			[value "RESIDUAL_TRADE"]
		+ Exercise
			[value "EXERCISE"]
		+ NewTrade
			[value "NEW_TRADE"]
		+ Novation
			[value "ASSIGNMENT"]
		+ PartialExercise
			[value "PARTIAL_EXERCISE"]
		+ PartialNovation
			[value "NOVATION"]
		+ Transfer
			[value "TRANSFER"]

	WorkflowStatusEnum:
		+ Accepted
			[value "Accepted"]
		+ Amended
			[value "AMENDED"]
		+ Cleared
			[value "CLEARED"]
		+ Rejected
			[value "Rejected"]
		+ Terminated
			[value "TERMINATED"]

	PartyRoleEnum:
		+ DataSubmitter
			[value "InputSource"]
}

synonym source CME_SubmissionIRS_1_0 extends CME_BASE
{
	PrimitiveEvent:
		+ contractFormation
			[value "ignore"]

	TermsChangePrimitive:
		+ before
			[value "ignore"]

//	TradeDate:
//		+ date
//			[value "tradeDate" path "Instrmt->SecXML->FpML->trade->tradeHeader" meta "id"]

	NotifyingParty:
	    - buyer
		+ buyer
			[value "buyerPartyReference" mapper "CmeCounterpartyEnum"]
		- seller
		+ seller
			[value "sellerPartyReference" mapper "CmeCounterpartyEnum"]

	AssignedIdentifier:
		+ identifier
			[value "RptID" path "TrdCaptRpt"]

	Contract:
		+ contractIdentifier
			[value "partyTradeIdentifier" path "Instrmt->SecXML->FpML->trade->tradeHeader"]
		+ tradeDate
//			[value "tradeHeader" path "Instrmt->SecXML->FpML->trade"]
			[value "tradeDate" path "Instrmt->SecXML->FpML->trade->tradeHeader" meta "id"]
		- tradableProduct
		+ tradableProduct
			[value "trade" path "Instrmt->SecXML->FpML" mapper "Party"]
		+ party
			[value "party" path "Instrmt->SecXML->FpML"]

	Execution:
		+ executionType
			[value "VenuTyp"]
		+ identifier
			[value "partyTradeIdentifier" path "Instrmt->SecXML->FpML->trade->tradeHeader"]
		+ tradeDate
			[value "tradeDate" path "Instrmt->SecXML->FpML->trade->tradeHeader" meta "id"]
		- tradableProduct
		+ tradableProduct
			[value "trade" path "Instrmt->SecXML->FpML" mapper "Party"]
		+ party
			[value "party" path "Instrmt->SecXML->FpML"]

	Payout:
		+ equityPayout
			[value "ignore"]
		+ forwardPayout
			[value "ignore"]

	BuyerSeller:
	    - buyer
		+ buyer
			[value "buyerPartyReference" mapper "CmeCounterpartyEnum"]
		- buyerPartyReference
		+ buyerPartyReference
			[value "buyerPartyReference" mapper "TradeSideToParty"]
		- seller
		+ seller
			[value "sellerPartyReference" mapper "CmeCounterpartyEnum"]
		- sellerPartyReference
		+ sellerPartyReference
			[value "sellerPartyReference" mapper "TradeSideToParty"]

	PayerReceiver:
	    - payer
		+ payer
			[value "payerPartyReference" mapper "CmeCounterpartyEnum"]
			[value "buyerPartyReference" maps 2 mapper "CmeCounterpartyEnum"]
		- payerPartyReference
		+ payerPartyReference
			[value "payerPartyReference" mapper "TradeSideToParty"]
			[value "buyerPartyReference" maps 2 mapper "TradeSideToParty"]
		- receiver
		+ receiver
			[value "receiverPartyReference" mapper "CmeCounterpartyEnum"]
			[value "sellerPartyReference" maps 2 mapper "CmeCounterpartyEnum"]
		- receiverPartyReference
		+ receiverPartyReference
			[value "receiverPartyReference" mapper "TradeSideToParty"]
			[value "sellerPartyReference" maps 2 mapper "TradeSideToParty"]

	LegalEntity:
		+ name
			[value "SID" path "Hdr"]

	Party:
		+ name
			[value "SID" path "Hdr"]

	ContractState:
		+ contract
			[value "FpML" path "Instrmt->SecXML"]

	CustomisedWorkflow:
		+ itemName
			[set to "ClientOrderId" when path = "ClOrdID"]
			[set to "TradeOriginationSystem" when path = "InptSrc"]
			[set to "OriginatingTradeId" when path = "OrigTrdID"]
			[set to "ExecutionTime" when path = "TrdRegTS->TS" and "TrdRegTS->Typ" = "1"]
			[set to "PartyType" when path = "Pty->R"]
			[set to "PartyIdentifier" when path = "Pty->Src"]
		+ itemValue
			[value "ClOrdID"]
			[value "InptSrc"]
			[value "OrigTrdID"]
			[value "TS" path "TrdRegTS"]
			[set to "Customer Account" when "Pty->R" = "24"]
			[set to "Custom" when "Pty->Src" = "D"]

	WorkflowStep:
		+ action
			[value "TransTyp" path "TrdCaptRpt"]

	EventTimestamp:
		+ dateTime
			[value "TxnTm" path "TrdCaptRpt"]
			[value "Snt" path "TrdCaptRpt->Hdr"]
			[value "TS" path "TrdCaptRpt->TrdRegTS"]
		+ qualification
			[set to EventTimestampQualificationEnum -> transactionCreationDateTime when path = "TrdCaptRpt->TxnTm"]
			[set to EventTimestampQualificationEnum -> eventSentDateTime when path= "TrdCaptRpt->Hdr->Snt"]
			[set to EventTimestampQualificationEnum -> executionDateTime when path= "TrdCaptRpt->TrdRegTS->TS" and "TrdCaptRpt->TrdRegTS->Typ" = 1]

	WorkflowStepState:
		+ workflowStatus
			[value "RptTyp" path "TrdCaptRpt"]
		+ partyCustomisedWorkflow
			[value "RptSide" path "TrdCaptRpt"]

	MessageInformation:
		+ sentBy
			[value "SSub" path "TrdCaptRpt->Hdr"]
		+ sentTo
			[value "TID" path "TrdCaptRpt->Hdr"]

	PartyCustomisedWorkflow:
		+ partyName
			[value "ID" path "Pty"]

	Trade:
		+ execution
			[value "TrdCaptRpt" set when "TrdCaptRpt->VenuTyp" exists]
		+ contract
			[value "TrdCaptRpt" set when "TrdCaptRpt->VenuTyp" is absent]

	TradeWarehouseWorkflow:
		+ partyCustomisedWorkflow
			[value "ignore"]

	ForeignExchange:
		- exchangedCurrency1
		- exchangedCurrency2
		- tenorPeriod
		- exchangeRate

    enums

	ExecutionTypeEnum:
	    - Electronic
		+ Electronic
			[value "E"]
		+ OffFacility
			[value "O"]

	ActionEnum:
		+ New
			[value "0"]
		+ Correct
			[value "2"]
		+ Cancel
			[value "1"]

	OriginatingEventEnum:
		+ Allocation
			[value "1"]
		+ Clearing
			[value "2"]
		+ NewTrade
			[value "0"]

	WorkflowStatusEnum:
		+ Cancelled
			[value "2"]
		+ Pending
			[value "101"]
		+ Rejected
			[value "1"]
		+ Submitted
			[value "0"]
}

synonym source CME_BASE extends FpML_5_10
{
	PrimitiveEvent:
		+ split
			[value "ignore"]
		+ exercise
			[value "ignore"]
		+ observation
			[value "ignore"]
		+ quantityChange
			[value "ignore"]
		+ reset
			[value "ignore"]
		+ transfer
			[value "ignore"]

	AssetIdentifier:
		+ productIdentifier
			[value "ignore"]

	Payout:
		+ securityPayout
			[value "ignore"]

	InterestShortFall:
		+ rateSource
			[value "rateSource" meta "floatingRateIndexScheme"]
	enums

	LimitLevelEnum:
		+ Account
			[value "ACCT"]
		+ Customer
			[value "CUST"]
		+ House
			[value "HOUS"]
}

