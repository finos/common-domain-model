version: '1.0'
stages:
  - build
  - distribute
  - finalise
steps:

  main_clone:
    title: Cloning main repository...
    type: git-clone
    git: github
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_REVISION}}"

  TagReleaseName:
    stage: 'build'
    title: Setup RELEASE_NAME variable with tag
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == true"
    commands:
      - cf_export RELEASE_NAME=${{TAG_NAME}}

  BranchReleaseName:
    stage: 'build'
    title: Setup RELEASE_NAME variable with branch name
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == false"
    commands:
      - cf_export RELEASE_NAME=${{GLOBAL_RELEASE_VERSION}}.${{CF_BRANCH_TAG_NORMALIZED}}

  BuildNormal:
    stage: 'build'
    title: Maven build
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./
    when:
      condition:
        all:
          isNotRelease: "${{TAG_REPO}} == false"
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys
      - mvn -s /settings.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -U -s /settings.xml clean install -P daml,scala,typescript,golang,csharp8,csharp9,kotlin
      - zip -r isda-demo/target/isda-demo-${{RELEASE_NAME}}.zip ./isda-demo/ -x "*.git/*" -x "*.versionsBackup*" -x "isda-demo/target/*"
      - mvn -U -s /settings.xml deploy -P daml,scala,typescript,golang,csharp8,csharp9,kotlin

  BuildRelease:
    stage: 'build'
    title: Maven build for release
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./
    when:
      condition:
        all:
          isRelease: "${{TAG_REPO}}"
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys
      - mvn -s /settings.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -s /settings.xml clean install -P daml,scala,typescript,golang,csharp8,csharp9,kotlin,full
      - zip -r isda-demo/target/isda-demo-${{RELEASE_NAME}}.zip ./isda-demo/ -x "*.git/*" -x "*.versionsBackup*"
      - mvn -s /settings.xml deploy -P daml,scala,typescript,golang,csharp8,csharp9,kotlin,full

  ParallelTasks:
    stage: 'build'
    type: parallel
    steps:
      BuildDaml:
        stage: 'build'
        title: DAML build and deploy
        fail_fast: false
        image: digitalasset/daml-sdk:1.3.0
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - daml build -o target/cdm-daml-${{RELEASE_NAME}}.dar
          - cd /codefresh/volume/${{CF_REPO_NAME}}/rosetta-source/target
          - tar -cvzf cdm-daml.tar.gz cdm-daml-${{RELEASE_NAME}}.dar
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}" -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-daml/${{RELEASE_NAME}}/cdm-daml-${{RELEASE_NAME}}.tar.gz" -T cdm-daml.tar.gz
      BuildScala:
        stage: 'build'
        title: Scala build and deploy
        fail_fast: false
        image: mozilla/sbt:8u292_1.5.7
        working_directory: ./rosetta-source/target/classes/cdm/scala
        shell: bash
        commands:
          - sbt compile
          - sbt package
          - cd /codefresh/volume/${{CF_REPO_NAME}}/rosetta-source/target/classes/cdm/scala/target/scala-2.12
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}"  -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-scala/${{RELEASE_NAME}}/cdm-scala-${{RELEASE_NAME}}.jar" -T cdm-scala_2.12-0.0.0.snapshot.jar
      BuildCSharp8:
        stage: 'build'
        title: CSharp8 build and deploy
        fail_fast: false
        image: mcr.microsoft.com/dotnet/core/sdk:3.1
        working_directory: ./rosetta-source/target/classes/cdm/csharp8/NetStandard.2.1
        shell: bash
        commands:
          - dotnet build Cdm/Cdm.csproj
          - dotnet test Test/Test.csproj
          - dotnet publish Cdm/Cdm.csproj -c release -o ./app
          - tar -cvzf cdm-csharp8.tar.gz app
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}"  -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-csharp8/${{RELEASE_NAME}}/cdm-csharp8-${{RELEASE_NAME}}.tar.gz" -T cdm-csharp8.tar.gz
      BuildCSharp9:
        stage: 'build'
        title: CSharp9 build and deploy
        fail_fast: false
        image: mcr.microsoft.com/dotnet/sdk:5.0
        working_directory: ./rosetta-source/target/classes/cdm/csharp9/Net.5.0
        shell: bash
        commands:
          - dotnet build Cdm/Cdm.csproj
          - dotnet test Test/Test.csproj
          - dotnet publish Cdm/Cdm.csproj -c release -o ./app
          - tar -cvzf cdm-csharp9.tar.gz app
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}"  -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-csharp9/${{RELEASE_NAME}}/cdm-csharp9-${{RELEASE_NAME}}.tar.gz" -T cdm-csharp9.tar.gz
      BuildTypeScript:
        stage: 'build'
        title: TypeScript build and deploy
        fail_fast: false
        image: spotify/alpine
        working_directory: ./rosetta-source/target/classes/cdm
        shell: bash
        commands:
          - tar -cvzf cdm-typescript.zip typescript
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}"  -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-typescript/${{RELEASE_NAME}}/cdm-typescript-${{RELEASE_NAME}}.zip" -T cdm-typescript.zip
      BuildGo:
        stage: 'build'
        title: Go build and deploy
        fail_fast: false
        image: spotify/alpine
        working_directory: ./rosetta-source/target/classes/cdm
        shell: bash
        commands:
          - tar -cvzf cdm-golang.tar.gz golang
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}"  -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-golang/${{RELEASE_NAME}}/cdm-golang-${{RELEASE_NAME}}.zip" -T cdm-golang.tar.gz
      BuildKotlin:
        stage: 'build'
        title: Kotlin build and deploy
        fail_fast: false
        image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - cd /codefresh/volume/${{CF_REPO_NAME}}/rosetta-source/target/classes/cdm/kotlin
          - mvn -s /settings.xml -f kotlin-pom.xml versions:set -DnewVersion=${{RELEASE_NAME}}
          - mvn -s /settings.xml -f kotlin-pom.xml clean deploy

  BuildJavaDocs:
    stage: 'build'
    title: Javadocs build and deploy
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./
    commands:
      - cd rosetta-source
      - mvn -s /settings.xml javadoc:jar
      - mvn -s /settings.xml javadoc:jar
      - cd ..
      - curl -X PUT -u ${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}} -T rosetta-source/target/cdm-${{RELEASE_NAME}}-javadoc.jar "https://regnosys.jfrog.io/artifactory/libs-snapshot-local/com/isda/cdm/${{RELEASE_NAME}}/cdm-${{RELEASE_NAME}}-javadoc.jar"

  BuildDistributionNormal:
    stage: 'distribute'
    title: Maven distribution build
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./
    when:
      condition:
        all:
          isNotRelease: "${{TAG_REPO}} == false"
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys  /codefresh/volume/.m2/com/isda
      - mvn -s /settings.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - cd cdm-distribution
      - mvn -U -s /settings.xml clean deploy -P distribute

  BuildDistributionRelease:
    stage: 'distribute'
    title: Maven distribution build for release
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./
    when:
      condition:
        all:
          isRelease: "${{TAG_REPO}}"
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys  /codefresh/volume/.m2/com/isda
      - mvn -s /settings.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - cd cdm-distribution
      - mvn -U -s /settings.xml clean deploy -P distribute,distribute-full

  DistributeDaml:
    stage: 'distribute'
    title: Maven DAML distribution
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./cdm-distribution
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys  /codefresh/volume/.m2/com/isda
      - mvn -s /settings.xml -f daml-pom.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -U -s /settings.xml -f daml-pom.xml clean deploy

  DistributeScala:
    stage: 'distribute'
    title: Maven Scala distribution
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./cdm-distribution
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys  /codefresh/volume/.m2/com/isda
      - mvn -s /settings.xml -f scala-pom.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -U -s /settings.xml -f scala-pom.xml clean deploy

  DistributeCSharp8:
    stage: 'distribute'
    title: Maven CSharp8 distribution
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./cdm-distribution
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys  /codefresh/volume/.m2/com/isda
      - mvn -s /settings.xml -f csharp8-pom.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -U -s /settings.xml -f csharp8-pom.xml clean deploy

  DistributeCSharp9:
    stage: 'distribute'
    title: Maven CSharp9 distribution
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./cdm-distribution
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys  /codefresh/volume/.m2/com/isda
      - mvn -s /settings.xml -f csharp9-pom.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -U -s /settings.xml -f csharp9-pom.xml clean deploy

  DistributeTypeScript:
    stage: 'distribute'
    title: Maven TypeScript distribution
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./cdm-distribution
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys  /codefresh/volume/.m2/com/isda
      - mvn -s /settings.xml -f typescript-pom.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -U -s /settings.xml -f typescript-pom.xml clean deploy

  DistributeGo:
    stage: 'distribute'
    title: Maven Golang distribution
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./cdm-distribution
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys  /codefresh/volume/.m2/com/isda
      - mvn -s /settings.xml -f golang-pom.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -U -s /settings.xml -f golang-pom.xml clean deploy

  DistributeKotlin:
    stage: 'distribute'
    title: Maven Kotlin distribution
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./cdm-distribution
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys  /codefresh/volume/.m2/com/isda
      - mvn -s /settings.xml -f kotlin-pom.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -U -s /settings.xml -f kotlin-pom.xml clean deploy

  NotifySlackOnFail:
    stage: 'finalise'
    title: Trigger Slack dev channel notification if master build failed
    image: codefresh/cli
    when:
      branch:
        only:
          - master
      condition:
        any:
          buildNormalFailed: steps.BuildNormal.result == 'error'
          buildReleaseFailed: steps.BuildRelease.result == 'error'
          buildDamlFailed: steps.BuildDaml.result == 'error'
          buildScalaFailed: steps.BuildScala.result == 'error'
          buildTypeScriptFailed: steps.BuildTypeScript.result == 'error'
          buildCSharp8Failed: steps.BuildCSharp8.result == 'error'
          buildCSharp9Failed: steps.BuildCSharp9.result == 'error'
          buildGoFailed: steps.BuildGo.result == 'error'
          buildKotlinFailed: steps.BuildKotlin.result == 'error'
          buildJavaDocsFailed: steps.BuildJavaDocs.result == 'error'
          distributeNormalFailed: steps.BuildDistributionNormal.result == 'error'
          distributeReleaseFailed: steps.BuildDistributionRelease.result == 'error'
          distributeDamlFailed: steps.DistributeDaml.result == 'error'
          distributeScalaFailed: steps.DistributeScala.result == 'error'
          distributeTypeScriptFailed: steps.DistributeTypeScript.result == 'error'
          distributeCSharp8Failed: steps.DistributeCSharp8.result == 'error'
          distributeCSharp9Failed: steps.DistributeCSharp9.result == 'error'
          distributeGoFailed: steps.DistributeGo.result == 'error'
          distributeKotlinFailed: steps.DistributeKotlin.result == 'error'
          distributeJavaDocsFailed: steps.DistributeJavaDocs.result == 'error'
    commands:
      - export SAFE_COMMIT_AUTHOR='${{CF_COMMIT_AUTHOR}}'
      - export COMMIT_AUTHOR=${SAFE_COMMIT_AUTHOR:-MissingAuthor}
      - export SAFE_REPO_NAME='${{CF_REPO_NAME}}'
      - export REPO_NAME=${SAFE_REPO_NAME:-NoRepo}
      - export SAFE_COMMIT_MESSAGE='${{CF_COMMIT_MESSAGE}}'
      - export COMMIT_MESSAGE=${SAFE_COMMIT_MESSAGE:-NoCommitMsg}
      - echo Author is $SAFE_COMMIT_AUTHOR and commit msg is $SAFE_COMMIT_MESSAGE and repo is $SAFE_REPO_NAME
      - echo After substitution author is $COMMIT_AUTHOR and commit msg is $COMMIT_MESSAGE and repo is $REPO_NAME
      - codefresh run slack-notifier -v REPO_NAME="${REPO_NAME}" -v COMMIT_AUTHOR="${COMMIT_AUTHOR}" -v COMMIT_MESSAGE="${COMMIT_MESSAGE}"  --detach

  FailPipeline:
    stage: 'finalise'
    title: Fail pipeline if the Maven build failed
    image: codefresh/cli
    when:
      condition:
        any:
          normalBuildFailure: steps.BuildNormal.result == 'failure'
          releaseBuildFailure: steps.BuildRelease.result == 'failure'
          damlBuildFailure: steps.BuildDaml.result == 'failure'
          scalaBuildFailure: steps.BuildScala.result == 'failure'
          typeScriptBuildFailure: steps.BuildTypeScript.result == 'failure'
          cSharp8BuildFailure: steps.BuildCSharp8.result == 'failure'
          cSharp9BuildFailure: steps.BuildCSharp9.result == 'failure'
          goBuildFailure: steps.BuildGo.result == 'failure'
          kotlinBuildFailure: steps.BuildKotlin.result == 'failure'
          javaDocsBuildFailure: steps.BuildJavaDocs.result == 'failure'
          distributeNormalFailure: steps.BuildDistributionNormal.result == 'failure'
          distributeReleaseFailure: steps.BuildDistributionRelease.result == 'failure'
          distributeDamlFailure: steps.DistributeDaml.result == 'failure'
          distributeScalaFailure: steps.DistributeScala.result == 'failure'
          distributeTypeScriptFailure: steps.DistributeTypeScript.result == 'failure'
          distributeCSharp8Failure: steps.DistributeCSharp8.result == 'failure'
          distributeCSharp9Failure: steps.DistributeCSharp9.result == 'failure'
          distributeGoFailure: steps.DistributeGo.result == 'failure'
          distributeKotlinFailure: steps.DistributeKotlin.result == 'failure'
          distributeJavaDocsFailure: steps.DistributeJavaDocs.result == 'failure'
    commands:
      - exit 1

  TagRepo:
    stage: 'finalise'
    title: Tag git repo with release name
    image: alpine/git
    when:
      condition:
        all:
          buildPassed: steps.BuildRelease.result == 'success'
          isRelease: "${{TAG_REPO}}"
    commands:
      - echo This is a release build, tag repos with release name [${{RELEASE_NAME}}]
      - git fetch --prune https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}.git "+refs/tags/*:refs/tags/*"
      - git tag ${{RELEASE_NAME}}
      - git push https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}.git ${{RELEASE_NAME}}

  StartNextBuild:
    stage: 'finalise'
    title: Build rosetta-navigation if on master
    image: codefresh/cli
    when:
      branch:
        only:
          - master
      condition:
        all:
          buildPassed: steps.BuildNormal.result == 'success'
          variableDefined: "${{TAG_REPO}} == false"
          skipNextBuild: "${{SKIP_NEXT_BUILD}} == false"
    commands:
      - codefresh run REGnosys/rosetta-navigation/rosetta-navigation --branch master --detach
