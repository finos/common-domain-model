version: '1.0'
steps:
  TagReleaseName:
    title: Setup RELEASE_NAME variable with tag
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == true"
    commands:
      - cf_export RELEASE_NAME=${{TAG_NAME}}

  BranchReleaseName:
    title: Setup RELEASE_NAME variable with branch name
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == false"
    commands:
      - cf_export RELEASE_NAME=${{GLOBAL_RELEASE_VERSION}}.${{CF_BRANCH_TAG_NORMALIZED}}

  BuildNormal:
    title: Maven build
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./
    when:
      condition:
        all:
          isNotRelease: "${{TAG_REPO}} == false"
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys
      - mvn -s /settings.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -s /settings.xml versions:update-property -Dproperty=rosetta.common.version -DnewVersion=[${{RELEASE_NAME}}] -DallowSnapshots=true -DallowDowngrade=true
      - mvn -s /settings.xml versions:update-property -Dproperty=rosetta.code-generators.version -DnewVersion=[${{RELEASE_NAME}}] -DallowSnapshots=true -DallowDowngrade=true
      - mvn -U -s /settings.xml clean deploy -P daml,scala,typescript,golang,csharp8,csharp9,kotlin

  BuildRelease:
    title: Maven build for release
    fail_fast: false
    image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
    working_directory: ./
    when:
      condition:
        all:
          isRelease: "${{TAG_REPO}}"
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys
      - mvn -s /settings.xml versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn -s /settings.xml versions:update-property -Dproperty=rosetta.common.version -DnewVersion=[${{RELEASE_NAME}}] -DallowSnapshots=true -DallowDowngrade=true
      - mvn -s /settings.xml versions:update-property -Dproperty=rosetta.code-generators.version -DnewVersion=[${{RELEASE_NAME}}] -DallowSnapshots=true -DallowDowngrade=true
      - mvn -s /settings.xml clean deploy -P daml,scala,typescript,golang,csharp8,csharp9,kotlin,full

  ParallelTasks:
    type: parallel
    steps:
      BuildDaml:
        title: DAML build and deploy
        fail_fast: false
        image: digitalasset/daml-sdk:1.3.0
        working_directory: ./codefresh/volume/rosetta-cdm/
        shell: bash
        commands:
          - daml build -o target/cdm-daml-${{RELEASE_NAME}}.dar
          - cd /codefresh/volume/rosetta-cdm/target
          - tar -cvzf cdm-daml.tar.gz cdm-daml-${{RELEASE_NAME}}.dar
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}" -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-daml/${{RELEASE_NAME}}/cdm-daml-${{RELEASE_NAME}}.tar.gz" -T cdm-daml.tar.gz
      BuildScala:
        title: Scala build and deploy
        fail_fast: false
        image: mozilla/sbt
        working_directory: ./target/classes/cdm/scala
        shell: bash
        commands:
          - sbt compile
          - sbt package
          - cd /codefresh/volume/rosetta-cdm/target/classes/cdm/scala/target/scala-2.12
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}"  -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-scala/${{RELEASE_NAME}}/cdm-scala-${{RELEASE_NAME}}.jar" -T cdm-scala_2.12-0.0.0.snapshot.jar
      BuildCSharp8:
        title: CSharp8 build and deploy
        fail_fast: false
        image: mcr.microsoft.com/dotnet/core/sdk:3.1
        working_directory: ./target/classes/cdm/csharp8/NetStandard.2.1
        shell: bash
        commands:
          - dotnet build Cdm/Cdm.csproj
          - dotnet test Test/Test.csproj
          - dotnet publish Cdm/Cdm.csproj -c release -o ./app
          - tar -cvzf cdm-csharp8.tar.gz app
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}"  -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-csharp8/${{RELEASE_NAME}}/cdm-csharp8-${{RELEASE_NAME}}.tar.gz" -T cdm-csharp8.tar.gz
      BuildCSharp9:
        title: CSharp9 build and deploy
        fail_fast: false
        image: mcr.microsoft.com/dotnet/sdk:5.0
        working_directory: ./target/classes/cdm/csharp9/Net.5.0
        shell: bash
        commands:
          - dotnet build Cdm/Cdm.csproj
          - dotnet test Test/Test.csproj
          - dotnet publish Cdm/Cdm.csproj -c release -o ./app
          - tar -cvzf cdm-csharp9.tar.gz app
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}"  -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-csharp9/${{RELEASE_NAME}}/cdm-csharp9-${{RELEASE_NAME}}.tar.gz" -T cdm-csharp9.tar.gz
      BuildTypeScript:
        title: TypeScript build and deploy
        fail_fast: false
        image: spotify/alpine
        working_directory: ./target/classes/cdm
        shell: bash
        commands:
          - tar -cvzf cdm-typescript.zip typescript
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}"  -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-typescript/${{RELEASE_NAME}}/cdm-typescript-${{RELEASE_NAME}}.zip" -T cdm-typescript.zip
      BuildGo:
        title: Go build and deploy
        fail_fast: false
        image: spotify/alpine
        working_directory: ./target/classes/cdm
        shell: bash
        commands:
          - tar -cvzf cdm-golang.tar.gz golang
          - curl --fail -u "${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}}"  -X PUT "https://regnosys.jfrog.io/regnosys/libs-snapshot-local/com/isda/cdm-golang/${{RELEASE_NAME}}/cdm-golang-${{RELEASE_NAME}}.zip" -T cdm-golang.tar.gz
      BuildKotlin:
        title: Kotlin build and deploy
        fail_fast: false
        image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
        working_directory: ./
        shell: bash
        commands:
          - cd /codefresh/volume/rosetta-cdm/target/classes/cdm/kotlin
          - mvn -s /settings.xml -f kotlin-pom.xml versions:set -DnewVersion=${{RELEASE_NAME}}
          - mvn -s /settings.xml -f kotlin-pom.xml clean deploy
      BuildJavaDocs:
        title: Javadocs build and deploy
        fail_fast: false
        image: regnosys-docker-registry.jfrog.io/regnosys/mvn-docker-build:java-11
        working_directory: ./
        commands:
          - mvn -s /settings.xml javadoc:jar
          - mvn -s /settings.xml versions:set -DnewVersion=${{RELEASE_NAME}}
          - curl -X PUT -u ${{ARTIFACTORY_USER}}:${{ARTIFACTORY_API_KEY}} -T target/cdm-${{RELEASE_NAME}}-javadoc.jar "https://regnosys.jfrog.io/artifactory/libs-snapshot-local/com/isda/cdm/${{RELEASE_NAME}}/cdm-${{RELEASE_NAME}}-javadoc.jar"

  NotifySlackOnFail:
    title: Trigger Slack dev channel notification if master build failed
    image: codefresh/cli
    when:
      branch:
        only:
          - master
      condition:
        any:
          buildNormalFailed: steps.BuildNormal.result == 'error'
          buildReleaseFailed: steps.BuildRelease.result == 'error'
          buildDamlFailed: steps.BuildDaml.result == 'error'
          buildScalaFailed: steps.BuildScala.result == 'error'
          buildTypeScriptFailed: steps.BuildTypeScript.result == 'error'
          buildCSharp8Failed: steps.BuildCSharp8.result == 'error'
          buildCSharp9Failed: steps.BuildCSharp9.result == 'error'
          buildGoFailed: steps.BuildGo.result == 'error'
    commands:
      - export SAFE_COMMIT_AUTHOR='${{CF_COMMIT_AUTHOR}}'
      - export COMMIT_AUTHOR=${SAFE_COMMIT_AUTHOR:-MissingAuthor}
      - export SAFE_REPO_NAME='${{CF_REPO_NAME}}'
      - export REPO_NAME=${SAFE_REPO_NAME:-NoRepo}
      - export SAFE_COMMIT_MESSAGE='${{CF_COMMIT_MESSAGE}}'
      - export COMMIT_MESSAGE=${SAFE_COMMIT_MESSAGE:-NoCommitMsg}
      - echo Author is $SAFE_COMMIT_AUTHOR and commit msg is $SAFE_COMMIT_MESSAGE and repo is $SAFE_REPO_NAME
      - echo After substitution author is $COMMIT_AUTHOR and commit msg is $COMMIT_MESSAGE and repo is $REPO_NAME
      - codefresh run slack-notifier -v REPO_NAME="${REPO_NAME}" -v COMMIT_AUTHOR="${COMMIT_AUTHOR}" -v COMMIT_MESSAGE="${COMMIT_MESSAGE}"  --detach

  FailPipeline:
    title: Fail pipeline if the Maven build failed
    image: codefresh/cli
    when:
      condition:
        any:
          normalBuildFailure: steps.BuildNormal.result == 'failure'
          releaseBuildFailure: steps.BuildRelease.result == 'failure'
          damlBuildFailure: steps.BuildDaml.result == 'failure'
          scalaBuildFailure: steps.BuildScala.result == 'failure'
          typeScriptBuildFailure: steps.BuildTypeScript.result == 'failure'
          cSharp8BuildFailure: steps.BuildCSharp8.result == 'failure'
          cSharp9BuildFailure: steps.BuildCSharp9.result == 'failure'
          goBuildFailure: steps.BuildGo.result == 'failure'
    commands:
      - exit 1

  TagRepo:
    title: Tag git repo with release name
    image: alpine/git
    when:
      condition:
        all:
          buildPassed: steps.BuildRelease.result == 'success'
          isRelease: "${{TAG_REPO}}"
    commands:
      - echo This is a release build, tag repos with release name [${{RELEASE_NAME}}]
      - git fetch --prune https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_PWD}}@github.com/REGnosys/${{CF_REPO_NAME}}.git "+refs/tags/*:refs/tags/*"
      - git tag ${{RELEASE_NAME}}
      - git push https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_PWD}}@github.com/REGnosys/${{CF_REPO_NAME}}.git ${{RELEASE_NAME}}

  StartNextBuild:
    title: Build rosetta-ingest if on master
    image: codefresh/cli
    when:
      branch:
        only:
          - master
      condition:
        all:
          buildPassed: steps.BuildNormal.result == 'success'
          variableDefined: "${{TAG_REPO}} == false"
          skipNextBuild: "${{SKIP_NEXT_BUILD}} == false"
    commands:
      - codefresh run REGnosys/rosetta-ingest/rosetta-ingest --branch master --detach
