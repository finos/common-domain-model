version: '1.0'
stages:
  - setup
  - build
  - distribute
  - finalise
steps:

  main_clone:
    title: Cloning main repository...
    stage: 'setup'
    type: git-clone
    git: github
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_REVISION}}"

  MvnSettings:
    stage: 'setup'
    title: Setup Maven settings
    image: alpine/git
    commands:
      - cf_export MVN_CLI_OPT="-Dmaven.repo.local=\"${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}_m2/repository\""

  SetProperties:
    stage: 'setup'
    title: Setup build
    image: alpine/git
    commands:
      - cf_export MVN_DEPLOY_FLAGS="-s ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/settings.xml -Dmaven.repo.local=${{CF_VOLUME_PATH}}/.m2 -Denv.CI_DEPLOY_PASSWORD=${{CI_DEPLOY_PASSWORD}} -Denv.CI_DEPLOY_USERNAME=${{CI_DEPLOY_USERNAME}} -Denv.GPG_KEYNAME=${{GPG_KEYNAME}} -Denv.GPG_PASSPHRASE=${{GPG_PASSPHRASE}}" --mask
      - cf_export MVN_BUILD_FLAGS="-Dmaven.repo.local=${{CF_VOLUME_PATH}}/.m2"
      - cf_export GPG_IMPORT_COMMAND="cat <(echo -e '${{GPG_PRIVATE_KEY}}') | gpg --batch --import" --mask
      - cf_export GEN_DEPLOY_POM_SCRIPT="${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/rosetta-source/src/main/resources/build-resources/create-deploy-pom.sh"
      - cf_export GEN_DEPLOY_POM_PY="${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/rosetta-source/src/main/resources/build-resources/create-deploy-pom.py"

  ReleaseProperties:
    stage: 'setup'
    title: Setup release build
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == true"
    commands:
      - cf_export RELEASE_NAME=${{TAG_NAME}}
      - cf_export MAVEN_BUILD_PROFILES="daml,scala,typescript,golang,csharp8,csharp9,kotlin,python,full,release,excel,json-schema"
      - cf_export MVN_DEPLOY_FILE_FLAGS="${{MVN_BUILD_FLAGS}} ${{MVN_DEPLOY_FLAGS}} -Durl=https://central.sonatype.com -DrepositoryId=ossrh -Dgpg.passphrase=${{GPG_PASSPHRASE}}" --mask

  SnapshotProperties:
    stage: 'setup'
    title: Setup snapshot build
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == false"
    commands:
      - cf_export RELEASE_NAME=${{GLOBAL_RELEASE_VERSION}}.${{CF_BRANCH_TAG_NORMALIZED}}-SNAPSHOT
      - cf_export MAVEN_BUILD_PROFILES="daml,scala,typescript,golang,csharp8,csharp9,kotlin,python,release,excel,json-schema"
      - cf_export MVN_DEPLOY_FILE_FLAGS="${{MVN_BUILD_FLAGS}} ${{MVN_DEPLOY_FLAGS}} -Durl=https://central.sonatype.com/repository/maven-snapshots/ -DrepositoryId=ossrh -Dgpg.passphrase=${{GPG_PASSPHRASE}}" --mask

  Build:
    stage: 'build'
    title: Maven build
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - mvn ${{MVN_BUILD_FLAGS}} ${{MVN_CLI_OPT}} versions:set -DnewVersion=${{RELEASE_NAME}} versions:update-child-modules -DallowSnapshots=true
      - mvn ${{MVN_DEPLOY_FLAGS}} ${{MVN_CLI_OPT}} install org.sonatype.central:central-publishing-maven-plugin:0.7.0:publish -P "${{MAVEN_BUILD_PROFILES}}"

  FailBuildPipeline:
    stage: 'build'
    title: Fail pipeline if the Maven build failed
    image: codefresh/cli
    when:
      condition:
        any:
          mvnBuildFailure: steps.Build.result == 'failure'
    commands:
      - exit 1

  BuildParallelTasks:
    stage: 'build'
    type: parallel
    steps:
      BuildDaml:
        stage: 'build'
        title: DAML build
        fail_fast: false
        image: digitalasset/daml-sdk:1.3.0
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - daml build -o target/cdm-daml-${{RELEASE_NAME}}.dar
      BuildScala:
        stage: 'build'
        title: Scala build
        fail_fast: false
        image: mozilla/sbt:8u292_1.5.7
        working_directory: ./rosetta-source/target/classes/cdm/scala
        shell: bash
        commands:
          - sbt compile
          - sbt package
          - sbt doc
          - sbt packageDoc packageSrc
      BuildCSharp8:
        stage: 'build'
        title: CSharp8 build
        fail_fast: false
        image: mcr.microsoft.com/dotnet/core/sdk:3.1
        working_directory: ./rosetta-source/target/classes/cdm/csharp8/NetStandard.2.1
        shell: bash
        commands:
          - dotnet build Cdm/Cdm.csproj
          - dotnet test Test/Test.csproj
          - dotnet publish Cdm/Cdm.csproj -c release -o ./app
      BuildCSharp9:
        stage: 'build'
        title: CSharp9 build
        fail_fast: false
        image: mcr.microsoft.com/dotnet/sdk:5.0
        working_directory: ./rosetta-source/target/classes/cdm/csharp9/Net.5.0
        shell: bash
        commands:
          - dotnet build Cdm/Cdm.csproj
          - dotnet test Test/Test.csproj
          - dotnet publish Cdm/Cdm.csproj -c release -o ./app
      BuildPython:
        stage: 'build'
        title: Python build
        fail_fast: false
        image: python:3.10-alpine
        working_directory: ./
        shell: sh
        commands:
          - export PYTHONDONTWRITEBYTECODE=1
          - python3 -m pip install pydantic
          - python3 -m pip install jsonpickle
          - python3 -m pip install ./rosetta-source/target/classes/cdm/python/runtime/rosetta_runtime-2.1.0-py3-none-any.whl
          - |-
            python3 -m pip wheel --no-deps --only-binary :all: --wheel-dir ./rosetta-source/target/classes/cdm/python ./rosetta-source/target/classes/cdm/python
          - python3 -m pip install ./rosetta-source/target/classes/cdm/python/python_cdm-*-py3-none-any.whl
          - python3 -m pip install pytest
#          - pytest -p no:cacheprovider ./cdm-python/test/
          
  DeployDaml:
    stage: 'build'
    title: DAML deploy
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./rosetta-source/
    shell: bash
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - cd target
      - tar -cvzf cdm-daml-${{RELEASE_NAME}}.tar.gz cdm-daml-${{RELEASE_NAME}}.dar
      - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-daml ${{RELEASE_NAME}} tar.gz
      - mvn org.apache.maven.plugins:maven-gpg-plugin:3.2.7:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-daml-${{RELEASE_NAME}}.tar.gz -DgroupId=org.finos.cdm -DartifactId=cdm-daml -Dversion=${{RELEASE_NAME}} -Dpackaging=tar.gz -DpomFile=cdm-daml-${{RELEASE_NAME}}.pom

  DeployScala:
    stage: 'build'
    title: Scala deploy
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./rosetta-source/
    shell: bash
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - cd target/classes/cdm/scala/target/scala-2.12
      - mv cdm-scala_2.12-0.0.0.snapshot.jar cdm-scala-${{RELEASE_NAME}}.jar
      - mv cdm-scala_2.12-0.0.0.snapshot-sources.jar cdm-scala-${{RELEASE_NAME}}-sources.jar
      - mv cdm-scala_2.12-0.0.0.snapshot-javadoc.jar cdm-scala-${{RELEASE_NAME}}-javadoc.jar
      - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-scala ${{RELEASE_NAME}} jar
      - mvn org.apache.maven.plugins:maven-gpg-plugin:3.2.7:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-scala-${{RELEASE_NAME}}.jar -DgroupId=org.finos.cdm -DartifactId=cdm-scala -Dversion=${{RELEASE_NAME}} -DpomFile=cdm-scala-${{RELEASE_NAME}}.pom -Dsources=cdm-scala-${{RELEASE_NAME}}-sources.jar -Djavadoc=cdm-scala-${{RELEASE_NAME}}-javadoc.jar

  DeployCSharp8:
    stage: 'build'
    title: CSharp8 deploy
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./rosetta-source/
    shell: bash
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - cd target/classes/cdm/csharp8/NetStandard.2.1
      - tar -cvzf cdm-csharp8-${{RELEASE_NAME}}.tar.gz app
      - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-csharp8 ${{RELEASE_NAME}} tar.gz
      - mvn org.apache.maven.plugins:maven-gpg-plugin:3.2.7:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-csharp8-${{RELEASE_NAME}}.tar.gz -DgroupId=org.finos.cdm -DartifactId=cdm-csharp8 -Dversion=${{RELEASE_NAME}} -Dpackaging=tar.gz -DpomFile=cdm-csharp8-${{RELEASE_NAME}}.pom

  DeployCSharp9:
    stage: 'build'
    title: CSharp9 deploy
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./rosetta-source/
    shell: bash
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - cd target/classes/cdm/csharp9/Net.5.0
      - tar -cvzf cdm-csharp9-${{RELEASE_NAME}}.tar.gz app
      - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-csharp9 ${{RELEASE_NAME}} tar.gz
      - mvn org.apache.maven.plugins:maven-gpg-plugin:3.2.7:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-csharp9-${{RELEASE_NAME}}.tar.gz -DgroupId=org.finos.cdm -DartifactId=cdm-csharp9 -Dversion=${{RELEASE_NAME}} -Dpackaging=tar.gz -DpomFile=cdm-csharp9-${{RELEASE_NAME}}.pom

  DeployTypeScript:
    stage: 'build'
    title: TypeScript deploy
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./rosetta-source/
    shell: bash
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - cd target/classes/cdm
      - tar -cvzf cdm-typescript-${{RELEASE_NAME}}.zip typescript
      - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-typescript ${{RELEASE_NAME}} zip
      - mvn org.apache.maven.plugins:maven-gpg-plugin:3.2.7:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-typescript-${{RELEASE_NAME}}.zip -DgroupId=org.finos.cdm -DartifactId=cdm-typescript -Dversion=${{RELEASE_NAME}} -DpomFile=cdm-typescript-${{RELEASE_NAME}}.pom

  DeployGo:
    stage: 'build'
    title: Go deploy
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./rosetta-source/
    shell: bash
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - cd target/classes/cdm
      - tar -cvzf cdm-golang-${{RELEASE_NAME}}.tar.gz golang
      - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-golang ${{RELEASE_NAME}} tar.gz
      - mvn org.apache.maven.plugins:maven-gpg-plugin:3.2.7:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-golang-${{RELEASE_NAME}}.tar.gz -DgroupId=org.finos.cdm -DartifactId=cdm-golang -Dversion=${{RELEASE_NAME}} -Dpackaging=tar.gz -DpomFile=cdm-golang-${{RELEASE_NAME}}.pom

  DeployKotlin:
    stage: 'build'
    title: Kotlin deploy
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./rosetta-source/
    shell: bash
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - cd target/classes/cdm/kotlin
      - mvn -f kotlin-build-pom.xml ${{MVN_BUILD_FLAGS}} ${{MVN_CLI_OPT}} versions:set -DnewVersion=${{RELEASE_NAME}} -DallowSnapshots=true
      - mvn -f kotlin-build-pom.xml ${{MVN_DEPLOY_FLAGS}} ${{MVN_CLI_OPT}} install org.sonatype.central:central-publishing-maven-plugin:0.7.0:publish -P release

  DeployPython:
    stage: 'build'
    title: Python deploy
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./rosetta-source/
    shell: bash
    commands:
      - apk add --no-cache python3
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - cd target/classes/cdm/python
      - tar -cvzf cdm-python-${{RELEASE_NAME}}.tar.gz python_cdm-*-py3-none-any.whl runtime/rosetta_runtime-*-py3-none-any.whl
      - python3 ${{GEN_DEPLOY_POM_PY}} cdm-python ${{RELEASE_NAME}} tar.gz ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/rosetta-source/src/main/resources/build-resources/python/python-developer.txt
      - mvn org.apache.maven.plugins:maven-gpg-plugin:3.2.7:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-python-${{RELEASE_NAME}}.tar.gz -DgroupId=org.finos.cdm -DartifactId=cdm-python -Dversion=${{RELEASE_NAME}} -Dpackaging=tar.gz -DpomFile=cdm-python-${{RELEASE_NAME}}.pom

  DeployExcel:
    stage: 'build'
    title: Excel deploy
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./rosetta-source/
    shell: bash
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - cd src/generated/excel
      - mv model.xlsx encoded.model.xlsx
      - base64 -d encoded.model.xlsx > cdm-excel-${{RELEASE_NAME}}.xlsx
      - rm encoded.model.xlsx
      - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-excel ${{RELEASE_NAME}} xlsx
      - mvn org.apache.maven.plugins:maven-gpg-plugin:3.2.7:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-excel-${{RELEASE_NAME}}.xlsx  -DgroupId=org.finos.cdm -DartifactId=cdm-excel -Dversion=${{RELEASE_NAME}} -DpomFile=cdm-excel-${{RELEASE_NAME}}.pom

  DeployJsonSchema:
    stage: 'build'
    title: JSON Schema deploy
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./rosetta-source/
    shell: bash
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - cd src/generated
      - tar -cvzf cdm-json-schema-${{RELEASE_NAME}}.zip jsonschema
      - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-json-schema ${{RELEASE_NAME}} zip
      - mvn org.apache.maven.plugins:maven-gpg-plugin:3.2.7:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-json-schema-${{RELEASE_NAME}}.zip -DgroupId=org.finos.cdm -DartifactId=cdm-json-schema -Dversion=${{RELEASE_NAME}} -DpomFile=cdm-json-schema-${{RELEASE_NAME}}.pom

  FailDeployPipeline:
    stage: 'finalise'
    title: Fail pipeline if the Maven deploy failed
    image: codefresh/cli
    when:
      condition:
        any:
          damlBuildFailure: steps.BuildDaml.result == 'failure'
          scalaBuildFailure: steps.BuildScala.result == 'failure'
          cSharp8BuildFailure: steps.BuildCSharp8.result == 'failure'
          cSharp9BuildFailure: steps.BuildCSharp9.result == 'failure'
          pythonBuildFailure: steps.BuildPython.result == 'failure'
          damlDeployFailure: steps.DeployDaml.result == 'failure'
          scalaDeployFailure: steps.DeployScala.result == 'failure'
          typeScriptDeployFailure: steps.DeployTypeScript.result == 'failure'
          cSharp8DeployFailure: steps.DeployCSharp8.result == 'failure'
          cSharp9DeployFailure: steps.DeployCSharp9.result == 'failure'
          goDeployFailure: steps.DeployGo.result == 'failure'
          kotlinDeployFailure: steps.DeployKotlin.result == 'failure'
          pythonDeployFailure: steps.DeployPython.result == 'failure'
          excelDeployFailure: steps.DeployExcel.result == 'failure'
          jsonSchemaDeployFailure: steps.DeployJsonSchema.result == 'failure'
    commands:
      - exit 1

  TagRepo:
    stage: 'finalise'
    title: Tag git repo with release name
    image: alpine/git
    when:
      condition:
        all:
          buildPassed: steps.Build.result == 'success'
          isRelease: "${{TAG_REPO}}"
    commands:
      - echo This is a release build, tag repos with release name [${{RELEASE_NAME}}]
      - git fetch --prune https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}.git "+refs/tags/*:refs/tags/*"
      - git tag ${{RELEASE_NAME}}
      - git push https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}.git ${{RELEASE_NAME}}

