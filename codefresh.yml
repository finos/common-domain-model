version: '1.0'
stages:
  - setup
  - build
  - distribute
  - finalise
steps:

  main_clone:
    title: Cloning main repository...
    stage: 'setup'
    type: git-clone
    git: github
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_REVISION}}"

  SetProperties:
    stage: 'setup'
    title: Setup build
    image: alpine/git
    commands:
      - cf_export REPO_PATH=${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
      - cf_export MVN_DEPLOY_FLAGS="-s ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/settings.xml -Dmaven.repo.local=${{CF_VOLUME_PATH}}/.m2 -Denv.CI_DEPLOY_PASSWORD=${{CI_DEPLOY_PASSWORD}} -Denv.CI_DEPLOY_USERNAME=${{CI_DEPLOY_USERNAME}} -Denv.GPG_KEYNAME=${{GPG_KEYNAME}} -Denv.GPG_PASSPHRASE=${{GPG_PASSPHRASE}}"
      - cf_export MVN_BUILD_FLAGS="-Dmaven.repo.local=${{CF_VOLUME_PATH}}/.m2"
      - cf_export GPG_IMPORT_COMMAND="cat <(echo -e '${{GPG_PRIVATE_KEY}}') | gpg --batch --import"
      - cf_export GEN_DEPLOY_POM_SCRIPT="${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/rosetta-source/src/main/resources/build-resources/create-deploy-pom.sh"
      - cf_export GEN_DEPLOY_POM_PY="${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/rosetta-source/src/main/resources/build-resources/create-deploy-pom.py"

  ReleaseProperties:
    stage: 'setup'
    title: Setup release build
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == true"
    commands:
      - cf_export RELEASE_NAME=${{TAG_NAME}}
      - cf_export MAVEN_BUILD_PROFILES="daml,scala,typescript,golang,csharp8,csharp9,kotlin,python,full,gpg"
      - cf_export MVN_DEPLOY_FILE_FLAGS="${{MVN_BUILD_FLAGS}} ${{MVN_DEPLOY_FLAGS}} -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2 -DrepositoryId=ossrh-distro -Dgpg.passphrase=${{GPG_PASSPHRASE}}"

  SnapshotProperties:
    stage: 'setup'
    title: Setup snapshot build
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == false"
    commands:
      - cf_export RELEASE_NAME=${{GLOBAL_RELEASE_VERSION}}.${{CF_BRANCH_TAG_NORMALIZED}}-SNAPSHOT
      - cf_export MAVEN_BUILD_PROFILES="daml,scala,typescript,golang,csharp8,csharp9,kotlin,python,gpg"
      - cf_export MVN_DEPLOY_FILE_FLAGS="${{MVN_BUILD_FLAGS}} ${{MVN_DEPLOY_FLAGS}} -Durl=https://oss.sonatype.org/content/repositories/snapshots -DrepositoryId=ossrh -Dgpg.passphrase=${{GPG_PASSPHRASE}}"

  Build:
    stage: 'build'
    title: Maven build
    fail_fast: false
    image: maven:3.8.2-jdk-11
    working_directory: ./
    commands:
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - mvn ${{MVN_BUILD_FLAGS}} versions:set -DnewVersion=${{RELEASE_NAME}} versions:update-child-modules -DallowSnapshots=true
      - mvn ${{MVN_DEPLOY_FLAGS}} clean deploy -P "${{MAVEN_BUILD_PROFILES}}"

  BuildParallelTasks:
    stage: 'build'
    type: parallel
    steps:
      BuildDaml:
        stage: 'build'
        title: DAML build
        fail_fast: false
        image: digitalasset/daml-sdk:1.3.0
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - daml build -o target/cdm-daml-${{RELEASE_NAME}}.dar
      BuildScala:
        stage: 'build'
        title: Scala build
        fail_fast: false
        image: mozilla/sbt:8u292_1.5.7
        working_directory: ./rosetta-source/target/classes/cdm/scala
        shell: bash
        commands:
          - sbt compile
          - sbt package
          - sbt doc
          - sbt packageDoc packageSrc
      BuildCSharp8:
        stage: 'build'
        title: CSharp8 build
        fail_fast: false
        image: mcr.microsoft.com/dotnet/core/sdk:3.1
        working_directory: ./rosetta-source/target/classes/cdm/csharp8/NetStandard.2.1
        shell: bash
        commands:
          - dotnet build Cdm/Cdm.csproj
          - dotnet test Test/Test.csproj
          - dotnet publish Cdm/Cdm.csproj -c release -o ./app
      BuildCSharp9:
        stage: 'build'
        title: CSharp9 build
        fail_fast: false
        image: mcr.microsoft.com/dotnet/sdk:5.0
        working_directory: ./rosetta-source/target/classes/cdm/csharp9/Net.5.0
        shell: bash
        commands:
          - dotnet build Cdm/Cdm.csproj
          - dotnet test Test/Test.csproj
          - dotnet publish Cdm/Cdm.csproj -c release -o ./app
      BuildPython:
        stage: 'build'
        title: Python build
        fail_fast: false
        image: python:3.10-alpine
        working_directory: ./rosetta-source
        shell: sh
        commands:
          - python3 -m pip install "pydantic==1.*"
          - python3 -m pip install jsonpickle
          - python3 -m pip install ./target/classes/cdm/python/runtime/rosetta_runtime-1.0.0-py3-none-any.whl
          - |-
            python3 -m pip wheel --no-deps --only-binary :all: --wheel-dir ./target/classes/cdm/python ./target/classes/cdm/python
          - python3 -m pip install ./target/classes/cdm/python/python_cdm-*-py3-none-any.whl
          - python3 -m pip install pytest
          - pytest ./src/test/python/
          - rm -rf ./src/test/python/serialization/__pycache__ ./src/test/python/semantics/__pycache__

  DeployParallelTasks:
    stage: 'build'
    type: parallel
    steps:
      DeployDaml:
        stage: 'build'
        title: DAML deploy
        fail_fast: false
        image: maven:3.8.2-jdk-11
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - bash -c "${{GPG_IMPORT_COMMAND}}"
          - cd target
          - tar -cvzf cdm-daml-${{RELEASE_NAME}}.tar.gz cdm-daml-${{RELEASE_NAME}}.dar
          - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-daml ${{RELEASE_NAME}} tar.gz
          - mvn gpg:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-daml-${{RELEASE_NAME}}.tar.gz -DgroupId=org.finos.cdm -DartifactId=cdm-daml -Dversion=${{RELEASE_NAME}} -Dpackaging=tar.gz -DpomFile=cdm-daml-${{RELEASE_NAME}}.pom
      DeployScala:
        stage: 'build'
        title: Scala deploy
        fail_fast: false
        image: maven:3.8.2-jdk-11
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - bash -c "${{GPG_IMPORT_COMMAND}}"
          - cd target/classes/cdm/scala/target/scala-2.12
          - mv cdm-scala_2.12-0.0.0.snapshot.jar cdm-scala-${{RELEASE_NAME}}.jar
          - mv cdm-scala_2.12-0.0.0.snapshot-sources.jar cdm-scala-${{RELEASE_NAME}}-sources.jar
          - mv cdm-scala_2.12-0.0.0.snapshot-javadoc.jar cdm-scala-${{RELEASE_NAME}}-javadoc.jar
          - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-scala ${{RELEASE_NAME}} jar
          - mvn gpg:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-scala-${{RELEASE_NAME}}.jar -DgroupId=org.finos.cdm -DartifactId=cdm-scala -Dversion=${{RELEASE_NAME}} -DpomFile=cdm-scala-${{RELEASE_NAME}}.pom -Dsources=cdm-scala-${{RELEASE_NAME}}-sources.jar -Djavadoc=cdm-scala-${{RELEASE_NAME}}-javadoc.jar
      DeployCSharp8:
        stage: 'build'
        title: CSharp8 deploy
        fail_fast: false
        image: maven:3.8.2-jdk-11
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - bash -c "${{GPG_IMPORT_COMMAND}}"
          - cd target/classes/cdm/csharp8/NetStandard.2.1
          - tar -cvzf cdm-csharp8-${{RELEASE_NAME}}.tar.gz app
          - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-csharp8 ${{RELEASE_NAME}} tar.gz
          - mvn gpg:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-csharp8-${{RELEASE_NAME}}.tar.gz -DgroupId=org.finos.cdm -DartifactId=cdm-csharp8 -Dversion=${{RELEASE_NAME}} -Dpackaging=tar.gz -DpomFile=cdm-csharp8-${{RELEASE_NAME}}.pom
      DeployCSharp9:
        stage: 'build'
        title: CSharp9 deploy
        fail_fast: false
        image: maven:3.8.2-jdk-11
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - bash -c "${{GPG_IMPORT_COMMAND}}"
          - cd target/classes/cdm/csharp9/Net.5.0
          - tar -cvzf cdm-csharp9-${{RELEASE_NAME}}.tar.gz app
          - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-csharp9 ${{RELEASE_NAME}} tar.gz
          - mvn gpg:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-csharp9-${{RELEASE_NAME}}.tar.gz -DgroupId=org.finos.cdm -DartifactId=cdm-csharp9 -Dversion=${{RELEASE_NAME}} -Dpackaging=tar.gz -DpomFile=cdm-csharp9-${{RELEASE_NAME}}.pom
      DeployTypeScript:
        stage: 'build'
        title: TypeScript deploy
        fail_fast: false
        image: maven:3.8.2-jdk-11
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - bash -c "${{GPG_IMPORT_COMMAND}}"
          - cd target/classes/cdm
          - tar -cvzf cdm-typescript-${{RELEASE_NAME}}.zip typescript
          - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-typescript ${{RELEASE_NAME}} zip
          - mvn gpg:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-typescript-${{RELEASE_NAME}}.zip -DgroupId=org.finos.cdm -DartifactId=cdm-typescript -Dversion=${{RELEASE_NAME}} -DpomFile=cdm-typescript-${{RELEASE_NAME}}.pom
      DeployGo:
        stage: 'build'
        title: Go deploy
        fail_fast: false
        image: maven:3.8.2-jdk-11
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - bash -c "${{GPG_IMPORT_COMMAND}}"
          - cd target/classes/cdm
          - tar -cvzf cdm-golang-${{RELEASE_NAME}}.tar.gz golang
          - ${{GEN_DEPLOY_POM_SCRIPT}} cdm-golang ${{RELEASE_NAME}} tar.gz
          - mvn gpg:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-golang-${{RELEASE_NAME}}.tar.gz -DgroupId=org.finos.cdm -DartifactId=cdm-golang -Dversion=${{RELEASE_NAME}} -Dpackaging=tar.gz -DpomFile=cdm-golang-${{RELEASE_NAME}}.pom
      DeployKotlin:
        stage: 'build'
        title: Kotlin deploy
        fail_fast: false
        image: maven:3.8.2-jdk-11
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - bash -c "${{GPG_IMPORT_COMMAND}}"
          - cd target/classes/cdm/kotlin
          - mvn -f kotlin-build-pom.xml ${{MVN_BUILD_FLAGS}} versions:set -DnewVersion=${{RELEASE_NAME}} -DallowSnapshots=true
          - mvn -f kotlin-build-pom.xml ${{MVN_DEPLOY_FLAGS}} clean deploy -P gpg
      DeployPython:
        stage: 'build'
        title: Python deploy
        fail_fast: false
        image: maven:3.8.2-jdk-11
        working_directory: ./rosetta-source/
        shell: bash
        commands:
          - bash -c "${{GPG_IMPORT_COMMAND}}"
          - cd target/classes/cdm/python
          - tar -cvzf cdm-python-${{RELEASE_NAME}}.tar.gz python_cdm-*-py3-none-any.whl runtime/rosetta_runtime-*-py3-none-any.whl
          - python3 ${{GEN_DEPLOY_POM_PY}} cdm-python ${{RELEASE_NAME}} tar.gz ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}/rosetta-source/src/main/resources/build-resources/python/python-developer.txt
          - mvn gpg:sign-and-deploy-file ${{MVN_DEPLOY_FILE_FLAGS}} -Dfile=cdm-python-${{RELEASE_NAME}}.tar.gz -DgroupId=org.finos.cdm -DartifactId=cdm-python -Dversion=${{RELEASE_NAME}} -Dpackaging=tar.gz -DpomFile=cdm-python-${{RELEASE_NAME}}.pom

  NotifySlackOnFail:
    stage: 'finalise'
    title: Trigger Slack dev channel notification if master build failed
    image: codefresh/cli
    when:
      branch:
        only:
          - master
      condition:
        any:
          mvnBuildFailed: steps.Build.result == 'error'
          buildDamlFailed: steps.BuildDaml.result == 'error'
          buildScalaFailed: steps.BuildScala.result == 'error'
          buildCSharp8Failed: steps.BuildCSharp8.result == 'error'
          buildCSharp9Failed: steps.BuildCSharp9.result == 'error'
          buildPythonFailed: steps.BuildPython.result == 'error'
          deployDamlFailed: steps.DeployDaml.result == 'error'
          deployScalaFailed: steps.DeployScala.result == 'error'
          deployTypeScriptFailed: steps.DeployTypeScript.result == 'error'
          deployCSharp8Failed: steps.DeployCSharp8.result == 'error'
          deployCSharp9Failed: steps.DeployCSharp9.result == 'error'
          deployGoFailed: steps.DeployGo.result == 'error'
          deployKotlinFailed: steps.DeployKotlin.result == 'error'
          deployPythonFailed: steps.DeployPython.result == 'error'
    commands:
      - export SAFE_COMMIT_AUTHOR='${{CF_COMMIT_AUTHOR}}'
      - export COMMIT_AUTHOR=${SAFE_COMMIT_AUTHOR:-MissingAuthor}
      - export SAFE_REPO_NAME='${{CF_REPO_NAME}}'
      - export REPO_NAME=${SAFE_REPO_NAME:-NoRepo}
      - export SAFE_COMMIT_MESSAGE='${{CF_COMMIT_MESSAGE}}'
      - export COMMIT_MESSAGE=${SAFE_COMMIT_MESSAGE:-NoCommitMsg}
      - echo Author is $SAFE_COMMIT_AUTHOR and commit msg is $SAFE_COMMIT_MESSAGE and repo is $SAFE_REPO_NAME
      - echo After substitution author is $COMMIT_AUTHOR and commit msg is $COMMIT_MESSAGE and repo is $REPO_NAME
      - codefresh run slack-notifier -v REPO_NAME="${REPO_NAME}" -v COMMIT_AUTHOR="${COMMIT_AUTHOR}" -v COMMIT_MESSAGE="${COMMIT_MESSAGE}"  --detach

  FailPipeline:
    stage: 'finalise'
    title: Fail pipeline if the Maven build failed
    image: codefresh/cli
    when:
      condition:
        any:
          mvnBuildFailure: steps.Build.result == 'failure'
          damlBuildFailure: steps.BuildDaml.result == 'failure'
          scalaBuildFailure: steps.BuildScala.result == 'failure'
          cSharp8BuildFailure: steps.BuildCSharp8.result == 'failure'
          cSharp9BuildFailure: steps.BuildCSharp9.result == 'failure'
          pythonBuildFailure: steps.BuildPython.result == 'failure'
          damlDeployFailure: steps.DeployDaml.result == 'failure'
          scalaDeployFailure: steps.DeployScala.result == 'failure'
          typeScriptDeployFailure: steps.DeployTypeScript.result == 'failure'
          cSharp8DeployFailure: steps.DeployCSharp8.result == 'failure'
          cSharp9DeployFailure: steps.DeployCSharp9.result == 'failure'
          goDeployFailure: steps.DeployGo.result == 'failure'
          kotlinDeployFailure: steps.DeployKotlin.result == 'failure'
          pythonDeployFailure: steps.DeployPython.result == 'failure'
    commands:
      - exit 1

  TagRepo:
    stage: 'finalise'
    title: Tag git repo with release name
    image: alpine/git
    when:
      condition:
        all:
          buildPassed: steps.Build.result == 'success'
          isRelease: "${{TAG_REPO}}"
    commands:
      - echo This is a release build, tag repos with release name [${{RELEASE_NAME}}]
      - git fetch --prune https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}.git "+refs/tags/*:refs/tags/*"
      - git tag ${{RELEASE_NAME}}
      - git push https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}.git ${{RELEASE_NAME}}

  StartNextBuild:
    stage: 'finalise'
    title: Build rosetta-navigation if on master
    image: codefresh/cli
    when:
      branch:
        only:
          - master
      condition:
        all:
          buildPassed: steps.Build.result == 'success'
          variableDefined: "${{TAG_REPO}} == false"
          skipNextBuild: "${{SKIP_NEXT_BUILD}} == false"
    commands:
      - codefresh run REGnosys/rosetta-navigation/rosetta-navigation --branch master --detach
