namespace cdm.ingest.fpml.confirmation.product.fxsingleleg: <"FpML FxSingleLeg product mapping functions.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.observable.asset.*
import cdm.product.common.settlement.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.pricequantity.*
import cdm.ingest.fpml.confirmation.settlement.*

func MapFxSingleLegCounterpartyList:
    inputs:
        fpmlFxSingleLeg fpml.FxSingleLeg (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapPayerReceiverModelToCounterpartyList(
                GetFpmlExchangedCurrency(fpmlFxSingleLeg -> fxCoreDetailsModel) -> payerReceiverModel
            )

func MapFxSingleLegAncillaryPartyList:
    inputs:
        fpmlFxSingleLeg fpml.FxSingleLeg (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapFxSingleLegNonTransferableProduct:
    inputs:
        fpmlFxSingleLeg fpml.FxSingleLeg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlFxSingleLeg -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlFxSingleLeg -> productModel),
            economicTerms: MapFxSingleLegEconomicTerms(fpmlFxSingleLeg, cdmCounterpartyList)
        }

func MapFxSingleLegEconomicTerms:
    inputs:
        fpmlFxSingleLeg fpml.FxSingleLeg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            payout: MapFxCoreDetailsModelToSettlementPayout(
                    fpmlFxSingleLeg -> fxCoreDetailsModel,
                    empty,
                    cdmCounterpartyList
                ),
            ...
        }

func MapFxCoreDetailsModelToSettlementPayout:
    inputs:
        fpmlFxCoreDetailsModel fpml.FxCoreDetailsModel (0..1)
        fpmlLeg fpml.Leg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    alias exchangedCurrency: GetFpmlExchangedCurrency(fpmlFxCoreDetailsModel)

    set payout:
        Payout {
            SettlementPayout: SettlementPayout {
                payerReceiver: MapPayerReceiver(
                        exchangedCurrency -> payerReceiverModel,
                        cdmCounterpartyList
                    ),
                priceQuantity: ResolvablePriceQuantity {
                    quantitySchedule: MapFxCoreDetailsModelQuantityWithAddress(
                            fpmlFxCoreDetailsModel,
                            fpmlLeg
                        ),
                    priceSchedule: MapFxCoreDetailsModelPriceWithAddress(
                            fpmlFxCoreDetailsModel,
                            fpmlLeg
                        ),
                    ...
                },
                settlementTerms: MapFxCashSettlementToSettlementTerms(
                        fpmlFxCoreDetailsModel -> nonDeliverableSettlement,
                        fpmlFxCoreDetailsModel -> valueDate -> date
                    ),
                underlier: Underlier {
                    Observable: MapCurrencyToObservableCashWithAddress(
                            exchangedCurrency -> paymentAmount -> currency,
                            fpmlLeg
                        ),
                    ...
                },
                ...
            },
            ...
        }

func MapFxSingleLegPriceQuantityList:
    inputs:
        fpmlFxSingleLeg fpml.FxSingleLeg (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    add priceQuantityList:
        MapFxCoreDetailsModelPriceQuantityList(fpmlFxSingleLeg -> fxCoreDetailsModel, empty)

func MapFxSingleLegAccountPartyReference:
    inputs:
        fpmlFxSingleLeg fpml.FxSingleLeg (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapPayerReceiverToAccountPartyReference(
                fpmlAccount,
                [fpmlFxSingleLeg -> fxCoreDetailsModel -> exchangedCurrency1 -> payerReceiverModel, fpmlFxSingleLeg -> fxCoreDetailsModel -> exchangedCurrency2 -> payerReceiverModel]
            )
