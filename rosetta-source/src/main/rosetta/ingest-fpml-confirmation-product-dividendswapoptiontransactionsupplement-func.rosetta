namespace cdm.ingest.fpml.confirmation.product.dividendswapoptiontransactionsupplement: <"FpML DividendSwapOptionTransactionSupplement product mapping functions.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.observable.asset.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.product.dividendswaptransactionsupplement.*
import cdm.ingest.fpml.confirmation.settlement.*

func MapDividendSwapOptionTransactionSupplementCounterpartyList:
    inputs:
        fpmlDividendSwapOptionTransactionSupplement fpml.DividendSwapOptionTransactionSupplement (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapBuyerSellerModelToCounterpartyList(
                fpmlDividendSwapOptionTransactionSupplement -> buyerSellerModel
            )

func MapDividendSwapOptionTransactionSupplementAncillaryPartyList:
    inputs:
        fpmlDividendSwapOptionTransactionSupplement fpml.DividendSwapOptionTransactionSupplement (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapDividendSwapOptionTransactionSupplementNonTransferableProduct:
    inputs:
        fpmlDividendSwapOptionTransactionSupplement fpml.DividendSwapOptionTransactionSupplement (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(
                    fpmlDividendSwapOptionTransactionSupplement -> productModel
                ),
            taxonomy: MapProductTaxonomyList(
                    fpmlDividendSwapOptionTransactionSupplement -> productModel
                ),
            economicTerms: MapDividendSwapOptionTransactionSupplementEconomicTerms(
                    fpmlDividendSwapOptionTransactionSupplement,
                    cdmCounterpartyList
                )
        }

func MapDividendSwapOptionTransactionSupplementEconomicTerms:
    inputs:
        fpmlDividendSwapOptionTransactionSupplement fpml.DividendSwapOptionTransactionSupplement (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            payout: MapDividendSwapOptionTransactionSupplementPayout(
                    fpmlDividendSwapOptionTransactionSupplement,
                    cdmCounterpartyList
                ),
            ...
        }

func MapDividendSwapOptionTransactionSupplementPayout:
    inputs:
        fpmlDividendSwapOptionTransactionSupplement fpml.DividendSwapOptionTransactionSupplement (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            OptionPayout: OptionPayout {
                payerReceiver: MapSellerAsPayerAndBuyerAsReceiver(
                        fpmlDividendSwapOptionTransactionSupplement -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                settlementTerms: MapEquityExerciseValuationSettlementToSettlementTerms(
                        fpmlDividendSwapOptionTransactionSupplement -> equityExercise,
                        empty
                    ),
                buyerSeller: MapBuyerSeller(
                        fpmlDividendSwapOptionTransactionSupplement -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                underlier: Underlier {
                    Product: Product {
                        NonTransferableProduct: MapDividendSwapTransactionSupplementNonTransferableProduct(
                                fpmlDividendSwapOptionTransactionSupplement -> dividendSwapTransactionSupplement,
                                cdmCounterpartyList
                            ),
                        ...
                    },
                    ...
                },
                exerciseTerms: MapExerciseTerms(
                        GetFpmlEquityExercise(
                                fpmlDividendSwapOptionTransactionSupplement -> equityExercise
                            ),
                        empty,
                        empty,
                        fpmlDividendSwapOptionTransactionSupplement -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                ...
            },
            ...
        }

func MapDividendSwapOptionTransactionSupplementPriceQuantityList:
    inputs:
        fpmlDividendSwapOptionTransactionSupplement fpml.DividendSwapOptionTransactionSupplement (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    add priceQuantityList:
        MapDividendSwapTransactionSupplementPriceQuantityList(
                fpmlDividendSwapOptionTransactionSupplement -> dividendSwapTransactionSupplement
            )

func MapDividendSwapOptionTransactionSupplementAccountPartyReference:
    inputs:
        fpmlDividendSwapOptionTransactionSupplement fpml.DividendSwapOptionTransactionSupplement (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapBuyerSellerToAccountPartyReference(
                fpmlAccount,
                fpmlDividendSwapOptionTransactionSupplement -> buyerSellerModel
            )
