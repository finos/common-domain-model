namespace cdm.ingest.fpml.confirmation.product.varianceoptiontransactionsupplement: <"FpML VarianceOptionTransactionSupplement product mapping functions.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.observable.asset.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.product.varianceswaptransactionsupplement.*
import cdm.ingest.fpml.confirmation.settlement.*

func MapVarianceOptionTransactionSupplementCounterpartyList:
    inputs:
        fpmlVarianceOptionTransactionSupplement fpml.VarianceOptionTransactionSupplement (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapBuyerSellerModelToCounterpartyList(
                fpmlVarianceOptionTransactionSupplement -> buyerSellerModel
            )

func MapVarianceOptionTransactionSupplementAncillaryPartyList:
    inputs:
        fpmlVarianceOptionTransactionSupplement fpml.VarianceOptionTransactionSupplement (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

    add ancillaryPartyList:
        fpmlVarianceOptionTransactionSupplement -> clearingInstructions -> predeterminedClearingOrganizationPartyReference
            extract MapAncillaryParty(PredeterminedClearingOrganizationParty, href)

func MapVarianceOptionTransactionSupplementNonTransferableProduct:
    inputs:
        fpmlVarianceOptionTransactionSupplement fpml.VarianceOptionTransactionSupplement (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(
                    fpmlVarianceOptionTransactionSupplement -> productModel
                ),
            taxonomy: MapProductTaxonomyList(
                    fpmlVarianceOptionTransactionSupplement -> productModel
                ),
            economicTerms: MapVarianceOptionTransactionSupplementEconomicTerms(
                    fpmlVarianceOptionTransactionSupplement,
                    cdmCounterpartyList
                )
        }

func MapVarianceOptionTransactionSupplementEconomicTerms:
    inputs:
        fpmlVarianceOptionTransactionSupplement fpml.VarianceOptionTransactionSupplement (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            payout: MapVarianceOptionTransactionSupplementPayout(
                    fpmlVarianceOptionTransactionSupplement,
                    cdmCounterpartyList
                ),
            ...
        }

func MapVarianceOptionTransactionSupplementPayout:
    inputs:
        fpmlVarianceOptionTransactionSupplement fpml.VarianceOptionTransactionSupplement (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            OptionPayout: OptionPayout {
                payerReceiver: MapSellerAsPayerAndBuyerAsReceiver(
                        fpmlVarianceOptionTransactionSupplement -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                settlementTerms: MapEquityExerciseValuationSettlementToSettlementTerms(
                        fpmlVarianceOptionTransactionSupplement -> equityExercise,
                        fpmlVarianceOptionTransactionSupplement -> clearingInstructions
                    ),
                buyerSeller: MapBuyerSeller(
                        fpmlVarianceOptionTransactionSupplement -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                underlier: Underlier {
                    Product: Product {
                        NonTransferableProduct: MapVarianceSwapTransactionSupplementNonTransferableProduct(
                                fpmlVarianceOptionTransactionSupplement -> varianceSwapTransactionSupplement,
                                cdmCounterpartyList
                            ),
                        ...
                    },
                    ...
                },
                optionType: fpmlVarianceOptionTransactionSupplement -> optionType to-enum OptionTypeEnum,
                exerciseTerms: MapExerciseTerms(
                        GetFpmlEquityExercise(
                                fpmlVarianceOptionTransactionSupplement -> equityExercise
                            ),
                        empty,
                        empty,
                        fpmlVarianceOptionTransactionSupplement -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                ...
            },
            ...
        }

func MapVarianceOptionTransactionSupplementPriceQuantityList:
    inputs:
        fpmlVarianceOptionTransactionSupplement fpml.VarianceOptionTransactionSupplement (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    add priceQuantityList:
        MapVarianceSwapTransactionSupplementPriceQuantityList(
                fpmlVarianceOptionTransactionSupplement -> varianceSwapTransactionSupplement
            )

func MapVarianceOptionTransactionSupplementAccountPartyReference:
    inputs:
        fpmlVarianceOptionTransactionSupplement fpml.VarianceOptionTransactionSupplement (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapBuyerSellerToAccountPartyReference(
                fpmlAccount,
                fpmlVarianceOptionTransactionSupplement -> buyerSellerModel
            )
