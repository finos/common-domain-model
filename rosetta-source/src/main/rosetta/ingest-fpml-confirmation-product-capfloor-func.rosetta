namespace cdm.ingest.fpml.confirmation.product.capfloor: <"FpML CapFloor product mapping functions.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.product.swap.*
import cdm.observable.asset.*
import cdm.product.template.*

import fpml.consolidated.* as fpml
import fpml.consolidated.* as fpml
import fpml.consolidated.accumulator.* as fpml
import fpml.consolidated.asset.* as fpml
import fpml.consolidated.bond.option.* as fpml
import fpml.consolidated.business.events.* as fpml
import fpml.consolidated.business.events.* as fpml
import fpml.consolidated.cd.* as fpml
import fpml.consolidated.clearing.processes.* as fpml
import fpml.consolidated.com.* as fpml
import fpml.consolidated.confirmation.processes.* as fpml
import fpml.consolidated.correlation.swaps.* as fpml
import fpml.consolidated.credit.event.notification.* as fpml
import fpml.consolidated.dividend.swaps.* as fpml
import fpml.consolidated.doc.* as fpml
import fpml.consolidated.eq.shared.* as fpml
import fpml.consolidated.eqd.* as fpml
import fpml.consolidated.fpmlenum.* as fpml
import fpml.consolidated.fpmlenum.* as fpml
import fpml.consolidated.fpmlreturn.swaps.* as fpml
import fpml.consolidated.fpmlstandard.* as fpml
import fpml.consolidated.fx.* as fpml
import fpml.consolidated.fx.accruals.* as fpml
import fpml.consolidated.fx.targets.* as fpml
import fpml.consolidated.generic.* as fpml
import fpml.consolidated.ird.* as fpml
import fpml.consolidated.loan.* as fpml
import fpml.consolidated.main.* as fpml
import fpml.consolidated.mktenv.* as fpml
import fpml.consolidated.msg.* as fpml
import fpml.consolidated.option.shared.* as fpml
import fpml.consolidated.recordkeeping.processes.* as fpml
import fpml.consolidated.reg.fpmlreporting.product.* as fpml
import fpml.consolidated.reg.fpmlreporting.shared.* as fpml
import fpml.consolidated.repo.* as fpml
import fpml.consolidated.riskdef.* as fpml
import fpml.consolidated.sec.lending.* as fpml
import fpml.consolidated.shared.* as fpml
import fpml.consolidated.valuation.* as fpml
import fpml.consolidated.valuation.fpmlreporting.* as fpml
import fpml.consolidated.variance.swaps.* as fpml
import fpml.consolidated.volatility.swaps.* as fpml
import fpml.custom.*
import fpml.custom.*

func MapCapFloorCounterpartyList:
    inputs:
        fpmlCapFloor fpml.CapFloor (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapPayerReceiverModelToCounterpartyList(
                fpmlCapFloor -> capFloorStream -> payerReceiverModel
            )

func MapCapFloorAncillaryPartyList:
    inputs:
        fpmlCapFloor fpml.CapFloor (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapCapFloorNonTransferableProduct:
    inputs:
        fpmlCapFloor fpml.CapFloor (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlCapFloor -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlCapFloor -> productModel),
            economicTerms: MapCapFloorEconomicTerms(fpmlCapFloor, cdmCounterpartyList)
        }

func MapCapFloorEconomicTerms:
    inputs:
        fpmlCapFloor fpml.CapFloor (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)
    set economicTerms:
        EconomicTerms {
            payout: MapSwapPayout(fpmlCapFloor -> capFloorStream, cdmCounterpartyList),
            terminationProvision: MapTerminationProvision(
                    fpmlCapFloor -> earlyTerminationProvision,
                    empty,
                    empty,
                    cdmCounterpartyList
                ),
            ...
        }

func MapCapFloorPriceQuantityList:
    inputs:
        fpmlCapFloor fpml.CapFloor (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    add priceQuantityList: fpmlCapFloor -> capFloorStream extract MapSwapPriceQuantity

func MapCapFloorAccountPartyReference:
    inputs:
        fpmlCapFloor fpml.CapFloor (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapPayerReceiverToAccountPartyReference(
                fpmlAccount,
                fpmlCapFloor -> capFloorStream -> payerReceiverModel
            )
