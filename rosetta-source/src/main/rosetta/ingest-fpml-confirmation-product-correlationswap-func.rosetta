namespace cdm.ingest.fpml.confirmation.product.correlationswap: <"FpML CorrelationSwap product mapping functions.">
version "${project.version}"

import cdm.base.math.*
import cdm.base.staticdata.party.*
import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.datetime.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.pricequantity.*
import cdm.ingest.fpml.confirmation.settlement.*
import cdm.observable.asset.*
import cdm.product.asset.*
import cdm.product.common.settlement.*
import cdm.product.template.*

import fpml.consolidated.* as fpml
import fpml.consolidated.* as fpml
import fpml.consolidated.accumulator.* as fpml
import fpml.consolidated.asset.* as fpml
import fpml.consolidated.bond.option.* as fpml
import fpml.consolidated.business.events.* as fpml
import fpml.consolidated.business.events.* as fpml
import fpml.consolidated.cd.* as fpml
import fpml.consolidated.clearing.processes.* as fpml
import fpml.consolidated.com.* as fpml
import fpml.consolidated.confirmation.processes.* as fpml
import fpml.consolidated.correlation.swaps.* as fpml
import fpml.consolidated.credit.event.notification.* as fpml
import fpml.consolidated.dividend.swaps.* as fpml
import fpml.consolidated.doc.* as fpml
import fpml.consolidated.eq.shared.* as fpml
import fpml.consolidated.eqd.* as fpml
import fpml.consolidated.fpmlenum.* as fpml
import fpml.consolidated.fpmlenum.* as fpml
import fpml.consolidated.fpmlreturn.swaps.* as fpml
import fpml.consolidated.fpmlstandard.* as fpml
import fpml.consolidated.fx.* as fpml
import fpml.consolidated.fx.accruals.* as fpml
import fpml.consolidated.fx.targets.* as fpml
import fpml.consolidated.generic.* as fpml
import fpml.consolidated.ird.* as fpml
import fpml.consolidated.loan.* as fpml
import fpml.consolidated.main.* as fpml
import fpml.consolidated.mktenv.* as fpml
import fpml.consolidated.msg.* as fpml
import fpml.consolidated.option.shared.* as fpml
import fpml.consolidated.recordkeeping.processes.* as fpml
import fpml.consolidated.reg.fpmlreporting.product.* as fpml
import fpml.consolidated.reg.fpmlreporting.shared.* as fpml
import fpml.consolidated.repo.* as fpml
import fpml.consolidated.riskdef.* as fpml
import fpml.consolidated.sec.lending.* as fpml
import fpml.consolidated.shared.* as fpml
import fpml.consolidated.valuation.* as fpml
import fpml.consolidated.valuation.fpmlreporting.* as fpml
import fpml.consolidated.variance.swaps.* as fpml
import fpml.consolidated.volatility.swaps.* as fpml
import fpml.custom.*

func MapCorrelationSwapCounterpartyList:
    inputs:
        fpmlCorrelationSwap fpml.CorrelationSwap (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapPayerReceiverModelToCounterpartyList(
                fpmlCorrelationSwap -> correlationLeg -> payerReceiverModel
            )

func MapCorrelationSwapAncillaryPartyList:
    inputs:
        fpmlCorrelationSwap fpml.CorrelationSwap (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapCorrelationSwapNonTransferableProduct:
    inputs:
        fpmlCorrelationSwap fpml.CorrelationSwap (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlCorrelationSwap -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlCorrelationSwap -> productModel),
            economicTerms: MapCorrelationSwapEconomicTerms(
                        fpmlCorrelationSwap,
                        cdmCounterpartyList
                    )
        }

func MapCorrelationSwapEconomicTerms:
    inputs:
        fpmlCorrelationSwap fpml.CorrelationSwap (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            payout: MapCorrelationSwapPayout(fpmlCorrelationSwap, cdmCounterpartyList),
            ...
        }

func MapCorrelationSwapPayout:
    inputs:
        fpmlCorrelationSwap fpml.CorrelationSwap (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    alias correlationLeg: fpmlCorrelationSwap -> correlationLeg

    set payout:
        Payout {
            PerformancePayout:
                PerformancePayout {
                    payerReceiver:
                        PayerReceiver {
                            payer: MapCounterpartyRoleEnum(
                                        correlationLeg -> payerReceiverModel -> payerModel -> payerPartyReference -> href,
                                        cdmCounterpartyList
                                    ),
                            receiver: MapCounterpartyRoleEnum(
                                        correlationLeg -> payerReceiverModel -> receiverModel -> receiverPartyReference -> href,
                                        cdmCounterpartyList
                                    )
                        },
                    priceQuantity:
                        ResolvablePriceQuantity {
                            quantitySchedule: MapNonNegativeMoneyToQuantityWithAddress(
                                        correlationLeg -> amount -> correlation -> notionalAmount,
                                        empty,
                                        correlationLeg
                                    ),
                            ...
                        },
                    settlementTerms: MapCorrelationLegToSettlmentTerms(correlationLeg),
                    observationTerms: MapAdjustableOrRelativeDateToObservationTerms(
                                correlationLeg -> amount -> observationStartDate
                            ),
                    valuationDates:
                        ValuationDates {
                            finalValuationDate: MapPerformanceValuationDates(
                                        empty,
                                        correlationLeg -> valuation
                                    ),
                            ...
                        },
                    underlier:
                        Underlier {
                            Observable: MapUnderlyerToObservableWithAddress(
                                        correlationLeg -> underlyer
                                    ),
                            ...
                        },
                    returnTerms:
                        ReturnTerms {
                            correlationReturnTerms: MapCorrelationLegToCorrelationReturnTerms(
                                        correlationLeg
                                    ),
                            ...
                        },
                    paymentDates: empty,
                    ...
                },
            ...
        }

func MapCorrelationLegToCorrelationReturnTerms:
    inputs:
        fpmlCorrelationLeg fpml.CorrelationLeg (0..1)
    output:
        correlationReturnTerms CorrelationReturnTerms (0..1)

    alias fpmlAmount: fpmlCorrelationLeg -> amount

    set correlationReturnTerms:
        CorrelationReturnTerms {
            dividendApplicability:
                DividendApplicability {
                    allDividends: fpmlAmount -> dividendsModel -> allDividends,
                    ...
                },
            expectedN: fpmlAmount -> correlation -> expectedN,
            valuationTerms: empty,
            correlationStrikePrice:
                Price {
                    value: fpmlAmount -> correlation -> correlationStrikePrice,
                    priceType: Correlation,
                    ...
                },
            boundedCorrelation:
                NumberRange {
                    lowerBound:
                        NumberBound {
                            number: fpmlAmount -> correlation -> boundedCorrelation -> minimumBoundaryPercent,
                            inclusive: empty
                        },
                    upperBound:
                        NumberBound {
                            number: fpmlAmount -> correlation -> boundedCorrelation -> maximumBoundaryPercent,
                            inclusive: empty
            },},
            numberOfDataSeries: fpmlAmount -> correlation -> numberOfDataSeries,
            ...
        }

func MapCorrelationSwapPriceQuantityList:
    inputs:
        fpmlCorrelationSwap fpml.CorrelationSwap (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    alias correlationLeg: fpmlCorrelationSwap -> correlationLeg

    add priceQuantityList:
        PriceQuantity {
            quantity: MapNonNegativeMoneyToQuantityWithLocation(
                        correlationLeg -> amount -> correlation -> notionalAmount,
                        empty,
                        correlationLeg
                    ),
            observable: MapUnderlyerToObservableWithLocation(correlationLeg -> underlyer),
            ...
        }

func MapCorrelationSwapAccountPartyReference:
    inputs:
        fpmlCorrelationSwap fpml.CorrelationSwap (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapPayerReceiverToAccountPartyReference(
                fpmlAccount,
                fpmlCorrelationSwap -> correlationLeg -> payerReceiverModel
            )
