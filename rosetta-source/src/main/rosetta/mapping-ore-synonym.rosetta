namespace cdm.mapping.ore
version "${project.version}"

import cdm.base.math.*
import cdm.base.datetime.*
import cdm.base.staticdata.party.*
import cdm.base.staticdata.asset.rates.*

import cdm.event.common.*

import cdm.observable.asset.*

import cdm.product.asset.*
import cdm.product.template.*
import cdm.product.common.schedule.*
import cdm.product.common.settlement.*

synonym source ORE

synonym source ORE_1_0_39 extends ORE
{
    TradeState:
        + resetHistory
            [value "ignore"]

    Trade:
        + tradeIdentifier
        + party
            [value "Envelope" path "Trade"]
        + tradableProduct
            [value "Trade" mapper "ORECounterparty"]
        + party
            [value "Envelope" path "Trade"]

	TradeLot:
		+ priceQuantity
			[value "LegData" path "SwapData"]

	Counterparty:
		+ partyReference
			[value "Envelope"]
		+ role
			[set to CounterpartyRoleEnum -> Party2 when rosettaPath = TradeState -> trade -> tradableProduct -> counterparty]

	 Price:
        + amount
            [value "Rate"]
            [value "Spread"]

	PriceExpression:
 		+ priceType
 			[set to PriceTypeEnum->InterestRate when path = "Rates"]
 			[set to PriceTypeEnum->InterestRate when path = "Spreads"]
 		+ spreadType
 			[set to SpreadTypeEnum->Spread when path = "Spreads"]
	
	PriceQuantity:
        + price
            [value "Rates" path "FixedLegData" mapper "OrePrice"]
            [value "Spreads" path "FloatingLegData" mapper "OrePrice"]
		+ observable
            [value "FloatingLegData"]
        + quantity
            [value "Notionals" mapper "OreQuantity"]

	
	PartyIdentifier:
		+ identifier
			[value "CounterParty" maps 2]
			[value "party_id" path "AdditionalFields"]

	QuantitySchedule:
		+ amount
			[value "Notional"]
		+ multiplierUnit
		    [value "ignore"]
		+ step
			[value "step"]

	Product:
		+ contractualProduct
			[value "SwapData"]

	Payout:
		+ interestRatePayout
			[value "LegData"]
			[value "LegData"]

	InterestRatePayout:
	    + payoutQuantity
	        [value "Notionals"]
		+ calculationPeriodDates
			[value "Rules" path "ScheduleData"]
		+ paymentDates
			[value "Rules" path "ScheduleData"]
        + principalPayment
            [value "ignore"]
		+ cashflowRepresentation
		    [value "ignore"]
		+ stubPeriod
		    [value "ignore"]

	Frequency:
		+ periodMultiplier
			[value "Tenor" maps 2 pattern "([0-9]*).*" "$1"]
		+ period
			[value "Tenor" maps 2 pattern "[0-9]*(.*)" "$1"]

	CalculationPeriodDates:
		+ effectiveDate
			[hint "StartDate"]

	AdjustableOrRelativeDate:
		+ adjustableDate

	AdjustableDate:
		+ unadjustedDate
			[value "StartDate"]

	FloatingRateOption:
		+ floatingRateIndex
			[value "Index" maps 2]

	RateSpecification:
		+ fixedRate
			[value "FixedLegData"]
		+ floatingRate
			[value "FloatingLegData"]
		+ inflationRate
		    [value "ignore"]

    FixedRateSpecification:
        + rateSchedule
            [value "Rates"]

    FloatingRate:
        + spreadSchedule
            [value "Spreads"]

    RateSchedule:
        + initialValue
            [meta "Rate"]
            [meta "Spread"]

	ResolvablePayoutQuantity:
		+ quantitySchedule
			[meta "Notional"]
		+ resolvedQuantity
			[value "ignore"]
    
	UnitType:
		+ currency
			[value "Currency"]

    PrincipalPaymentSchedule:
		+ initialPrincipalPayment
            [value "ignore"]
		+ intermediatePrincipalPayment
            [value "ignore"]
		+ finalPrincipalPayment
            [value "ignore"]

    enums

	FloatingRateIndexEnum:
		+ EUR_6M_EURIBOR_SWAP_CME_vs_LCH_ICAP
			[value "EUR-EURIBOR-6M"]

	PeriodEnum:
		+ D
			[value "D"]
		+ W
			[value "W"]
		+ M
			[value "M"]
		+ Y
			[value "Y"]
}
