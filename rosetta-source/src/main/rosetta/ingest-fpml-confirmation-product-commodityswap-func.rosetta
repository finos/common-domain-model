namespace cdm.ingest.fpml.confirmation.product.commodityswap: <"FpML CommoditySwap product mapping functions.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.observable.asset.*
import cdm.product.asset.*
import cdm.product.common.settlement.*
import cdm.product.template.*

import fpml.confirmation.* as fpml
import fpml.confirmation.custom.*

import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.datetime.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.pricequantity.*
import cdm.ingest.fpml.confirmation.settlement.*

func MapCommoditySwapCounterpartyList:
    inputs:
        fpmlCommoditySwap fpml.CommoditySwap (0..1)
    output:
        counterpartyList Counterparty (0..2)

    alias payerReceiver:
        fpmlCommoditySwap -> commoditySwapDetailsModel -> commoditySwapLeg
        extract GetFpmlPayerReceiver
        then first

    add counterpartyList: MapPayerReceiverModelToCounterpartyList(payerReceiver)

func GetFpmlPayerReceiver:
    inputs:
        fpmlCommodityLeg fpml.CommodityLeg (0..1)
    output:
        fpmlPayerReceiverModel fpml.PayerReceiverModel (0..1)

    set fpmlPayerReceiverModel:
        ToLegChoice(fpmlCommodityLeg)
            switch
            FloatingLeg then payerReceiverModel,
            GasPhysicalLeg then payerReceiverModel,
            OilPhysicalLeg then payerReceiverModel,
            ElectricityPhysicalLeg then payerReceiverModel,
            EnvironmentalPhysicalLeg then payerReceiverModel,
            CoalPhysicalLeg then payerReceiverModel,
            default empty

func MapCommoditySwapAncillaryPartyList:
    inputs:
        fpmlCommoditySwap fpml.CommoditySwap (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapCommoditySwapNonTransferableProduct:
    inputs:
        fpmlCommoditySwap fpml.CommoditySwap (1..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlCommoditySwap -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlCommoditySwap -> productModel),
            economicTerms: MapCommoditySwapEconomicTerms(
                    fpmlCommoditySwap -> commoditySwapDetailsModel,
                    cdmCounterpartyList
                )
        }

func MapCommoditySwapEconomicTerms:
    inputs:
        fpmlCommoditySwapDetailsModel fpml.CommoditySwapDetailsModel (1..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            effectiveDate: MapAdjustableOrRelativeDate(
                    fpmlCommoditySwapDetailsModel -> effectiveDate
                ),
            terminationDate: MapAdjustableOrRelativeDate(
                    fpmlCommoditySwapDetailsModel -> terminationDate
                ),
            payout: MapCommoditySwapLegListToPayoutList(
                    fpmlCommoditySwapDetailsModel,
                    cdmCounterpartyList
                ),
            ...
        }

func MapCommoditySwapLegListToPayoutList:
    inputs:
        fpmlCommoditySwapDetailsModel fpml.CommoditySwapDetailsModel (1..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payoutList Payout (0..*)

    alias fpmlCommoditySwapLegList: fpmlCommoditySwapDetailsModel -> commoditySwapLeg

    add payoutList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter FloatingLeg exists
           then extract
                MapFloatingLegToCommodityPayout(
                        fpmlCommoditySwapDetailsModel,
                        FloatingLeg,
                        cdmCounterpartyList
                    )

    add payoutList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter GasPhysicalLeg exists
           then extract
                MapGasPhysicalLegToSettlementPayout(GasPhysicalLeg, cdmCounterpartyList)

    add payoutList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter OilPhysicalLeg exists
           then extract
                MapOilPhysicalLegToSettlementPayout(OilPhysicalLeg, cdmCounterpartyList)

    add payoutList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter ElectricityPhysicalLeg exists
           then extract
                MapElectricityPhysicalLegToSettlementPayout(
                        ElectricityPhysicalLeg,
                        cdmCounterpartyList
                    )

    add payoutList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter EnvironmentalPhysicalLeg exists
           then extract
                MapEnvironmentalPhysicalLegToSettlementPayout(
                        EnvironmentalPhysicalLeg,
                        cdmCounterpartyList
                    )

    add payoutList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter CoalPhysicalLeg exists
           then extract
                MapCoalPhysicalLegToSettlementPayout(CoalPhysicalLeg, cdmCounterpartyList)

    add payoutList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter FixedLeg exists
           then extract MapFixedLegToFixedPricePayout(FixedLeg, cdmCounterpartyList)

func MapFloatingLegToCommodityPayout:
    inputs:
        fpmlCommoditySwapDetailsModel fpml.CommoditySwapDetailsModel (1..1)
        fpmlFloatingLeg fpml.FloatingLeg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            CommodityPayout: CommodityPayout {
                payerReceiver: MapPayerReceiver(
                        fpmlFloatingLeg -> payerReceiverModel,
                        cdmCounterpartyList
                    ),
                priceQuantity: ResolvablePriceQuantity {
                    quantitySchedule: MapCommodityNotionalQuantityToQuantityWithAddress(
                            fpmlFloatingLeg -> commodityNotionalQuantityModel,
                            fpmlFloatingLeg
                        ),
                    ...
                },
                settlementTerms: MapCommoditySettlementModelToSettlementTerms(
                        fpmlCommoditySwapDetailsModel
                    ),
                pricingDates: MapCommodityPriceDatesToPricingDates(
                        fpmlFloatingLeg -> calculation -> pricingDates
                    ),
                calculationPeriodDates: MapCommodityCalculationPeriods(
                        fpmlFloatingLeg -> commodityCalculationPeriodsModel
                    ),
                paymentDates: MapCommodityRelativePaymentDates(
                        fpmlFloatingLeg -> commodityPaymentDatesModel
                    ),
                underlier: Underlier {
                    Observable: MapAssetToObservableWithAddress(
                            fpmlFloatingLeg -> commodity
                        ),
                    ...
                },
                ...
            },
            ...
        }

func MapGasPhysicalLegToSettlementPayout:
    inputs:
        fpmlGasPhysicalLeg fpml.GasPhysicalLeg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            SettlementPayout: SettlementPayout {
                payerReceiver: MapPayerReceiver(
                        fpmlGasPhysicalLeg -> payerReceiverModel,
                        cdmCounterpartyList
                    ),
                underlier: Underlier {
                    Observable: MapAssetToObservableWithAddress(
                            empty // fpmlGasPhysicalLeg -> commodity
                        ),
                    ...
                },
                ...
            },
            ...
        }

func MapOilPhysicalLegToSettlementPayout:
    inputs:
        fpmlOilPhysicalLeg fpml.OilPhysicalLeg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            SettlementPayout: SettlementPayout {
                payerReceiver: MapPayerReceiver(
                        fpmlOilPhysicalLeg -> payerReceiverModel,
                        cdmCounterpartyList
                    ),
                underlier: Underlier {
                    Observable: MapAssetToObservableWithAddress(
                            empty // fpmlOilPhysicalLeg -> commodity
                        ),
                    ...
                },
                ...
            },
            ...
        }

func MapElectricityPhysicalLegToSettlementPayout:
    inputs:
        fpmlElectricityPhysicalLeg fpml.ElectricityPhysicalLeg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            SettlementPayout: SettlementPayout {
                payerReceiver: MapPayerReceiver(
                        fpmlElectricityPhysicalLeg -> payerReceiverModel,
                        cdmCounterpartyList
                    ),
                underlier: Underlier {
                    Observable: MapAssetToObservableWithAddress(
                            empty // fpmlElectricityPhysicalLeg -> commodity
                        ),
                    ...
                },
                ...
            },
            ...
        }

func MapEnvironmentalPhysicalLegToSettlementPayout:
    inputs:
        fpmlEnvironmentalPhysicalLeg fpml.EnvironmentalPhysicalLeg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            SettlementPayout: SettlementPayout {
                payerReceiver: MapPayerReceiver(
                        fpmlEnvironmentalPhysicalLeg -> payerReceiverModel,
                        cdmCounterpartyList
                    ),
                underlier: Underlier {
                    Observable: MapAssetToObservableWithAddress(
                            empty // fpmlEnvironmentalPhysicalLeg -> commodity
                        ),
                    ...
                },
                ...
            },
            ...
        }

func MapCoalPhysicalLegToSettlementPayout:
    inputs:
        fpmlCoalPhysicalLeg fpml.CoalPhysicalLeg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            SettlementPayout: SettlementPayout {
                payerReceiver: MapPayerReceiver(
                        fpmlCoalPhysicalLeg -> payerReceiverModel,
                        cdmCounterpartyList
                    ),
                underlier: Underlier {
                    Observable: MapAssetToObservableWithAddress(
                            empty // fpmlCoalPhysicalLeg -> commodity
                        ),
                    ...
                },
                ...
            },
            ...
        }

func MapFixedLegToFixedPricePayout:
    inputs:
        fpmlFixedLeg fpml.FixedLeg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            FixedPricePayout: FixedPricePayout {
                payerReceiver: MapPayerReceiver(
                        fpmlFixedLeg -> payerReceiverModel,
                        cdmCounterpartyList
                    ),
                priceQuantity: ResolvablePriceQuantity {
                    quantitySchedule: MapCommodityNotionalQuantityToQuantityWithAddress(
                            fpmlFixedLeg -> commodityNotionalQuantityModel,
                            fpmlFixedLeg
                        ),
                    ...
                },
                paymentDates: MapCommodityRelativePaymentDates(
                        fpmlFixedLeg -> commodityPaymentDatesModel
                    ),
                fixedPrice: FixedPrice {
                    price: MapCommodityFixedLegToPriceWithAddress(
                            fpmlFixedLeg -> commodityFixedPriceModel,
                            fpmlFixedLeg
                        )
                },
                ...
            },
            ...
        }

func MapCommoditySwapPriceQuantityList:
    inputs:
        fpmlCommoditySwap fpml.CommoditySwap (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    alias fpmlCommoditySwapLegList:
        fpmlCommoditySwap -> commoditySwapDetailsModel -> commoditySwapLeg

    add priceQuantityList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter FixedLeg exists
           then extract MapFixedLegToPriceQuantity(FixedLeg)

    add priceQuantityList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter FloatingLeg exists
           then extract MapFloatingLegToPriceQuantity(FloatingLeg)

    add priceQuantityList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter GasPhysicalLeg exists
           then extract MapGasPhysicalLegToPriceQuantity(GasPhysicalLeg)

    add priceQuantityList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter OilPhysicalLeg exists
           then extract MapOilPhysicalLegToPriceQuantity(OilPhysicalLeg)

    add priceQuantityList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter ElectricityPhysicalLeg exists
           then extract MapElectricityPhysicalLegToPriceQuantity(ElectricityPhysicalLeg)

    add priceQuantityList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter EnvironmentalPhysicalLeg exists
           then extract
                MapEnvironmentalPhysicalLegToPriceQuantity(EnvironmentalPhysicalLeg)

    add priceQuantityList:
        fpmlCommoditySwapLegList
            extract ToLegChoice
           then filter CoalPhysicalLeg exists
           then extract MapCoalPhysicalLegToPriceQuantity(CoalPhysicalLeg)

func MapFixedLegToPriceQuantity:
    inputs:
        fpmlFixedLeg fpml.FixedLeg (0..1)
    output:
        priceQuantity PriceQuantity (0..1)

    set priceQuantity:
        PriceQuantity {
            quantity: MapCommodityNotionalQuantityToQuantityListWithLocation(
                    fpmlFixedLeg -> commodityNotionalQuantityModel,
                    fpmlFixedLeg
                ),
            price: MapCommodityFixedLegToPriceWithLocation(
                    fpmlFixedLeg -> commodityFixedPriceModel,
                    fpmlFixedLeg
                ),
            ...
        }

func MapFloatingLegToPriceQuantity:
    inputs:
        fpmlFloatingLeg fpml.FloatingLeg (0..1)
    output:
        priceQuantity PriceQuantity (0..1)

    set priceQuantity:
        PriceQuantity {
            quantity: MapCommodityNotionalQuantityToQuantityListWithLocation(
                    fpmlFloatingLeg -> commodityNotionalQuantityModel,
                    fpmlFloatingLeg
                ),
            observable: MapAssetToObservableWithLocation(fpmlFloatingLeg -> commodity),
            ...
        }

func MapGasPhysicalLegToPriceQuantity:
    inputs:
        fpmlGasPhysicalLeg fpml.GasPhysicalLeg (0..1)
    output:
        priceQuantity PriceQuantity (0..1)

func MapOilPhysicalLegToPriceQuantity:
    inputs:
        fpmlOilPhysicalLeg fpml.OilPhysicalLeg (0..1)
    output:
        priceQuantity PriceQuantity (0..1)

func MapElectricityPhysicalLegToPriceQuantity:
    inputs:
        fpmlElectricityPhysicalLeg fpml.ElectricityPhysicalLeg (0..1)
    output:
        priceQuantity PriceQuantity (0..1)

func MapEnvironmentalPhysicalLegToPriceQuantity:
    inputs:
        fpmlEnvironmentalPhysicalLeg fpml.EnvironmentalPhysicalLeg (0..1)
    output:
        priceQuantity PriceQuantity (0..1)

func MapCoalPhysicalLegToPriceQuantity:
    inputs:
        fpmlCoalPhysicalLeg fpml.CoalPhysicalLeg (0..1)
    output:
        priceQuantity PriceQuantity (0..1)

func MapCommoditySwapAccountPartyReference:
    inputs:
        fpmlCommoditySwap fpml.CommoditySwap (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]
