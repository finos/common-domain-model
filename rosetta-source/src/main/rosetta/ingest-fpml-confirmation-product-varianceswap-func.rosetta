namespace cdm.ingest.fpml.confirmation.product.varianceswap: <"FpML VarianceSwap product mapping functions.">
version "${project.version}"

import cdm.base.math.*
import cdm.base.staticdata.party.*
import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.datetime.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.pricequantity.*
import cdm.ingest.fpml.confirmation.settlement.*
import cdm.observable.asset.*
import cdm.product.asset.*
import cdm.product.common.settlement.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

func MapVarianceSwapCounterpartyList:
    inputs:
        fpmlVarianceSwap fpml.VarianceSwap (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapPayerReceiverModelToCounterpartyList(
                fpmlVarianceSwap -> varianceLeg first -> payerReceiverModel
            )

func MapVarianceSwapAncillaryPartyList:
    inputs:
        fpmlVarianceSwap fpml.VarianceSwap (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapVarianceSwapNonTransferableProduct:
    inputs:
        fpmlVarianceSwap fpml.VarianceSwap (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlVarianceSwap -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlVarianceSwap -> productModel),
            economicTerms: MapVarianceSwapEconomicTerms(
                        fpmlVarianceSwap,
                        cdmCounterpartyList
                    )
        }

func MapVarianceSwapEconomicTerms:
    inputs:
        fpmlVarianceSwap fpml.VarianceSwap (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    alias fpmlEffectiveDates: fpmlVarianceSwap -> varianceLeg filter effectiveDate exists

    set economicTerms:
        EconomicTerms {
            effectiveDate: MapAdjustableOrRelativeDate(
                        fpmlEffectiveDates -> effectiveDate first
                    ),
            terminationDate: MapAdjustableOrRelativeDate(
                        (fpmlVarianceSwap -> varianceLeg filter terminationDate exists) -> terminationDate first
                    ),
            payout: fpmlVarianceSwap -> varianceLeg
                    extract MapVarianceLegToPerformancePayout(item, cdmCounterpartyList),
            ...
        }

func MapVarianceLegToPerformancePayout:
    inputs:
        fpmlVarianceLeg fpml.VarianceLeg (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            PerformancePayout:
                PerformancePayout {
                    payerReceiver: MapPayerReceiver(
                                fpmlVarianceLeg -> payerReceiverModel,
                                cdmCounterpartyList
                            ),
                    priceQuantity:
                        ResolvablePriceQuantity {
                            quantitySchedule: MapNotionalAmountToQuantityWithAddress(
                                        fpmlVarianceLeg -> amount -> variance -> varianceAmount -> amount,
                                        fpmlVarianceLeg
                                    ),
                            ...
                        },
                    settlementTerms: MapOptionSettlementModelToSettlementTerms(
                                fpmlVarianceLeg -> optionSettlementModel
                            ),
                    observationTerms: MapAdjustableOrRelativeDateToObservationTerms(
                                fpmlVarianceLeg -> amount -> observationStartDate
                            ),
                    underlier:
                        Underlier {
                            Observable: MapUnderlyerToObservableWithAddress(
                                        fpmlVarianceLeg -> underlyer
                                    ),
                            ...
                        },
                    valuationDates:
                        ValuationDates {
                            finalValuationDate: MapPerformanceValuationDates(
                                        empty,
                                        fpmlVarianceLeg -> valuation
                                    ),
                            ...
                        },
                    paymentDates: empty,
                    returnTerms:
                        ReturnTerms {
                            varianceReturnTerms: MapVarianceLegToVarianceReturnTerms(
                                        fpmlVarianceLeg
                                    ),
                            ...
                        },
                    ...
                },
            ...
        }

func MapVarianceLegToVarianceReturnTerms:
    inputs:
        fpmlVarianceLeg fpml.VarianceLeg (0..1)
    output:
        varianceReturnTerms VarianceReturnTerms (0..1)

    alias fpmlAsset: fpmlVarianceLeg -> amount -> variance -> exchangeTradedContractNearest
    alias fpmlVariance: fpmlVarianceLeg -> amount -> variance

    set varianceReturnTerms:
        VarianceReturnTerms {
            valuationTerms:
                ValuationTerms {
                    futuresPriceValuation: fpmlVarianceLeg -> valuation -> futuresPriceValuation,
                    optionsPriceValuation: fpmlVarianceLeg -> valuation -> optionsPriceValuation,
                    ...
                },
            dividendApplicability:
                DividendApplicability {
                    optionsExchangeDividends: fpmlVarianceLeg -> amount -> dividendsModel -> optionsExchangeDividends,
                    additionalDividends: fpmlVarianceLeg -> amount -> dividendsModel -> additionalDividends,
                    allDividends: fpmlVarianceLeg -> amount -> dividendsModel -> allDividends
                },
            initialLevel: fpmlVariance -> calculationFromObservationChoice -> calculationFromObservationChoiceSequence -> initialLevel,
            varianceStrikePrice: if fpmlVariance -> varianceStrikePrice exists
                    then Price {
                        value: fpmlVariance -> varianceStrikePrice,
                        priceType: Variance,
                        ...
                    },
            varianceCapFloor:
                VarianceCapFloor {
                    boundedVariance:
                        BoundedVariance {
                            realisedVarianceMethod: fpmlVariance -> boundedVariance -> realisedVarianceMethod to-enum RealisedVarianceMethodEnum,
                            daysInRangeAdjustment: fpmlVariance -> boundedVariance -> daysInRangeAdjustment,
                            upperBarrier: fpmlVariance -> boundedVariance -> upperBarrier,
                            lowerBarrier: fpmlVariance -> boundedVariance -> lowerBarrier
                        },
                    varianceCap: fpmlVariance -> varianceCap,
                    ...
                },
            vegaNotionalAmount:
                NonNegativeQuantitySchedule {
                    value: fpmlVariance -> vegaNotionalAmount,
                    unit:
                        UnitType {
                            currency: if fpmlVariance -> vegaNotionalAmount exists
                                    then fpmlVariance -> varianceAmount -> currency -> value,
                            ...
                        },
                    ...
                },
            exchangeTradedContractNearest:
                Observable {
                    Asset: if fpmlAsset exists
                            then MapAsset(fpmlAsset),
                    ...
                },
            expectedN: fpmlVariance -> expectedN,
            ...
        }

func MapVarianceSwapPriceQuantityList:
    inputs:
        fpmlVarianceSwap fpml.VarianceSwap (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    add priceQuantityList:
        fpmlVarianceSwap -> varianceLeg extract MapVarianceLegToPriceQuantity

func MapVarianceLegToPriceQuantity:
    inputs:
        fpmlVarianceLeg fpml.VarianceLeg (0..1)
    output:
        priceQuantity PriceQuantity (0..1)

    set priceQuantity:
        PriceQuantity {
            quantity: MapNotionalAmountToQuantityWithLocation(
                        fpmlVarianceLeg -> amount -> variance -> varianceAmount -> amount,
                        empty,
                        fpmlVarianceLeg -> amount -> variance -> varianceAmount -> currency,
                        fpmlVarianceLeg
                    ),
            observable: MapUnderlyerToObservableWithLocation(fpmlVarianceLeg -> underlyer),
            ...
        }

func MapVarianceSwapAccountPartyReference:
    inputs:
        fpmlVarianceSwap fpml.VarianceSwap (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapPayerReceiverToAccountPartyReference(
                fpmlAccount,
                fpmlVarianceSwap -> varianceLeg -> payerReceiverModel
            )
