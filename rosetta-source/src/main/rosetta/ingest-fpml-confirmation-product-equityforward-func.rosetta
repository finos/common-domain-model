namespace cdm.ingest.fpml.confirmation.product.equityforward: <"FpML EquityForward product mapping functions.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.observable.asset.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

func MapEquityForwardCounterpartyList:
    inputs:
        fpmlEquityForward fpml.EquityForward (0..1)
    output:
        counterpartyList Counterparty (0..2)

func MapEquityForwardAncillaryPartyList:
    inputs:
        fpmlEquityForward fpml.EquityForward (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapEquityForwardNonTransferableProduct:
    inputs:
        fpmlEquityForward fpml.EquityForward (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlEquityForward -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlEquityForward -> productModel),
            economicTerms: MapEquityForwardEconomicTerms(
                        fpmlEquityForward,
                        cdmCounterpartyList
                    )
        }

func MapEquityForwardEconomicTerms:
    inputs:
        fpmlEquityForward fpml.EquityForward (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            payout: MapEquityForwardPayout(fpmlEquityForward, cdmCounterpartyList),
            ...
        }

func MapEquityForwardPayout:
    inputs:
        fpmlEquityForward fpml.EquityForward (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            ...
        }

func MapEquityForwardPriceQuantityList:
    inputs:
        fpmlEquityForward fpml.EquityForward (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

func MapEquityForwardAccountPartyReference:
    inputs:
        fpmlEquityForward fpml.EquityForward (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapBuyerSellerToAccountPartyReference(
                fpmlAccount,
                fpmlEquityForward -> buyerSellerModel
            )
