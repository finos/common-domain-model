namespace cdm.ingest.fpml.confirmation.product.equityswaptransactionsupplement: <"FpML EquitySwapTransactionSupplement product mapping functions.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.observable.asset.*
import cdm.product.template.*

import fpml.confirmation.* as fpml
import fpml.confirmation.custom.*

import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.product.returnswap.*

func MapEquitySwapTransactionSupplementCounterpartyList:
    inputs:
        fpmlEquitySwapTransactionSupplement fpml.EquitySwapTransactionSupplement (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapPayerReceiverModelToCounterpartyList(
                fpmlEquitySwapTransactionSupplement -> returnSwapLeg first -> payerReceiverModel
            )

func MapEquitySwapTransactionSupplementAncillaryPartyList:
    inputs:
        fpmlEquitySwapTransactionSupplement fpml.EquitySwapTransactionSupplement (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapEquitySwapTransactionSupplementNonTransferableProduct:
    inputs:
        fpmlEquitySwapTransactionSupplement fpml.EquitySwapTransactionSupplement (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(
                    fpmlEquitySwapTransactionSupplement -> productModel
                ),
            taxonomy: MapProductTaxonomyList(
                    fpmlEquitySwapTransactionSupplement -> productModel
                ),
            economicTerms: MapEquitySwapTransactionSupplementEconomicTerms(
                    fpmlEquitySwapTransactionSupplement,
                    cdmCounterpartyList
                )
        }

func MapEquitySwapTransactionSupplementEconomicTerms:
    inputs:
        fpmlEquitySwapTransactionSupplement fpml.EquitySwapTransactionSupplement (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            payout: MapReturnSwapLegListToPayoutList(
                    fpmlEquitySwapTransactionSupplement -> returnSwapLeg,
                    cdmCounterpartyList
                ),
            ...
        }

func MapReturnSwapLegListToPayoutList:
    inputs:
        fpmlDirectionalLegList fpml.DirectionalLeg (0..*)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payoutList Payout (0..*)

    add payoutList:
        fpmlDirectionalLegList
            extract ToLegChoice
            then filter InterestLeg exists
            then extract
                MapInterestLegToInterestRatePayout(InterestLeg, cdmCounterpartyList)

    add payoutList:
        fpmlDirectionalLegList
            extract ToLegChoice
            then filter ReturnLeg exists
            then extract MapReturnLegToPerformancePayout(ReturnLeg, cdmCounterpartyList)

func MapEquitySwapTransactionSupplementPriceQuantityList:
    inputs:
        fpmlEquitySwapTransactionSupplement fpml.EquitySwapTransactionSupplement (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    add priceQuantityList:
        fpmlEquitySwapTransactionSupplement -> returnSwapLeg
            extract
                ToLegChoice switch
           InterestLeg then MapInterestLegToPriceQuantity,
           ReturnLeg then MapReturnLegToPriceQuantity,
           default empty

func MapEquitySwapTransactionSupplementAccountPartyReference:
    inputs:
        fpmlEquitySwapTransactionSupplement fpml.EquitySwapTransactionSupplement (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapBuyerSellerToAccountPartyReference(
                fpmlAccount,
                fpmlEquitySwapTransactionSupplement -> buyerSellerModel
            )
