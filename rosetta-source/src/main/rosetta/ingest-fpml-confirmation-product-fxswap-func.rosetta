namespace cdm.ingest.fpml.confirmation.product.fxswap: <"FpML FxSwap product mapping functions.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.pricequantity.*
import cdm.ingest.fpml.confirmation.product.fxsingleleg.*
import cdm.observable.asset.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

func MapFxSwapCounterpartyList:
    inputs:
        fpmlFxSwap fpml.FxSwap (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapPayerReceiverModelToCounterpartyList(
                fpmlFxSwap -> nearLeg -> fxCoreDetailsModel -> exchangedCurrency1 -> payerReceiverModel
            )

func MapFxSwapAncillaryPartyList:
    inputs:
        fpmlFxSwap fpml.FxSwap (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapFxSwapNonTransferableProduct:
    inputs:
        fpmlFxSwap fpml.FxSwap (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlFxSwap -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlFxSwap -> productModel),
            economicTerms: MapFxSwapEconomicTerms(fpmlFxSwap, cdmCounterpartyList)
        }

func MapFxSwapEconomicTerms:
    inputs:
        fpmlFxSwap fpml.FxSwap (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            payout: MapFxSwapPayoutList(fpmlFxSwap, cdmCounterpartyList),
            ...
        }

func MapFxSwapPayoutList:
    inputs:
        fpmlFxSwap fpml.FxSwap (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payoutList Payout (0..*)

    add payoutList:
        MapFxCoreDetailsModelToSettlementPayout(
                fpmlFxSwap -> nearLeg -> fxCoreDetailsModel,
                fpmlFxSwap -> nearLeg,
                cdmCounterpartyList
            )

    add payoutList:
        MapFxCoreDetailsModelToSettlementPayout(
                fpmlFxSwap -> farLeg -> fxCoreDetailsModel,
                fpmlFxSwap -> farLeg,
                cdmCounterpartyList
            )

func MapFxSwapPriceQuantityList:
    inputs:
        fpmlFxSwap fpml.FxSwap (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    add priceQuantityList:
        MapFxCoreDetailsModelPriceQuantityList(
                fpmlFxSwap -> nearLeg -> fxCoreDetailsModel,
                fpmlFxSwap -> nearLeg
            )

    add priceQuantityList:
        MapFxCoreDetailsModelPriceQuantityList(
                fpmlFxSwap -> farLeg -> fxCoreDetailsModel,
                fpmlFxSwap -> farLeg
            )

func MapFxSwapAccountPartyReference:
    inputs:
        fpmlFxSwap fpml.FxSwap (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapPayerReceiverToAccountPartyReference(
                fpmlAccount,
                [fpmlFxSwap -> nearLeg -> fxCoreDetailsModel -> exchangedCurrency1 -> payerReceiverModel, fpmlFxSwap -> nearLeg -> fxCoreDetailsModel -> exchangedCurrency2 -> payerReceiverModel, fpmlFxSwap -> farLeg -> fxCoreDetailsModel -> exchangedCurrency1 -> payerReceiverModel, fpmlFxSwap -> farLeg -> fxCoreDetailsModel -> exchangedCurrency2 -> payerReceiverModel]
            )
