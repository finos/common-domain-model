namespace cdm.ingest.fpml.confirmation.product.volatilityswaptransactionsupplement: <"FpML VolatilitySwapTransactionSupplement product mapping functions.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.product.volatilityswap.*
import cdm.observable.asset.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

func MapVolatilitySwapTransactionSupplementCounterpartyList:
    inputs:
        fpmlVolatilitySwapTransactionSupplement fpml.VolatilitySwapTransactionSupplement (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapPayerReceiverModelToCounterpartyList(
                fpmlVolatilitySwapTransactionSupplement -> volatilityLeg first -> payerReceiverModel
            )

func MapVolatilitySwapTransactionSupplementAncillaryPartyList:
    inputs:
        fpmlVolatilitySwapTransactionSupplement fpml.VolatilitySwapTransactionSupplement (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapVolatilitySwapTransactionSupplementNonTransferableProduct:
    inputs:
        fpmlVolatilitySwapTransactionSupplement fpml.VolatilitySwapTransactionSupplement (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(
                    fpmlVolatilitySwapTransactionSupplement -> productModel
                ),
            taxonomy: MapProductTaxonomyList(
                    fpmlVolatilitySwapTransactionSupplement -> productModel
                ),
            economicTerms: MapVolatilitySwapTransactionSupplementEconomicTerms(
                    fpmlVolatilitySwapTransactionSupplement,
                    cdmCounterpartyList
                )
        }

func MapVolatilitySwapTransactionSupplementEconomicTerms:
    inputs:
        fpmlVolatilitySwapTransactionSupplement fpml.VolatilitySwapTransactionSupplement (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            payout: fpmlVolatilitySwapTransactionSupplement -> volatilityLeg
                extract MapVolatilityLegToPerformancePayout(item, cdmCounterpartyList),
            ...
        }

func MapVolatilitySwapTransactionSupplementPriceQuantityList:
    inputs:
        fpmlVolatilitySwapTransactionSupplement fpml.VolatilitySwapTransactionSupplement (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    add priceQuantityList:
        fpmlVolatilitySwapTransactionSupplement -> volatilityLeg
            extract MapVolatilityLegToPriceQuantity

func MapVolatilitySwapTransactionSupplementAccountPartyReference:
    inputs:
        fpmlVolatilitySwapTransactionSupplement fpml.VolatilitySwapTransactionSupplement (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapPayerReceiverToAccountPartyReference(
                fpmlAccount,
                fpmlVolatilitySwapTransactionSupplement -> volatilityLeg -> payerReceiverModel
            )
