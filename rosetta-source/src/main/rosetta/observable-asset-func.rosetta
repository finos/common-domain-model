namespace cdm.observable.asset : <"Observable concepts applicable to assets: price, reference price, valuation method etc.">
version "${project.version}"

import cdm.base.math.*

func FilterPrice: <"Filter list of prices based on price type.">
    inputs:
        prices Price (0..*) <"List of prices to filter.">
        priceType PriceTypeEnum (1..1) <"The price type to filter by: asset price, cash price, exchange rate etc.">
 	    priceExpression PriceExpressionEnum (0..1) <"Optionally filter by type of price expression: percentage of notional, par value fraction">
 	    grossOrNet GrossOrNetEnum (0..1) <"Optionally filter between gross / net price.">
 	    cashPriceType CashPriceTypeEnum (0..1) <"Optionally filter by type of cash price: fee or premium.">
 	    cleanOrDirty CleanOrDirtyPriceEnum (0..1) <"Optionally filter by clean / dirty price.">
 	    capFloor CapFloorEnum (0..1) <"Optionally filter by type of interest rate cap / floor.">
 	    spreadType SpreadTypeEnum (0..1) <"Optionally filter by type of spread / base price.">
    output:
        price Price (0..1)

    set price: <"Return as single element rather than a list.">
        prices
            filter [ item -> priceExpression -> priceType = priceType ]
            filter [ if priceExpression exists then item -> priceExpression -> priceExpression = priceExpression else True ]
            filter [ if grossOrNet exists then item -> priceExpression -> grossOrNet = grossOrNet else True ]
            filter [ if cashPriceType exists then item -> priceExpression -> cashPrice -> cashPriceType = cashPriceType else True ]
            filter [ if cleanOrDirty exists then item -> priceExpression -> cleanOrDirty = cleanOrDirty else True ]
            filter [ if capFloor exists then item -> priceExpression -> capFloor = capFloor else True ]
            filter [ if spreadType exists then item -> priceExpression -> spreadType = spreadType else True ]
            only-element

func Create_Price: <"Populates a price object based on inputs.">
	inputs:
		amount number (1..1)
		unitOfAmount UnitType (1..1)
		perUnitOfAmount UnitType (1..1)
		priceExpression PriceExpression (1..1)
	output:
		price Price (1..1)

	set price -> amount: amount
	set price -> unitOfAmount: unitOfAmount
	set price -> perUnitOfAmount: perUnitOfAmount
	set price -> priceExpression: priceExpression

func Create_Money: <"Create Money with given amount and currency.">
	inputs:
		amount number (1..1)
		currency string (1..1)
	output:
		money Money (1..1)

	set money -> amount: amount
	set money -> unitOfAmount -> currency: currency