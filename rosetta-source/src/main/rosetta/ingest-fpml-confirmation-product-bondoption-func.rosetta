namespace cdm.ingest.fpml.confirmation.product.bondoption: <"FpML BondOption product mapping functions.">
version "${project.version}"

import cdm.base.math.*
import cdm.base.staticdata.party.*
import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.pricequantity.*
import cdm.ingest.fpml.confirmation.settlement.*
import cdm.observable.asset.*
import cdm.product.common.settlement.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

func MapBondOptionCounterpartyList:
    inputs:
        fpmlBondOption fpml.BondOption (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapBuyerSellerModelToCounterpartyList(fpmlBondOption -> buyerSellerModel)

func MapBondOptionAncillaryPartyList:
    inputs:
        fpmlBondOption fpml.BondOption (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapBondOptionNonTransferableProduct:
    inputs:
        fpmlBondOption fpml.BondOption (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlBondOption -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlBondOption -> productModel),
            economicTerms: MapBondOptionEconomicTerms(fpmlBondOption, cdmCounterpartyList)
        }

func MapBondOptionEconomicTerms:
    inputs:
        fpmlBondOption fpml.BondOption (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            payout: MapBondOptionPayout(fpmlBondOption, cdmCounterpartyList),
            ...
        }

func MapBondOptionPayout:
    inputs:
        fpmlBondOption fpml.BondOption (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    alias fpmlUnderlyingAsset:
        fpmlBondOption -> bondChoiceModel -> bond default fpmlBondOption -> bondChoiceModel -> convertibleBond

    set payout:
        Payout {
            OptionPayout: OptionPayout {
                payerReceiver: MapSellerAsPayerAndBuyerAsReceiver(
                        fpmlBondOption -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                priceQuantity: ResolvablePriceQuantity {
                    quantitySchedule: MapOptionBaseExtendedQuantityListWithAddress(
                            fpmlBondOption
                        ),
                    ...
                },
                settlementTerms: MapOptionSettlementModelToSettlementTerms(
                        fpmlBondOption -> optionSettlementModel
                    ),
                buyerSeller: MapBuyerSeller(
                        fpmlBondOption -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                underlier: Underlier {
                    Observable: MapAssetToObservableWithAddress(fpmlUnderlyingAsset),
                    ...
                },
                optionType: fpmlBondOption -> optionType to-enum OptionTypeEnum,
                exerciseTerms: MapExerciseTerms(
                        fpmlBondOption -> exercise,
                        fpmlBondOption -> exerciseProcedure,
                        empty,
                        fpmlBondOption -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                strike: MapBondOptionStrikeToOptionStrike(fpmlBondOption -> strike),
                ...
            },
            ...
        }

func MapBondOptionStrikeToOptionStrike:
    inputs:
        fpmlBondOptionStrike fpml.BondOptionStrike (0..1)
    output:
        optionStrikePrice OptionStrike (0..1)

    alias unit:
        UnitType {
            currency: MapCurrency(fpmlBondOptionStrike -> price -> currency),
            ...
        }

    alias perUnitOf:
        UnitType {
            currency: MapCurrency(fpmlBondOptionStrike -> price -> currency),
            ...
        }

    set optionStrikePrice:
        if fpmlBondOptionStrike -> price exists
        then MapOptionStrikePrice(
                    fpmlBondOptionStrike -> price -> strikePrice,
                    fpmlBondOptionStrike -> price -> strikePercentage,
                    unit,
                    perUnitOf
                )
        else MapOptionStrikeReferenceSwapCurve(fpmlBondOptionStrike -> referenceSwapCurve)

func MapBondOptionPriceQuantityList:
    inputs:
        fpmlBondOption fpml.BondOption (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    alias fpmlUnderlyingAsset:
        fpmlBondOption -> bondChoiceModel -> bond default fpmlBondOption -> bondChoiceModel -> convertibleBond

    add priceQuantityList:
        PriceQuantity {
            quantity: MapOptionBaseExtendedQuantityListWithLocation(fpmlBondOption),
            observable: MapAssetToObservableWithLocation(fpmlUnderlyingAsset),
            ...
        }

func MapBondOptionAccountPartyReference:
    inputs:
        fpmlBondOption fpml.BondOption (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapBuyerSellerToAccountPartyReference(
                fpmlAccount,
                fpmlBondOption -> buyerSellerModel
            )
