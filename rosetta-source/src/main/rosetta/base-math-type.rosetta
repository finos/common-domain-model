namespace cdm.base.math : <"Basic maths concepts: quantity and unit, rounding, curve / schedule, non-negativity constraint etc.">
version "${project.version}"

import cdm.observable.asset.*
import cdm.config.*
import cdm.base.datetime.*

type UnitType: <"Defines the unit to be used for price, quantity, or other purposes">
	capacityUnit CapacityUnitEnum (0..1) <"Provides an enumerated value for a capacity unit, generally used in the context of defining quantities for commodities.">
	weatherUnit WeatherUnitEnum (0..1) <"Provides an enumerated values for a weather unit, generally used in the context of defining quantities for commodities.">
	financialUnit FinancialUnitEnum (0..1) <"Provides an enumerated value for financial units, generally used in the context of defining quantities for securities.">
	currency string (0..1) <"Defines the currency to be used as a unit for a price, quantity, or other purpose.">
		[metadata scheme]

	condition UnitType: <"Requires that a unit type must be set.">
		one-of

type MeasureBase: <"Provides an abstract base class shared by Price and Quantity.">

	amount number (1..1) <"Specifies an amount to be qualified and used in a Price or Quantity definition.">
	unitOfAmount UnitType (0..1) <"Qualifies the unit by which the amount is measured.">

type Quantity extends MeasureBase: <"Specifies a quantity to be associated to a financial product, for example a trade amount or a cashflow amount resulting from a trade.">

	multiplier number (0..1) <"Defines the number to be multiplied by the amount to derive a total quantity.">
	multiplierUnit UnitType (0..1) <"Qualifies the multiplier with the applicable unit.  For example in the case of the Coal (API2) CIF ARA (ARGUS-McCloskey) Futures Contract on the CME, where the unitOfAmount would be contracts, the multiplier would 1,000 and the mulitiplier Unit would be 1,000 MT (Metric Tons).">
	frequency Frequency (0..1) <"Defines the frequency to be used when defining a quantity.">

    condition UnitOfAmountExists: <"Requires that a unit of amount must be specified for all quantities.">
    	unitOfAmount exists

	condition Quantity_multiplier: <"Requires that the multiplier must be positive.">
	    if multiplier exists
		then multiplier >= 0.0

type NonNegativeQuantity extends Quantity: <" Class to specify a quantity as a non-negative number, which condition is enforced through a data rule that only applies to the extending class.">

	condition NonNegativeQuantity_amount: <"For a non-negative quantity, the amount attribute must be positive.">
		if NonNegativeQuantity exists then amount >= 0.0

type NonNegativeStep: <"A class defining a step date and non-negative step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortisation or a step-up coupon schedule.">
	[metadata key]

	stepDate date (1..1) <"The date on which the associated stepValue becomes effective. This day may be subject to adjustment in accordance with a business day convention.">
	stepValue number (1..1) <"The non-negative rate or amount which becomes effective on the associated stepDate. A rate of 5% would be represented as 0.05.">

	condition StepValue: <"FpML specified stepValue as a NonNegativeDecimal.">
		if NonNegativeStep exists
		then stepValue >= 0.0

type Rounding: <"Defines rounding rules and precision to be used in the rounding of a number.">
	roundingDirection RoundingDirectionEnum (1..1) <"Specifies the rounding rounding rule as up, down, or nearest.">
	precision int (0..1) <"Specifies the rounding precision in terms of a number of decimal places when the number is evaluated in decimal form (not percentage), e.g. 0.09876543 rounded to the nearest 5 decimal places is  0.0987654.">

type Schedule: <"A class defining a schedule of rates or amounts in terms of an initial value and then a series of step date and value pairs. On each step date the rate or amount changes to the new step value. The series of step date and value pairs are optional. If not specified, this implies that the initial value remains unchanged over time.">

	initialValue number (1..1) <"The initial rate or amount, as the case may be. An initial rate of 5% would be represented as 0.05.">
	step Step (0..*) <"The schedule of step date and value pairs. On each step date the associated step value becomes effective A list of steps may be ordered in the document by ascending step date. An FpML document containing an unordered list of steps is still regarded as a conformant document.">

type Step: <"A class defining a step date and step value pair. This step definitions are used to define varying rate or amount schedules, e.g. a notional amortisation or a step-up coupon schedule.">
	[metadata key]

	stepDate date (1..1) <"The date on which the associated step value becomes effective.">
	stepValue number (1..1) <"The rate of amount which becomes effective on the associated step date. A rate of 5% would be represented as 0.05.">

type NumberRange: <"The number range defined as either a lower and upper number bound, or both.">
	lowerBound NumberBound (0..1) <"The lower bound of a number range, e.g. greater than or equal to 5.">
	upperBound NumberBound (0..1) <"The upper bound of a number range, e.g. less than 10.">
	condition: lowerBound exists or upperBound exists

type NumberBound: <"The number bound is defined as a number and whether the bound is inclusive.">
	number number (1..1) <"The number to be used as the bound, e.g. 5.">
	inclusive boolean (1..1) <"Whether the number bound is inclusive, e.g. for a lower bound, false would indicate greater than, whereas true would indicate greater than or equal to.">

type MoneyRange: <"The money range defined as either a lower and upper money bound, or both.">
	lowerBound MoneyBound (0..1) <"The lower bound of a money range, e.g. greater than or equal to 1,000 USD.">
	upperBound MoneyBound (0..1) <"The upper bound of a money range, e.g. less than 10,000 USD.">
	condition: lowerBound exists or upperBound exists

type MoneyBound: <"The money bound is defined as a money amount and whether the bound is inclusive.">
	money Money (1..1) <"The money amount to be used as the bound, e.g. 1,000 USD.">
	inclusive boolean (1..1) <"Whether the money amount bound is inclusive, e.g. for a lower bound, false would indicate greater than, whereas true would indicate greater than or equal to.">
