namespace cdm.ingest.fpml.confirmation.product.genericproduct: <"FpML GenericProduct product mapping functions.">
version "${project.version}"

import cdm.base.datetime.*
import cdm.base.math.*
import cdm.base.staticdata.party.*
import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.datetime.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.pricequantity.*
import cdm.observable.asset.*
import cdm.product.common.settlement.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

func MapGenericProductCounterpartyList:
    inputs:
        fpmlGenericProduct fpml.GenericProduct (0..1)
    output:
        counterpartyList Counterparty (0..2)
    add counterpartyList:
        MapBuyerSellerModelToCounterpartyList(fpmlGenericProduct -> buyerSellerModel)

func MapGenericProductAncillaryPartyList:
    inputs:
        fpmlGenericProduct fpml.GenericProduct (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapGenericProductNonTransferableProduct:
    inputs:
        fpmlGenericProduct fpml.GenericProduct (0..1)
        cdmCounterpartyList Counterparty (0..2)
        fpmlpartyTradeInformation fpml.PartyTradeInformation (0..*)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlGenericProduct -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlGenericProduct -> productModel),
            economicTerms: MapGenericProductEconomicTerms(
                    fpmlGenericProduct,
                    cdmCounterpartyList,
                    fpmlpartyTradeInformation
                )
        }

func MapGenericProductEconomicTerms:
    inputs:
        fpmlGenericProduct fpml.GenericProduct (0..1)
        cdmCounterpartyList Counterparty (0..2)
        fpmlPartyTradeInformation fpml.PartyTradeInformation (0..*)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            effectiveDate: AdjustableOrRelativeDate {
                adjustableDate: MapAdjustable2(fpmlGenericProduct -> effectiveDate),
                ...
            },
            terminationDate: AdjustableOrRelativeDate {
                adjustableDate: MapAdjustable2(fpmlGenericProduct -> terminationDate),
                ...
            },
            dateAdjustments: empty, // MapBusinessDayAdjustments(fpmlTrade, fpmlPartiesAndAccountsModel),
            payout: MapGenericProductPayout(fpmlGenericProduct, cdmCounterpartyList),
            terminationProvision: empty, // MapTerminationProvision(fpmlTrade, fpmlPartiesAndAccountsModel),
            nonStandardisedTerms: fpmlPartyTradeInformation
                filter nonStandardTerms exists
                then extract nonStandardTerms then distinct only-element,
            collateral: empty, // MapCollateral(fpmlTrade, fpmlPartiesAndAccountsModel),
            ...
        }

func MapGenericProductPayout:
    inputs:
        fpmlGenericProduct fpml.GenericProduct (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        fpmlGenericProduct
            then extract
                Payout {
                    SettlementPayout: SettlementPayout {
                        payerReceiver: MapSellerAsPayerAndBuyerAsReceiver(
                                buyerSellerModel,
                                cdmCounterpartyList
                            ),
                        priceQuantity: empty,
                        settlementTerms: SettlementTerms {
                            settlementType: settlementType to-enum SettlementTypeEnum,
                            ...
                        },
                        underlier: empty,
                        ...
                    },
                    ...
                }

func MapGenericProductPriceQuantityList:
    inputs:
        fpmlGenericProduct fpml.GenericProduct (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)
    add priceQuantityList:
        PriceQuantity {
            price: PriceSchedule {
                value: empty,
                unit: UnitType {
                    currency: fpmlGenericProduct -> notional
                        then extract
                            MapCurrency(
                                    if currency exists then currency
                                ),
                    ...
                },
                priceType: AssetPrice,
                ...
            },
            quantity: fpmlGenericProduct -> notional
                then extract
                    MapNotionalAmountToQuantityWithLocation(amount, empty, currency, empty),
            observable: fpmlGenericProduct -> underlyer -> underlyingAsset
                first
                then extract MapAssetToObservableWithLocation,
            ...
        }

func MapGenericProductAccountPartyReference:
    inputs:
        fpmlGenericProduct fpml.GenericProduct (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapBuyerSellerToAccountPartyReference(
                fpmlAccount,
                fpmlGenericProduct -> buyerSellerModel
            )
