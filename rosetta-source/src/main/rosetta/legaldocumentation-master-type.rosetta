namespace cdm.legaldocumentation.master : <"Master agreement concepts.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.legaldocumentation.master.isla.* as isla
import cdm.legaldocumentation.master.icma.* as icma
import cdm.legaldocumentation.master.isda.* as isda

type MasterAgreementSchedule: <"The set of elections which specify a Master Agreement.">
    clause MasterAgreementClause (1..*) <"Clauses that have had elections made against them in this Master Agreement. There must be at least one clause defined in the agreement.">

type MasterAgreementClause: <"Defines clauses that make up a Master Agreement">
    identifer MasterAgreementClauseIdentifierEnum (1..1) <"Unique identifier for the clause">
    name string (0..1) <"Optional textual description of the clause.">
    counterparty CounterpartyRoleEnum (0..2) <"Optional counterparty role. This can be used where a clause needs to be assigned to a specific party on the agreement based upon their role i.e. Party A or Party B.">
    otherParty PartyRoleEnum (0..*) <"Optional party. This can be required for umbrella agreements where a clause may need to be assigned to a specific party who may or may not be on the agreement.">
    variant MasterAgreementClauseVariant (1..*) <"Allows multiple variants to be defined for a clause. This needs to be an array as some clauses can specify different variants for different parties. At least one variant must be specified for a clause.">

type MasterAgreementClauseVariant: <"Sets the details for a specific variant associated to a clause in a Master Agreement">
    identifier MasterAgreementVariantIdentifierEnum (1..1) <"Unique identifier for this variant">
    name string (0..1) <"Optional textual description of the variant.">
    counterparty CounterpartyRoleEnum (0..2) <"Optional counterparty role. This can be used where a clause needs to assign a different variant to the different parties on the agreement based upon their role i.e. Party A or Party B.">
    otherParty PartyRoleEnum (0..*) <"Optional party. This can be used where a clause needs to assign different variants to different parties who may or may not be on the agreement.">
    variableSet MasterAgreementVariableSet (0..*) <"For some variants of some clauses additional details are required to work out what has been elected. This array can be used to define the name and value of these variables. Please refer to the agreement documentation for more details of the variables that are available for any clause.">

type MasterAgreementVariableSet: <"Defines a type where additional variables associated to clauses and their variants can be described.">
    variableSet MasterAgreementVariableSet (0..*) <"For some variants a table of variables is required. To support this use case we need to be able to specify variables within variables. Including a variable set here gives us infinite nesting opportunities - realistically we are only ever expecting that a table would need to be defined for any particular clause, so we would expect two levels of nesting as a maximum i.e. variableSet->variableSet->name/value.">
    name string (0..1) <"The name of the variable">
    value string (0..1) <"The value for this variable">

    condition VariableSetExists: <"If we have a variableSet then we must not have any name/value pairs at this level.">
        if variableSet exists then name is absent and value is absent

    condition VariableSetNesting: <"We are only allowing two levels of nesting of variableSet for the time being. This is because we only need to support tables of data in the master agreement variants. This condition can be modified or deleted if we find we need more levels of nesting.">
        if variableSet -> variableSet exists
        then variableSet -> variableSet -> variableSet is absent

    condition NameMustExist: <"If we have a name then we must also have a value.">
        if name exists then value exists

    condition ValueMustExist: <"If we have a value then we must also have a name.">
        if value exists then name exists

type MasterConfirmationBase: <"Legal agreement specification for General Terms and Elections that are applicable across multiple confirmations and are referenced by these confirmations.">

type MasterAgreementBase : <"A set of elections that can be shared across master agreement types - this should be built upon for specific contracts">

type MasterAgreementElections: <"A representation of a master agreement extended from a base agreement of shared elections">
    islaGmsla isla.GlobalMasterSecuritiesLendingAgreement (0..1) <"The set of elections that define a GMSLA">
    icmaGmra icma.GlobalMasterRepoAgreement (0..1) <"The set of elections that define a GMRA">
    isdaMaster isda.MasterAgreement (0..1) <"The set of elections that define an ISDA Master Agreement">
    condition:
        one-of