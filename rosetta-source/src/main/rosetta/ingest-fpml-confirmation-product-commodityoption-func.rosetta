namespace cdm.ingest.fpml.confirmation.product.commodityoption: <"FpML CommodityOption product mapping functions.">
version "${project.version}"

import cdm.base.math.*
import cdm.base.staticdata.party.*
import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.datetime.*
import cdm.ingest.fpml.confirmation.other.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.pricequantity.*
import cdm.ingest.fpml.confirmation.settlement.*
import cdm.observable.asset.*
import cdm.product.asset.*
import cdm.product.common.schedule.*
import cdm.product.common.settlement.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

func MapCommodityOptionCounterpartyList:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapBuyerSellerModelToCounterpartyList(fpmlCommodityOption -> buyerSellerModel)

func MapCommodityOptionAncillaryPartyList:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapCommodityOptionNonTransferableProduct:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlCommodityOption -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlCommodityOption -> productModel),
            economicTerms: MapCommodityOptionEconomicTerms(
                        fpmlCommodityOption,
                        cdmCounterpartyList
                    )
        }

func MapCommodityOptionEconomicTerms:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            effectiveDate: MapAdjustableOrRelativeDate(
                        fpmlCommodityOption -> commodityFinancialOptionModel -> commodityOptionFeaturesModel -> effectiveDate
                    ),
            payout: MapCommodityOptionPayout(fpmlCommodityOption, cdmCounterpartyList),
            ...
        }

func MapCommodityOptionPayout:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    alias strikeUnit:
        UnitType {
            currency: MapCurrency(
                        fpmlCommodityOption -> commodityFinancialOptionModel -> commodityStrikePriceModel -> strikePricePerUnit -> currency
                    ),
            ...
        }

    alias strikePerUnitOf:
        UnitType {
            capacityUnit: MapCapacityUnitEnum(
                        fpmlCommodityOption -> commodityFinancialOptionModel -> commodityNotionalQuantityModel -> commodityNotionalQuantityModelSequence -> notionalQuantity -> quantityUnit -> value
                    ),
            ...
        }

    set payout:
        Payout {
            OptionPayout:
                OptionPayout {
                    payerReceiver: MapSellerAsPayerAndBuyerAsReceiver(
                                fpmlCommodityOption -> buyerSellerModel,
                                cdmCounterpartyList
                            ),
                    priceQuantity:
                        ResolvablePriceQuantity {
                            quantitySchedule: MapCommodityNotionalQuantityToQuantityWithAddress(
                                        fpmlCommodityOption -> commodityFinancialOptionModel -> commodityNotionalQuantityModel,
                                        empty
                                    ),
                            ...
                        },
                    settlementTerms: MapCommodityExerciseToSettlementTerms(
                                fpmlCommodityOption -> commodityFinancialOptionModel -> exercise
                            ),
                    buyerSeller: MapBuyerSeller(
                                fpmlCommodityOption -> buyerSellerModel,
                                cdmCounterpartyList
                            ),
                    observationTerms: MapCommodityOptionToObservationTerms(
                                fpmlCommodityOption
                            ),
                    underlier:
                        Underlier {
                            Observable: MapAssetToObservableWithAddress(
                                        fpmlCommodityOption -> commodityFinancialOptionModel -> commodity
                                    ),
                            ...
                        },
                    optionType: fpmlCommodityOption -> optionType to-enum OptionTypeEnum,
                    exerciseTerms: MapExerciseTerms(
                                GetFpmlCommodityExercise(
                                        fpmlCommodityOption -> commodityFinancialOptionModel -> exercise
                                    ),
                                fpml.ExerciseProcedure {
                                    followUpConfirmation: fpmlCommodityOption -> commodityFinancialOptionModel -> exercise -> writtenConfirmation,
                                    ...
                                },
                                fpmlCommodityOption -> commodityFinancialOptionModel -> exercise -> automaticExercise,
                                fpmlCommodityOption -> buyerSellerModel,
                                cdmCounterpartyList
                            ),
                    strike: if fpmlCommodityOption -> commodityFinancialOptionModel -> commodityStrikePriceModel -> strikePricePerUnit -> amount exists
                            then MapOptionStrikePrice(
                                    fpmlCommodityOption -> commodityFinancialOptionModel -> commodityStrikePriceModel -> strikePricePerUnit -> amount,
                                    empty,
                                    strikeUnit,
                                    strikePerUnitOf
                                ),
                    ...
                },
            ...
        }

func MapCommodityOptionToObservationTerms:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
    output:
        observationTerms ObservationTerms (0..1)

    alias fpmlCalculationPeriodsSchedule:
        fpmlCommodityOption -> commodityFinancialOptionModel -> commodityOptionFeaturesModel -> commodityOptionFeaturesModelSequence -> commodityAsianModel -> calculationPeriodsSchedule

    alias fpmlPricingDates:
        fpmlCommodityOption -> commodityFinancialOptionModel -> commodityOptionFeaturesModel -> commodityOptionFeaturesModelSequence -> commodityAsianModel -> pricingDates

    set observationTerms:
        ObservationTerms {
            calculationPeriodDates:
                CalculationPeriodDates {
                    calculationPeriodFrequency: MapCommodityCalculationPeriodsScheduleToCalculationPeriodFrequncy(
                                fpmlCalculationPeriodsSchedule
                            ),
                    ...
                },
            observationDates: MapCommodityPricingDatesToObservationDates(fpmlPricingDates),
            ...
        }

func MapCommodityPricingDatesToObservationDates:
    inputs:
        fpmlCommodityPricingDates fpml.CommodityPricingDates (0..1)
    output:
        observationDates ObservationDates (0..1)

    alias fpmlDateSequence:
        fpmlCommodityPricingDates -> commodityPricingDatesSequence -> commodityPricingDatesSequenceSequence

    set observationDates:
        ObservationDates {
            parametricDates:
                ParametricDates {
                    dayType: MapDayTypeEnum(
                                fpmlDateSequence -> daysModel -> dayType to-string
                            ),
                    dayDistribution: fpmlDateSequence -> daysModel -> daysModelSequence0 -> dayDistribution -> value to-enum DayDistributionEnum,
                    businessCenters: MapCommodityBusinessCalendarToBusinessCenters(
                                fpmlDateSequence -> businessCalendar
                            ),
                    ...
                },
            ...
        }

func MapCommodityOptionPriceQuantityList:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    add priceQuantityList:
        PriceQuantity {
            quantity: MapCommodityNotionalQuantityToQuantityListWithLocation(
                        fpmlCommodityOption -> commodityFinancialOptionModel -> commodityNotionalQuantityModel,
                        empty
                    ),
            observable: MapAssetToObservableWithLocation(
                        fpmlCommodityOption -> commodityFinancialOptionModel -> commodity
                    ),
            ...
        }

func MapCommodityOptionAccountPartyReference:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapBuyerSellerToAccountPartyReference(
                fpmlAccount,
                fpmlCommodityOption -> buyerSellerModel
            )
