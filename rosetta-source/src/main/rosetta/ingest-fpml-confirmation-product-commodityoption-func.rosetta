namespace cdm.ingest.fpml.confirmation.product.commodityoption: <"FpML CommodityOption product mapping functions.">
version "${project.version}"

import cdm.base.staticdata.party.*
import cdm.observable.asset.*
import cdm.product.template.*

import fpml.confirmation.* as fpml

import cdm.ingest.fpml.confirmation.common.*
import cdm.ingest.fpml.confirmation.party.*
import cdm.ingest.fpml.confirmation.pricequantity.*

func MapCommodityOptionCounterpartyList:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
    output:
        counterpartyList Counterparty (0..2)

    add counterpartyList:
        MapBuyerSellerModelToCounterpartyList(fpmlCommodityOption -> buyerSellerModel)

func MapCommodityOptionAncillaryPartyList:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
    output:
        ancillaryPartyList AncillaryParty (0..*)

func MapCommodityOptionNonTransferableProduct:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        nonTransferableProduct NonTransferableProduct (0..1)

    set nonTransferableProduct:
        NonTransferableProduct {
            identifier: MapProductIdentifierList(fpmlCommodityOption -> productModel),
            taxonomy: MapProductTaxonomyList(fpmlCommodityOption -> productModel),
            economicTerms: MapCommodityOptionEconomicTerms(
                    fpmlCommodityOption,
                    cdmCounterpartyList
                )
        }

func MapCommodityOptionEconomicTerms:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        economicTerms EconomicTerms (0..1)

    set economicTerms:
        EconomicTerms {
            payout: MapCommodityOptionPayout(fpmlCommodityOption, cdmCounterpartyList),
            ...
        }

func MapCommodityOptionPayout:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
        cdmCounterpartyList Counterparty (0..2)
    output:
        payout Payout (0..1)

    set payout:
        Payout {
            OptionPayout: OptionPayout {
                payerReceiver: MapSellerAsPayerAndBuyerAsReceiver(
                        fpmlCommodityOption -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                settlementTerms: empty,
                buyerSeller: MapBuyerSeller(
                        fpmlCommodityOption -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                underlier: Underlier {
                    Observable: MapAssetToObservableWithAddress(
                            fpmlCommodityOption -> commodityFinancialOptionModel -> commodity
                        ),
                    ...
                },
                optionType: fpmlCommodityOption -> optionType to-enum OptionTypeEnum,
                exerciseTerms: MapExerciseTerms(
                        GetFpmlCommodityExercise(
                                fpmlCommodityOption -> commodityFinancialOptionModel -> exercise
                            ),
                        empty,
                        fpmlCommodityOption -> buyerSellerModel,
                        cdmCounterpartyList
                    ),
                strike: OptionStrike {
                    strikePrice: Price {
                        priceType: if fpmlCommodityOption -> commodityFinancialOptionModel -> commodityStrikePriceModel -> strikePricePerUnit -> amount exists
                            then AssetPrice,
                        ...
                    },
                    ...
                },
                ...
            },
            ...
        }

func MapCommodityOptionPriceQuantityList:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
    output:
        priceQuantityList PriceQuantity (0..*)

    add priceQuantityList:
        PriceQuantity {
            observable: MapAssetToObservableWithLocation(
                    fpmlCommodityOption -> commodityFinancialOptionModel -> commodity
                ),
            ...
        }

func MapCommodityOptionAccountPartyReference:
    inputs:
        fpmlCommodityOption fpml.CommodityOption (0..1)
        fpmlAccount fpml.Account (0..1)
    output:
        partyReference Party (0..1)
            [metadata reference]

    set partyReference:
        MapBuyerSellerToAccountPartyReference(
                fpmlAccount,
                fpmlCommodityOption -> buyerSellerModel
            )
