namespace cdm.product.template : <"Template feature concepts to define payouts.">
version "${project.version}"

import cdm.base.math.*
import cdm.base.staticdata.identifier.*
import cdm.base.staticdata.asset.common.*
import cdm.base.staticdata.party.*

import cdm.observable.asset.*
import cdm.observable.common.*

import cdm.product.common.settlement.*

import cdm.event.common.*

func FilterTradeLot: <"Filter list of TradeLot based on TradeLot->lotIdentifier.">
    inputs:
        tradeLots TradeLot (0..*) <"List of TradeLots to filter.">
        lotIdentifier Identifier (0..*) <"The lot Identifiers to filter by.">
    output:
        filteredTradeLots TradeLot (0..*)

    add filteredTradeLots: tradeLots filter item -> lotIdentifier = lotIdentifier

func AddTradeLot: <"Add a TradeLot to an existing list of TradeLots.">
    inputs:
        tradableProduct TradableProduct (1..1) <"Input list of TradeLots.">
        newTradeLot TradeLot (1..1) <"The TradeLot to append to the list.">
    output:
        updatedTradableProduct TradableProduct (1..1)

    set updatedTradableProduct: tradableProduct
    add updatedTradableProduct -> tradeLot: newTradeLot

func ReplaceTradeLot: <"Replace TradeLot in with matching TradeLot->lotIdentifier.">
    inputs:
        tradeLots TradeLot (0..*) <"Input list of TradeLots.">
        newTradeLot TradeLot (1..1) <"The TradeLot to replace a matching TradeLot in the list.">
    output:
        mergedTradeLots TradeLot (0..*)

    add mergedTradeLots: <"Where the lot identifier matches, replace the existing TradeLot with the new TradeLot.">
        tradeLots
            extract
                if item -> lotIdentifier = newTradeLot -> lotIdentifier
                        or (item -> lotIdentifier is absent and newTradeLot -> lotIdentifier is absent)
                then newTradeLot
                else item

func CompareTradeLot: <"Compare the Quantity in TradeLot 1 to the Quantity (with the same unit of amount) in TradeLot 2, based on the CompareOp enum.">
    inputs:
        tradeLot1 TradeLot (1..1)
        op CompareOp (1..1)
        tradeLot2 TradeLot (1..1)
    output:
        result boolean (1..1)

    alias unitOfAmounts: tradeLot2 -> priceQuantity -> quantity -> unit distinct

    set result:
        unitOfAmounts
            extract unitOfAmount [
                CompareQuantityByUnitOfAmount(
                        tradeLot1 -> priceQuantity -> quantity
                            extract
                                NonNegativeQuantity {
                                    value: item -> value,
                                    unit: item -> unit,
                                    ...
                                },
                        op,
                        tradeLot2 -> priceQuantity -> quantity
                            extract
                                NonNegativeQuantity {
                                    value: item -> value,
                                    unit: item -> unit,
                                    ...
                                },
                        unitOfAmount
                    )
            ] all = True

func CompareTradeLotToAmount: <"Compare the Quantity amount in TradeLot to the given amount (regardless of unit of amount), based on the CompareOp enum.">
    inputs:
        tradeLot TradeLot (1..1)
        op CompareOp (1..1)
        amount number (1..1)
    output:
        result boolean (1..1)

    set result:
        tradeLot -> priceQuantity -> quantity
            filter item -> value exists
            then extract [ CompareNumbers(item -> value, op, amount) ]
                all = True

func PriceQuantityTriangulation: <"Defines all the scenarios which triangulation can be helpful validation between Prices and Quantities.">
    inputs:
        tradeLots TradeLot (0..*)
    output:
        success boolean (1..1)

    set success:
        if tradeLots count > 0
        then tradeLots
                extract [
                    if item -> priceQuantity -> price -> priceType contains PriceTypeEnum -> CashPrice
                    then CashPriceQuantityNoOfUnitsTriangulation(
                                item -> priceQuantity -> quantity,
                                item -> priceQuantity -> price
                            )
                    else True
                ] all = True
        else True

func FpmlIrd8: <"FpML validation rule ird-8 - If the same party is specified as the payer and receiver, then different accounts must be specified.">
    inputs:
        trade Trade (1..1)
        accounts Account (0..*)
    output:
        success boolean (1..1) <"Validation result">

func Create_CashflowFromSettlementPayout: <"Generates two opposite cashflows that correspond to a settlement payout. One leg is the asset leg, that settles the asset according to the quantity, direction and date defined in the settlement payout. The other is the price leg, that settles the price as a currency amount going in the opposite direction. The function's applicability is limited on purpose to a single asset with a single price and quantity specified.">
    inputs:
        payout SettlementPayout (1..1) <"The settlement payout from which the cashflows are generated.">
    output:
        cashflows Cashflow (2..2) <"The two generated cashflows (asset leg and price leg) going in opposite directions.">

    alias assetLeg: <"The asset leg consists in a cashflow which has the same attributes (asset, quantity, date and direction) as the settlement payout that generates it.">
        Cashflow {
            quantity: NonNegativeQuantity {
                value: payout -> priceQuantity -> quantitySchedule -> value,
                unit: payout -> priceQuantity -> quantitySchedule -> unit,
                ...
            },
            asset: payout -> underlier -> Observable -> Asset,
            settlementDate: payout -> settlementTerms -> settlementDate -> adjustableOrRelativeDate,
            payerReceiver: payout -> payerReceiver,
            cashflowType: CashflowType {
                cashflowType: PrincipalPayment,
                ...
            },
            ...
        }

    alias priceLegAmount: <"The amount (in cash) of the price leg is computed as: quantity (asset) x price. When a monetary amount is specified in the trade's PriceQuantity attribute, e.g. in the case of an FX transaction, a validation rule already ensures than this monetary amount is consistent with quantity x price.">
        payout -> priceQuantity -> quantitySchedule -> value * payout -> priceQuantity -> priceSchedule only-element -> value

    alias priceLegCurrency: <"The currency of the price leg is the currency in which the price is expressed.">
        payout -> priceQuantity -> priceSchedule only-element -> unit -> currency

    alias priceLegPayerReceiver: <"The payer / receiver direction of the price leg must be flipped compared to the settlement payout.">
        PayerReceiver {
            payer: payout -> payerReceiver -> receiver,
            receiver: payout -> payerReceiver -> payer
        }

    alias priceLeg: <"The price leg consists in a cashflow whose attributes (asset, quantity, date and direction) are inferred from the settlement payout. The quantity / unit is the currency amount to pay for the asset and the payer/receiver direction is flipped.">
        Cashflow {
            quantity: NonNegativeQuantity {
                value: priceLegAmount,
                unit: UnitType {
                    currency: priceLegCurrency,
                    ...
                },
                ...
            },
            asset: Asset {
                Cash: Cash {
                    identifier: AssetIdentifier {
                        identifier: priceLegCurrency,
                        identifierType: CurrencyCode
                    },
                    ...
                },
                ...
            },
            settlementDate: payout -> settlementTerms -> settlementDate -> adjustableOrRelativeDate,
            payerReceiver: priceLegPayerReceiver,
            cashflowType: CashflowType {
                cashflowType: PrincipalPayment,
                ...
            },
            ...
        }

    condition Asset: <"Restricts the function's applicability to a single asset for the underlier.">
        payout -> underlier -> Observable -> Asset exists

    condition SettlementDate: <"Restricts the function's applicability to the adjustable or relative date for the settlement date.">
        payout -> settlementTerms -> settlementDate -> adjustableOrRelativeDate exists

    condition SinglePriceAndQuantity: <"Restricts the function's applicability to a single quantity and price.">
        payout -> priceQuantity -> quantitySchedule -> value exists
            and payout -> priceQuantity -> priceSchedule only-element -> value exists

    set cashflows: [assetLeg, priceLeg]
